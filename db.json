{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/logo.png","path":"images/logo.png","modified":1,"renderable":0},{"_id":"source/images/mylogo.jpg","path":"images/mylogo.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.jpeg","path":"images/logo.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/user.png","path":"images/user.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1542594407714},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1542594407714},{"_id":"source/.DS_Store","hash":"566e232eb72c94fdcde11f906469365cf1bc4e67","modified":1542594858331},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1542594407714},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1542594407714},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1542594407714},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1542594407714},{"_id":"themes/next/_config.yml","hash":"277801746c49de606f3a9443c3079d7836f833d2","modified":1542594407714},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1542594407714},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1542594407722},{"_id":"source/_posts/Promise实现原理.md","hash":"d426bc2575ae3807093ffecd13aeb3acb697d3de","modified":1542594407699},{"_id":"source/_posts/React开发规范1-0.md","hash":"e027830bc363a93733f8e21fcbe9fe801f84e1d5","modified":1542594407699},{"_id":"source/_posts/es6语法.md","hash":"93e801ce17ba7fc14de126110b074a6afaa3d54b","modified":1542594407699},{"_id":"source/_posts/express中cookie-session.md","hash":"7beea914d3f5aace5dbc755e9023a00f8e701973","modified":1542594407699},{"_id":"source/_posts/express框架使用.md","hash":"ee4b24f041d10bedc1e81b837b18de93871e6fe3","modified":1542594407700},{"_id":"source/_posts/git.md","hash":"29970d8ea545b776845de014bbdcee2414156a67","modified":1542594407700},{"_id":"source/_posts/git分支.md","hash":"bed0cff6fc3bc65124ff378ae93957ccbfb6bbc8","modified":1542594407700},{"_id":"source/_posts/git发布静态网站.md","hash":"9bbe5cc6906c891e7e85fadc26ae2381ad4e0d75","modified":1542594407700},{"_id":"source/_posts/git在mac中自动补全功能配置.md","hash":"bc7d63061fbe19dc78c505eba23ddf36e6b8683d","modified":1542594407700},{"_id":"source/_posts/git文件内容对比.md","hash":"c03a4aaa53f99c546c42721177a8e8b9cc945727","modified":1542594407700},{"_id":"source/_posts/git文件回滚.md","hash":"5893439d570245596f18ab5f01bf65c6f5ccbd8a","modified":1542594407700},{"_id":"source/_posts/git解决冲突.md","hash":"f15cb11d3d034337f63805f66f832be7097ad68b","modified":1542594407700},{"_id":"source/_posts/WebStorm、PhpStorm搭建本地授权服务.md","hash":"364ee5fb0c94cb8b395f6749ff3fb2c5cc4a220f","modified":1542594407699},{"_id":"source/_posts/hexo发布.md","hash":"dc5380a1f3d97a1d98137ab3e7d48616abaee53a","modified":1542594407700},{"_id":"source/_posts/brew安装.md","hash":"bbdcb773229fe63a2568eea37f5cb49c4133f4e4","modified":1542594822786},{"_id":"source/_posts/hexo安装.md","hash":"3007d9b1d831e17f42712cae477b2f64bc9cbb48","modified":1542594407700},{"_id":"source/_posts/jsonp.md","hash":"f2cac6dfef56ffb77df0a148fe88ba3a2b1da563","modified":1542594407701},{"_id":"source/_posts/node-EventEmitter方法.md","hash":"7159c385cc289494c7abd8ae4e1f592e39fe24b6","modified":1542594407701},{"_id":"source/_posts/node发布与订阅.md","hash":"1bf8fce5d6b89ae694faefb0dd9a98b46f2183d1","modified":1542594407701},{"_id":"source/_posts/node同步与异步.md","hash":"2af194c8c17f956d8f92852811d8dd37a067e278","modified":1542594407701},{"_id":"source/_posts/node基础.md","hash":"f389339ca69b0b0c03cc7b00dff94214dca28de1","modified":1542594407701},{"_id":"source/_posts/node核心模块.md","hash":"48c67287ed390cfe180019936c256af2a145721c","modified":1542594407701},{"_id":"source/_posts/node模块安装.md","hash":"749016e2d9e82c6858953985ec42aeef9fe8defe","modified":1542594407701},{"_id":"source/_posts/前端学习清单.md","hash":"eb1708a0e331633bd884fb204c2be094cc98fcc7","modified":1542594407701},{"_id":"source/_posts/前端开发环境及工具.md","hash":"6b91aa5eb87620c45d0bd06922fea2ad53357c4f","modified":1542594407701},{"_id":"source/_posts/前端规范.md","hash":"3a467ec07f3fb81fab91d553e4cdd928dd38f458","modified":1542594407702},{"_id":"source/_posts/发布node模块包.md","hash":"408eeacc2fa35dfa47729387224152205b2f6a8c","modified":1542594407702},{"_id":"source/_posts/相关文档目录.md","hash":"3caa715a7ad6f7f99f7d578ad2232dd67b5aaf63","modified":1542594407702},{"_id":"source/_posts/基于uba前端mock代理.md","hash":"3bd771e46077f8c76b69e7e324cad50602c8f36d","modified":1542594407702},{"_id":"source/_posts/基于uba前端项目搭建.md","hash":"5ad3d310e64dbd49987ce1d3189eed516b15fb93","modified":1542594407702},{"_id":"source/_posts/项目中视图相关.md","hash":"35a45c56d4e55cb299900d631ea1d80ccde8e70c","modified":1542594407702},{"_id":"source/categories/index.md","hash":"0ee502555781a3ea90bd377c671d25853acc3a17","modified":1542594407702},{"_id":"source/tags/index.md","hash":"e63c59c7eb5176e9f8bafbfdc45508c627dd0ae6","modified":1542594407703},{"_id":"source/about/index.md","hash":"69bfef2ca818ee76d950e0bbbeb25bba3aff7026","modified":1542594407702},{"_id":"source/images/logo.png","hash":"5017c8e88551d428061dc2b5d940d8bfdfa8ced1","modified":1542594407702},{"_id":"source/images/mylogo.jpg","hash":"b7966211ca28b732f7eadaa173aeb579393d2c4c","modified":1542594407703},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1542594407715},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1542594407715},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1542594407714},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1542594407715},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1542594407715},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1542594407715},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1542594407715},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1542594407715},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1542594407715},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1542594407715},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1542594407715},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1542594407716},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1542594407715},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1542594407716},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1542594407722},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1542594407722},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1542594407722},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1542594407722},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1542594407722},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1542594407722},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1542594407722},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1542594407722},{"_id":"themes/next/source/404.html","hash":"cd43f2f324fa7cdadc46b36337f1d5c555681053","modified":1542594407723},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1542594407747},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1542594407747},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1542594407748},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407733},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1542594407716},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1542594407716},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1542594407717},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1542594407717},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1542594407717},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1542594407717},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1542594407717},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1542594407717},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1542594407717},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1542594407717},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1542594407718},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1542594407718},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1542594407718},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1542594407718},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1542594407718},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1542594407723},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1542594407723},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1542594407723},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1542594407723},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1542594407723},{"_id":"themes/next/source/css/main.styl","hash":"6d83d8215c7b67be0f7394a2c72188f2b06b00e3","modified":1542594407733},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1542594407733},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542594407733},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1542594407734},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1542594407734},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1542594407734},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1542594407734},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1542594407734},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1542594407734},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1542594407734},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542594407734},{"_id":"themes/next/source/images/logo.png","hash":"5017c8e88551d428061dc2b5d940d8bfdfa8ced1","modified":1542594407735},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542594407735},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1542594407735},{"_id":"themes/next/source/images/logo.jpeg","hash":"b7966211ca28b732f7eadaa173aeb579393d2c4c","modified":1542594407735},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1542594407735},{"_id":"themes/next/source/images/user.png","hash":"f97258d2b3a75e62f503299514a24515653df50e","modified":1542594407735},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542594407735},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1542594407719},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1542594407719},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1542594407719},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1542594407722},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407730},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407730},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407730},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407733},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407733},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407719},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542594407719},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1542594407716},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1542594407716},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1542594407718},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1542594407718},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1542594407718},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1542594407718},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1542594407718},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1542594407719},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1542594407719},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1542594407719},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1542594407719},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1542594407730},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1542594407730},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1542594407730},{"_id":"themes/next/source/css/_my/mycss.styl","hash":"d696178c0c41f1a8b8314aa3f8546bd3615656d0","modified":1542594407730},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1542594407733},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1542594407733},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1542594407733},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1542594407736},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1542594407736},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1542594407736},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1542594407736},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1542594407736},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1542594407736},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1542594407737},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1542594407736},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1542594407736},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1542594407738},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1542594407738},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1542594407738},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1542594407741},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1542594407741},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1542594407741},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1542594407741},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1542594407741},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1542594407742},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1542594407741},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1542594407742},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1542594407742},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1542594407745},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1542594407745},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1542594407745},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1542594407744},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1542594407745},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1542594407746},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1542594407745},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1542594407745},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1542594407746},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542594407747},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1542594407719},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542594407747},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1542594407720},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542594407747},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1542594407721},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542594407745},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1542594407729},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1542594407723},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1542594407724},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1542594407723},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1542594407724},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1542594407729},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1542594407729},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1542594407730},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1542594407726},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1542594407730},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1542594407730},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1542594407730},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1542594407732},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1542594407732},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1542594407736},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1542594407740},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1542594407740},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1542594407740},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1542594407741},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1542594407741},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1542594407742},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1542594407742},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1542594407742},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542594407745},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542594407746},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1542594407720},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1542594407721},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1542594407721},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1542594407743},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1542594407743},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542594407747},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1542594407744},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1542594407744},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1542594407724},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1542594407724},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1542594407724},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1542594407724},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1542594407724},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1542594407724},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1542594407726},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1542594407726},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1542594407725},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1542594407726},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1542594407726},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1542594407726},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1542594407726},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1542594407726},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1542594407727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1542594407729},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1542594407728},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1542594407729},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1542594407729},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1542594407729},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1542594407729},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1542594407729},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1542594407729},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1542594407731},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1542594407732},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542594407739},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542594407740},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1542594407740},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1542594407740},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1542594407740},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1542594407743},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1542594407738},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1542594407743}],"Category":[{"name":"es6","_id":"cjonqk4a10002yeh76ldyvdrd"},{"name":"规范","_id":"cjonqk4a50007yeh7028vnh20"},{"name":"node","_id":"cjonqk4aa000hyeh7qm0tzuf4"},{"name":"Git","_id":"cjonqk4af000tyeh76pgndufx"},{"name":"HEXO","_id":"cjonqk4au0025yeh70amvk8tu"},{"name":"开发工具","_id":"cjonqk4av002cyeh7t2vs8jl0"},{"name":"jsonp","_id":"cjonqk4ax002nyeh7ug99kexi"},{"name":"初始","_id":"cjonqk4az002tyeh7zsk45c6a"},{"name":"React","_id":"cjonqk4dy004oyeh7v543j9dd"},{"name":"工具","_id":"cjonqq0k9004zyefy83sw7l7v"}],"Data":[],"Page":[{"title":"categories","date":"2017-01-24T03:05:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-01-24 11:05:16\ntype: categories\n---\n","updated":"2018-11-19T02:26:47.702Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjonqk4dp0046yeh7d75tw35r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-01-24T03:05:47.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-24 11:05:47\ntype: about\n---\n","updated":"2018-11-19T02:26:47.702Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjonqk4dq0048yeh7cmrfkj1y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-01-24T03:05:32.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-24 11:05:32\ntype: tags\n---\n","updated":"2018-11-19T02:26:47.703Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjonqk4ds004byeh7fe43x6bu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Promise实现原理","date":"2018-03-16T14:17:09.000Z","_content":"## Promise实现原理\n\n> Promise 是一个类，高版本浏览器已经实现了 Promise 类\n\nPromise 需要传递一个执行函数即 executor \n\n```javascript\n/**\n * @param {Function} executor 即\b执行函数\n */\nnew Promise(function(){\n    console.log(1);\n})\n\n// => 1\n```\n\n<!-- more -->\n\nexecutor 包含两个参数，分别是 resolve (解决)、 reject (拒绝) \n\n如果 resolve 执行成功，不会运行 reject\n\n```javascript\n/**\n * @param {Function} resolve 成功的回调\n * @param {Function} reject 失败的回调\n */\nlet p = new Promise(function(resolve,reject){\n    // resolve('ok');\n    reject('err');\n    // 当在执行函数中抛出错误的时候，会执行失败的回调\n    // throw new Error();\n})\n\n// p 代表的是 Promise 实例\np.then(function(data){\n    console.log(data);\n},function(err){\n    console.log(err);\n});\n\n// => ‘err’\n```\n### 以下是 Promise 基本功能实现\n\n```javascript\n/**\n * \n * @param {Function} executor 执行函数\n */\nfunction Promise(executor) {\n\tlet _this = this;\n\t// 初始状态\n\t_this.status = 'pending';\n\t// 执行成功的初始值\n\t_this.value = undefined;\n\t// 执行失败的初始值\n\t_this.reason = undefined;\n\t// 存储多个成功回调\n\t_this.reslovedCallBacks = [];\n\t// 存储多个失败回调\n\t_this.rejectedCallBacks = [];\n\tfunction resolve(value) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'resloved';\n\t\t\t_this.value === value;\n\t\t\t_this.reslovedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.value);\n\t\t\t});\n\t\t}\n\t}\n\tfunction reject(reason) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'rejected';\n\t\t\t_this.reason === reason;\n\t\t\t_this.rejectedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.reason);\n\t\t\t});\n\t\t}\n\t}\n\ttry {\n\t\texecutor(resolve, reject);\n\t} catch (e) {\n\t\t// 执行函数报错时，直接抛出错误给 reject 函数\n\t\treject(e);\n\t}\n}\n/**\n * \n * @param {Function} onFulfilled 成功的回调\n * @param {Function} onRejected 失败的回调\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n    let _this = this;\n\t// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储\n\tif (_this.status === 'pending') {\n\t\t_this.resloveCallBacks.push(onFulfilled);\n\t\t_this.rejectCallBacks.push(onRejected);\n\t}\n\t// 当执行函数状态为 resloved 时 执行成功回调函数\n\tif (_this.status === 'resloved') {\n\t\tonFullfilled(_this.value);\n\t}\n\t// 当执行函数状态为 rejected 时 执行失败回调函数\n\tif (_this.status === 'rejected') {\n\t\tonRejected(_this.reason);\n\t}\n};\n```\n## Promise 的链式调用\n\n> 链式调用的特点，会将第一个 then 中不论成功或者失败的返回值，作为下一个 then 中成功的回调函数的参数\n\n链式调用：依靠的是返回一个新的 \bPromise 实例\n\n### \b链式调用的基本功能实现\n\n```javascript\n/**\n * \n * @param {Function} executor 执行函数\n */\nfunction Promise(executor) {\n\tlet _this = this;\n\t// 初始状态\n\t_this.status = 'pending';\n\t// 执行成功的初始值\n\t_this.value = undefined;\n\t// 执行失败的初始值\n\t_this.reason = undefined;\n\t// 存储多个成功回调\n\t_this.reslovedCallBacks = [];\n\t// 存储多个失败回调\n\t_this.rejectedCallBacks = [];\n\tfunction resolve(value) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'resloved';\n\t\t\t_this.value === value;\n\t\t\t_this.reslovedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.value);\n\t\t\t});\n\t\t}\n\t}\n\tfunction reject(reason) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'rejected';\n\t\t\t_this.reason === reason;\n\t\t\t_this.rejectedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.reason);\n\t\t\t});\n\t\t}\n\t}\n\ttry {\n\t\texecutor(resolve, reject);\n\t} catch (e) {\n\t\t// 执行函数报错时，直接抛出错误给 reject 函数\n\t\treject(e);\n\t}\n}\n/**\n * \n * @param {Function} onFulfilled 成功的回调\n * @param {Function} onRejected 失败的回调\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n\tonFulfilled =\n\t\ttypeof onFulfilled === 'function'\n\t\t\t? onFulfilled\n\t\t\t: function(data) {\n\t\t\t\t\treturn data;\n\t\t\t\t};\n\tonRejected =\n\t\ttypeof onRejected === 'function'\n\t\t\t? onRejected\n\t\t\t: function(e) {\n\t\t\t\t\tthrow e;\n\t\t\t\t};\n\tlet _this = this;\n\tlet promise2;\n\t// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储\n\tif (_this.status === 'pending') {\n\t\t// 之所以在返回一个新的 Promise 是因为还要继续走下一个 then 中成功和失败的回调\n\t\treturn (promise2 = new Promise(function(resolve, reject) {\n\t\t\t_this.resloveCallBacks.push(function() {\n\t\t\t\tlet x = onFulfilled(_this.value);\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\t// 执行新的 Promise\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t});\n\t\t\t_this.rejectCallBacks.push(function() {\n\t\t\t\tlet x = onRejected(_this.value);\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\t// 当执行函数状态为 resloved 时 执行成功回调函数\n\tif (_this.status === 'resloved') {\n\t\treturn (promise2 = new Promise(function(resolve, reject) {\n\t\t\ttry {\n\t\t\t\tlet x = onFulfilled(_this.value);\n\t\t\t\t// 判断成功的回调执行结果是否为 Promise 函数，如果是执行新的 Promise 实例 then 方法，如果不是直接执行 Promise 中成功的方法\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}));\n\t}\n\t// 当执行函数状态为 rejected 时 执行失败回调函数\n\tif (_this.status === 'rejected') {\n\t\treturn (promise2 = new Promise(function(resolve, reject) {\n\t\t\ttry {\n\t\t\t\tlet x = onRejected(_this.value);\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}));\n\t}\n};\n// 最终的异常抛出在 Promise 类中添加 catch 方法\nPromise.prototype.catch = function(func) {\n\treturn this.then(null, func);\n};\n\n```\n\n","source":"_posts/Promise实现原理.md","raw":"---\ntitle: Promise实现原理\ndate: 2018-03-16 22:17:09\ntags: [前端，基础]\ncategories: es6\n---\n## Promise实现原理\n\n> Promise 是一个类，高版本浏览器已经实现了 Promise 类\n\nPromise 需要传递一个执行函数即 executor \n\n```javascript\n/**\n * @param {Function} executor 即\b执行函数\n */\nnew Promise(function(){\n    console.log(1);\n})\n\n// => 1\n```\n\n<!-- more -->\n\nexecutor 包含两个参数，分别是 resolve (解决)、 reject (拒绝) \n\n如果 resolve 执行成功，不会运行 reject\n\n```javascript\n/**\n * @param {Function} resolve 成功的回调\n * @param {Function} reject 失败的回调\n */\nlet p = new Promise(function(resolve,reject){\n    // resolve('ok');\n    reject('err');\n    // 当在执行函数中抛出错误的时候，会执行失败的回调\n    // throw new Error();\n})\n\n// p 代表的是 Promise 实例\np.then(function(data){\n    console.log(data);\n},function(err){\n    console.log(err);\n});\n\n// => ‘err’\n```\n### 以下是 Promise 基本功能实现\n\n```javascript\n/**\n * \n * @param {Function} executor 执行函数\n */\nfunction Promise(executor) {\n\tlet _this = this;\n\t// 初始状态\n\t_this.status = 'pending';\n\t// 执行成功的初始值\n\t_this.value = undefined;\n\t// 执行失败的初始值\n\t_this.reason = undefined;\n\t// 存储多个成功回调\n\t_this.reslovedCallBacks = [];\n\t// 存储多个失败回调\n\t_this.rejectedCallBacks = [];\n\tfunction resolve(value) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'resloved';\n\t\t\t_this.value === value;\n\t\t\t_this.reslovedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.value);\n\t\t\t});\n\t\t}\n\t}\n\tfunction reject(reason) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'rejected';\n\t\t\t_this.reason === reason;\n\t\t\t_this.rejectedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.reason);\n\t\t\t});\n\t\t}\n\t}\n\ttry {\n\t\texecutor(resolve, reject);\n\t} catch (e) {\n\t\t// 执行函数报错时，直接抛出错误给 reject 函数\n\t\treject(e);\n\t}\n}\n/**\n * \n * @param {Function} onFulfilled 成功的回调\n * @param {Function} onRejected 失败的回调\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n    let _this = this;\n\t// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储\n\tif (_this.status === 'pending') {\n\t\t_this.resloveCallBacks.push(onFulfilled);\n\t\t_this.rejectCallBacks.push(onRejected);\n\t}\n\t// 当执行函数状态为 resloved 时 执行成功回调函数\n\tif (_this.status === 'resloved') {\n\t\tonFullfilled(_this.value);\n\t}\n\t// 当执行函数状态为 rejected 时 执行失败回调函数\n\tif (_this.status === 'rejected') {\n\t\tonRejected(_this.reason);\n\t}\n};\n```\n## Promise 的链式调用\n\n> 链式调用的特点，会将第一个 then 中不论成功或者失败的返回值，作为下一个 then 中成功的回调函数的参数\n\n链式调用：依靠的是返回一个新的 \bPromise 实例\n\n### \b链式调用的基本功能实现\n\n```javascript\n/**\n * \n * @param {Function} executor 执行函数\n */\nfunction Promise(executor) {\n\tlet _this = this;\n\t// 初始状态\n\t_this.status = 'pending';\n\t// 执行成功的初始值\n\t_this.value = undefined;\n\t// 执行失败的初始值\n\t_this.reason = undefined;\n\t// 存储多个成功回调\n\t_this.reslovedCallBacks = [];\n\t// 存储多个失败回调\n\t_this.rejectedCallBacks = [];\n\tfunction resolve(value) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'resloved';\n\t\t\t_this.value === value;\n\t\t\t_this.reslovedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.value);\n\t\t\t});\n\t\t}\n\t}\n\tfunction reject(reason) {\n\t\tif (_this.status === 'pending') {\n\t\t\t_this.status = 'rejected';\n\t\t\t_this.reason === reason;\n\t\t\t_this.rejectedCallBacks.forEach((element) => {\n\t\t\t\telement(_this.reason);\n\t\t\t});\n\t\t}\n\t}\n\ttry {\n\t\texecutor(resolve, reject);\n\t} catch (e) {\n\t\t// 执行函数报错时，直接抛出错误给 reject 函数\n\t\treject(e);\n\t}\n}\n/**\n * \n * @param {Function} onFulfilled 成功的回调\n * @param {Function} onRejected 失败的回调\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n\tonFulfilled =\n\t\ttypeof onFulfilled === 'function'\n\t\t\t? onFulfilled\n\t\t\t: function(data) {\n\t\t\t\t\treturn data;\n\t\t\t\t};\n\tonRejected =\n\t\ttypeof onRejected === 'function'\n\t\t\t? onRejected\n\t\t\t: function(e) {\n\t\t\t\t\tthrow e;\n\t\t\t\t};\n\tlet _this = this;\n\tlet promise2;\n\t// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储\n\tif (_this.status === 'pending') {\n\t\t// 之所以在返回一个新的 Promise 是因为还要继续走下一个 then 中成功和失败的回调\n\t\treturn (promise2 = new Promise(function(resolve, reject) {\n\t\t\t_this.resloveCallBacks.push(function() {\n\t\t\t\tlet x = onFulfilled(_this.value);\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\t// 执行新的 Promise\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t});\n\t\t\t_this.rejectCallBacks.push(function() {\n\t\t\t\tlet x = onRejected(_this.value);\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\t// 当执行函数状态为 resloved 时 执行成功回调函数\n\tif (_this.status === 'resloved') {\n\t\treturn (promise2 = new Promise(function(resolve, reject) {\n\t\t\ttry {\n\t\t\t\tlet x = onFulfilled(_this.value);\n\t\t\t\t// 判断成功的回调执行结果是否为 Promise 函数，如果是执行新的 Promise 实例 then 方法，如果不是直接执行 Promise 中成功的方法\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}));\n\t}\n\t// 当执行函数状态为 rejected 时 执行失败回调函数\n\tif (_this.status === 'rejected') {\n\t\treturn (promise2 = new Promise(function(resolve, reject) {\n\t\t\ttry {\n\t\t\t\tlet x = onRejected(_this.value);\n\t\t\t\tif (x instanceof Promise) {\n\t\t\t\t\tx.then(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(x);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}));\n\t}\n};\n// 最终的异常抛出在 Promise 类中添加 catch 方法\nPromise.prototype.catch = function(func) {\n\treturn this.then(null, func);\n};\n\n```\n\n","slug":"Promise实现原理","published":1,"updated":"2018-11-19T02:26:47.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk49x0000yeh7kqkw097e","content":"<h2 id=\"Promise实现原理\"><a href=\"#Promise实现原理\" class=\"headerlink\" title=\"Promise实现原理\"></a>Promise实现原理</h2><blockquote>\n<p>Promise 是一个类，高版本浏览器已经实现了 Promise 类</p>\n</blockquote>\n<p>Promise 需要传递一个执行函数即 executor </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; executor 即\b执行函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>executor 包含两个参数，分别是 resolve (解决)、 reject (拒绝) </p>\n<p>如果 resolve 执行成功，不会运行 reject</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; resolve 成功的回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; reject 失败的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// resolve('ok');</span></span><br><span class=\"line\">    reject(<span class=\"string\">'err'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 当在执行函数中抛出错误的时候，会执行失败的回调</span></span><br><span class=\"line\">    <span class=\"comment\">// throw new Error();</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p 代表的是 Promise 实例</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; ‘err’</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"以下是-Promise-基本功能实现\"><a href=\"#以下是-Promise-基本功能实现\" class=\"headerlink\" title=\"以下是 Promise 基本功能实现\"></a>以下是 Promise 基本功能实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; executor 执行函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">\t_this.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行成功的初始值</span></span><br><span class=\"line\">\t_this.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行失败的初始值</span></span><br><span class=\"line\">\t_this.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个成功回调</span></span><br><span class=\"line\">\t_this.reslovedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个失败回调</span></span><br><span class=\"line\">\t_this.rejectedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'resloved'</span>;</span><br><span class=\"line\">\t\t\t_this.value === value;</span><br><span class=\"line\">\t\t\t_this.reslovedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.value);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">\t\t\t_this.reason === reason;</span><br><span class=\"line\">\t\t\t_this.rejectedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.reason);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\texecutor(resolve, reject);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行函数报错时，直接抛出错误给 reject 函数</span></span><br><span class=\"line\">\t\treject(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onFulfilled 成功的回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onRejected 失败的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t_this.resloveCallBacks.push(onFulfilled);</span><br><span class=\"line\">\t\t_this.rejectCallBacks.push(onRejected);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 resloved 时 执行成功回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'resloved'</span>) &#123;</span><br><span class=\"line\">\t\tonFullfilled(_this.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 rejected 时 执行失败回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">\t\tonRejected(_this.reason);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-的链式调用\"><a href=\"#Promise-的链式调用\" class=\"headerlink\" title=\"Promise 的链式调用\"></a>Promise 的链式调用</h2><blockquote>\n<p>链式调用的特点，会将第一个 then 中不论成功或者失败的返回值，作为下一个 then 中成功的回调函数的参数</p>\n</blockquote>\n<p>链式调用：依靠的是返回一个新的 \bPromise 实例</p>\n<h3 id=\"链式调用的基本功能实现\"><a href=\"#链式调用的基本功能实现\" class=\"headerlink\" title=\"\b链式调用的基本功能实现\"></a>\b链式调用的基本功能实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; executor 执行函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">\t_this.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行成功的初始值</span></span><br><span class=\"line\">\t_this.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行失败的初始值</span></span><br><span class=\"line\">\t_this.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个成功回调</span></span><br><span class=\"line\">\t_this.reslovedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个失败回调</span></span><br><span class=\"line\">\t_this.rejectedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'resloved'</span>;</span><br><span class=\"line\">\t\t\t_this.value === value;</span><br><span class=\"line\">\t\t\t_this.reslovedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.value);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">\t\t\t_this.reason === reason;</span><br><span class=\"line\">\t\t\t_this.rejectedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.reason);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\texecutor(resolve, reject);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行函数报错时，直接抛出错误给 reject 函数</span></span><br><span class=\"line\">\t\treject(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onFulfilled 成功的回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onRejected 失败的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\tonFulfilled =</span><br><span class=\"line\">\t\t<span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span></span><br><span class=\"line\">\t\t\t? onFulfilled</span><br><span class=\"line\">\t\t\t: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\tonRejected =</span><br><span class=\"line\">\t\t<span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span></span><br><span class=\"line\">\t\t\t? onRejected</span><br><span class=\"line\">\t\t\t: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> promise2;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 之所以在返回一个新的 Promise 是因为还要继续走下一个 then 中成功和失败的回调</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t_this.resloveCallBacks.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onFulfilled(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 执行新的 Promise</span></span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t_this.rejectCallBacks.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onRejected(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 resloved 时 执行成功回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'resloved'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onFulfilled(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 判断成功的回调执行结果是否为 Promise 函数，如果是执行新的 Promise 实例 then 方法，如果不是直接执行 Promise 中成功的方法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\t\treject(e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 rejected 时 执行失败回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onRejected(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\t\treject(e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 最终的异常抛出在 Promise 类中添加 catch 方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, func);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Promise实现原理\"><a href=\"#Promise实现原理\" class=\"headerlink\" title=\"Promise实现原理\"></a>Promise实现原理</h2><blockquote>\n<p>Promise 是一个类，高版本浏览器已经实现了 Promise 类</p>\n</blockquote>\n<p>Promise 需要传递一个执行函数即 executor </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; executor 即\b执行函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>","more":"<p>executor 包含两个参数，分别是 resolve (解决)、 reject (拒绝) </p>\n<p>如果 resolve 执行成功，不会运行 reject</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; resolve 成功的回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; reject 失败的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// resolve('ok');</span></span><br><span class=\"line\">    reject(<span class=\"string\">'err'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 当在执行函数中抛出错误的时候，会执行失败的回调</span></span><br><span class=\"line\">    <span class=\"comment\">// throw new Error();</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p 代表的是 Promise 实例</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; ‘err’</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"以下是-Promise-基本功能实现\"><a href=\"#以下是-Promise-基本功能实现\" class=\"headerlink\" title=\"以下是 Promise 基本功能实现\"></a>以下是 Promise 基本功能实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; executor 执行函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">\t_this.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行成功的初始值</span></span><br><span class=\"line\">\t_this.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行失败的初始值</span></span><br><span class=\"line\">\t_this.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个成功回调</span></span><br><span class=\"line\">\t_this.reslovedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个失败回调</span></span><br><span class=\"line\">\t_this.rejectedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'resloved'</span>;</span><br><span class=\"line\">\t\t\t_this.value === value;</span><br><span class=\"line\">\t\t\t_this.reslovedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.value);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">\t\t\t_this.reason === reason;</span><br><span class=\"line\">\t\t\t_this.rejectedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.reason);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\texecutor(resolve, reject);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行函数报错时，直接抛出错误给 reject 函数</span></span><br><span class=\"line\">\t\treject(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onFulfilled 成功的回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onRejected 失败的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t_this.resloveCallBacks.push(onFulfilled);</span><br><span class=\"line\">\t\t_this.rejectCallBacks.push(onRejected);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 resloved 时 执行成功回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'resloved'</span>) &#123;</span><br><span class=\"line\">\t\tonFullfilled(_this.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 rejected 时 执行失败回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">\t\tonRejected(_this.reason);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-的链式调用\"><a href=\"#Promise-的链式调用\" class=\"headerlink\" title=\"Promise 的链式调用\"></a>Promise 的链式调用</h2><blockquote>\n<p>链式调用的特点，会将第一个 then 中不论成功或者失败的返回值，作为下一个 then 中成功的回调函数的参数</p>\n</blockquote>\n<p>链式调用：依靠的是返回一个新的 \bPromise 实例</p>\n<h3 id=\"链式调用的基本功能实现\"><a href=\"#链式调用的基本功能实现\" class=\"headerlink\" title=\"\b链式调用的基本功能实现\"></a>\b链式调用的基本功能实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; executor 执行函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">\t_this.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行成功的初始值</span></span><br><span class=\"line\">\t_this.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行失败的初始值</span></span><br><span class=\"line\">\t_this.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个成功回调</span></span><br><span class=\"line\">\t_this.reslovedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"comment\">// 存储多个失败回调</span></span><br><span class=\"line\">\t_this.rejectedCallBacks = [];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'resloved'</span>;</span><br><span class=\"line\">\t\t\t_this.value === value;</span><br><span class=\"line\">\t\t\t_this.reslovedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.value);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t\t_this.status = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">\t\t\t_this.reason === reason;</span><br><span class=\"line\">\t\t\t_this.rejectedCallBacks.forEach(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\telement(_this.reason);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\texecutor(resolve, reject);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行函数报错时，直接抛出错误给 reject 函数</span></span><br><span class=\"line\">\t\treject(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onFulfilled 成功的回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Function&#125; onRejected 失败的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\tonFulfilled =</span><br><span class=\"line\">\t\t<span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span></span><br><span class=\"line\">\t\t\t? onFulfilled</span><br><span class=\"line\">\t\t\t: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\tonRejected =</span><br><span class=\"line\">\t\t<span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span></span><br><span class=\"line\">\t\t\t? onRejected</span><br><span class=\"line\">\t\t\t: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> promise2;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数为等待状态的时候 将 onFulfilled、onRejected 进行存储</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 之所以在返回一个新的 Promise 是因为还要继续走下一个 then 中成功和失败的回调</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t_this.resloveCallBacks.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onFulfilled(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 执行新的 Promise</span></span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t_this.rejectCallBacks.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onRejected(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 resloved 时 执行成功回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'resloved'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onFulfilled(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 判断成功的回调执行结果是否为 Promise 函数，如果是执行新的 Promise 实例 then 方法，如果不是直接执行 Promise 中成功的方法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\t\treject(e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 当执行函数状态为 rejected 时 执行失败回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_this.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> x = onRejected(_this.value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tx.then(resolve, reject);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t\t\t\treject(e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 最终的异常抛出在 Promise 类中添加 catch 方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, func);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"React开发规范1.0","date":"2018-03-05T02:43:39.000Z","_content":"## React 代码规范\n\n### 内容目录 \n\n[Toc]\n\n---\n>1.部分遵循 [eslint 规则](https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules)， 后期可以直接引入 eslint\n>\n>2.此规范参考 tinper-bee 及 airbnb react 开发规范 \n\n### 基础规范\n- 统一使用 `utf-8` 编码\n- ==回车换行==统一使用`CRLF`\n- `Tab` 缩进为 `4` 个空格\n- 统一使用 ES6 语法进行开发 [ES6 语法参考](http://es6.ruanyifeng.com/)\n- 使用 JSX 语法，模块文件统一使用 js 后缀\n- 不要使用 `React.createClass`\n- 每一个文件只包含一个组件，每一个基本组件只包含单一功能 [组件设计原则](https://github.com/tinper-bee/react-components-docs/blob/master/%E7%BB%84%E4%BB%B6%E5%88%92%E5%88%86%E5%8E%9F%E5%88%99.md)\n\n<!--more-->\n### 命名\n- #### 文件命名\n    - 文件名使用大驼峰命名 `MyComponent`\n\n- #### 模块命名\n    - 模块使用当前模块文件夹名一样的名称\n    > 如果整个文件夹是一个模块，使用 `index.js`作为入口文件，然后直接使用当前文件夹名作为模块名称\n\n    ```\n    // bad\n    import Footer from './Footer/index';\n\n    // good\n    import Footer from './Footer';\n    ```\n\n- #### 引用命名\n    - 模块名使用大驼峰命名\n\n    ```javascriipt\n    // bad\n    import myComponent from './MyComponent';\n\n    // good\n    import MyComponent from './MyComponent';\n    ```\n    - 实例使用正常驼峰命名\n    ```\n    // bad\n    const MyComponent = <MyComponent />;\n\n    // good\n    const myComponent = <MyComponent />;\n    ```\n- #### 属性命名\n    - 避免使用 DOM 相关属性来用作其他用途\n    > 相关属性为正常 HTML 标签属性，如 `style、id、class、href` 等\n\n    ```javascriipt\n    // bad\n    <MyComponent style=\"fancy\" />\n\n    // good\n    <MyComponent variant=\"fancy\" />\n    ```\n\n### JSX 书写规范\n- #### 代码对齐\n    - 遵循以下的 JSX 语法缩进格式\n    ```\n    // bad\n    <Foo superLongParam=\"bar\"\n         anotherSuperLongParam=\"baz\" />\n    \n    // good, 有多行属性的话, 新建一行关闭标签\n    <Foo\n      superLongParam=\"bar\"\n      anotherSuperLongParam=\"baz\"\n    />\n    \n    // 若能在一行中显示, 直接写成一行\n    <Foo bar=\"bar\" />\n    \n    // 子元素按照常规方式缩进\n    <Foo\n      superLongParam=\"bar\"\n      anotherSuperLongParam=\"baz\"\n    >\n    </Foo>\n    ```\n- #### 单双引号\n    - 对于 JSX 属性值总是使用双引号（`\"`）,其他均使用单引号（`'`）\n    ```\n    // bad\n    <Foo bar='bar' />\n    \n    // good\n    <Foo bar=\"bar\" />\n    \n    // bad\n    <Foo style={{ left: \"20px\" }} />\n    \n    // good\n    <Foo style={{ left: '20px' }} />\n    ```\n- #### 空格\n    - 总是在自动关闭的标签前加一个空格，正常情况下不需要换行\n    ```\n    // bad\n    <Foo/>\n    \n    // very bad\n    <Foo                 />\n    \n    // bad\n    <Foo\n     />\n    \n    // good\n    <Foo />\n    ```\n    - 不要在 JSX `{}` 引用括号里两边加空格\n    ```\n    // bad\n    <Foo bar={ baz } />\n    \n    // good\n    <Foo bar={baz} />\n    ```\n\n- #### 标签\n    - 对于没有子元素的标签来说总是自己关闭标签\n    ```\n    // bad\n    <Foo className=\"stuff\"></Foo>\n\n    // good\n    <Foo className=\"stuff\" />\n    ```\n    - 如果模块有多行的属性，关闭标签时新建一行\n    ```\n    // bad\n    <Foo\n        bar=\"bar\"\n        baz=\"baz\" />\n\n    // good\n    <Foo\n        bar=\"bar\"\n        baz=\"baz\"\n    />\n    ```\n- #### 组件结构\n\n    - 总体规则\n\n        函数式组件形式优于 ES6 Class\n\n    - 书写规则\n\n        组件（ES6 Class）内部生命周期函数书写顺序，如下\n\n    1. 可选的`static`方法\n    \n    2. `constructor`构造函数\n    \n    3. `getChildContext`获取子元素内容\n    \n    4. `componentWillMount`模块渲染前\n    \n    5. `componentDidMount`模块渲染后\n    \n    6. `componentWillReceiveProps`模块将接受新的数据\n    \n    7. `shouldComponentUpdate`判断模块需不需要重新渲染\n    \n    8. `componentWillUpdate`上面的的方法返回 true ，模块将重新渲染\n    \n    9. `componentDidUpdate`模块渲染结束\n    \n    10. `componentWillUnmount`模块将从DOM中清除，可以做些清理任务\n    \n    11. 点击回调或者事件处理器 如 `onClickSubmit()` 或 `onChangeDescription()`\n    \n    12. `render` 里的 getter方法 如 `getSelectReason()` 或 `getFooterContent()`\n    \n    13. 可选的 render 方法 如 `renderNavigation()` 或 `renderProfilePicture()`\n    \n    14. `render` render() 方法\n    \n        - 示例代码\n        > 如何定义 propTypes, defaultProps, contextTypes, 等其他属性...\n        \n        ```javascript\n        import React from 'react';\n        import PropTypes from 'prop-types';\n        \n        // 定义 props 类型\n        const propTypes = {\n          name: React.PropTypes.string\n        };\n        \n        // 如果需要\n        const defaultProps = {\n          name: 'Guest'\n        };\n        \n        class Person extends React.Component {\n          // 构造函数\n          constructor (props) {\n            super(props);\n            // 定义 state\n            this.state = { smiling: false };\n          }\n        \n          // 生命周期方法\n          componentWillMount () {},\n          componentDidMount () {},\n          componentWillUnmount () {},\n          \n          // getters and setters\n          get attr() {}\n        \n          // handlers\n          handleClick = ()=>{},\n        \n          // render\n          renderChild() {},\n          render () {},\n        \n        }\n        \n        /**\n         * 类变量定义\n         */\n        Person.defaultProps = defaultProps;\n        \n        /**\n         * 统一都要定义 propTypes\n         * @type {Object}\n         */\n        Person.propTypes = propTypes;\n        ```\n<!--\n- #### Refs \n    - 在 Refs 里使用回调函数\n\n    ```javascript\n    // bad\n    <Foo\n      ref=\"myRef\"\n    />\n    \n    // good\n    <Foo\n      ref={(ref) => { this.myRef = ref; }}\n    />\n    ```\n-->\n### 语法规范\n- #### return (返回)\n    - 将多行的 JSX 标签写在 `()` 里，并确保有返回内容\n\n    ```javascript\n    // bad\n    render() {\n      return <MyComponent className=\"long body\" foo=\"bar\">\n               <MyChild />\n             </MyComponent>;\n    }\n    \n    // good\n    render() {\n      return (\n        <MyComponent className=\"long body\" foo=\"bar\">\n          <MyChild />\n        </MyComponent>\n      );\n    }\n    \n    // good,单行可以不需要\n    render() {\n      const body = <div>hello</div>;\n      return <MyComponent>{body}</MyComponent>;\n    }\n    ```\n\n\n<!--\n### 测试相关\n\n- 不推荐对鼠标右键功能进行改写\n- 页面各主要元素应设定唯一性标识\n    > 标识对照如下表\n    \n    分类     | 标识     | 来源      \n    ---|---|---\n    input  | name   |   可以使用后台表中定义页面展示元素字段名或id\n    button | id     | 根据按钮操作功能进行定义\n    a   | href  | 根据 href 属性确定 a 标签的唯一性\n    其他容器标签（带事件）|id   | 根据当前容器事件功能进行定义\n    -->\n\n\n\n","source":"_posts/React开发规范1-0.md","raw":"---\ntitle: React开发规范1.0\ndate: 2018-03-05 10:43:39\ntags: [前端,React]\ncategories: 规范\n---\n## React 代码规范\n\n### 内容目录 \n\n[Toc]\n\n---\n>1.部分遵循 [eslint 规则](https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules)， 后期可以直接引入 eslint\n>\n>2.此规范参考 tinper-bee 及 airbnb react 开发规范 \n\n### 基础规范\n- 统一使用 `utf-8` 编码\n- ==回车换行==统一使用`CRLF`\n- `Tab` 缩进为 `4` 个空格\n- 统一使用 ES6 语法进行开发 [ES6 语法参考](http://es6.ruanyifeng.com/)\n- 使用 JSX 语法，模块文件统一使用 js 后缀\n- 不要使用 `React.createClass`\n- 每一个文件只包含一个组件，每一个基本组件只包含单一功能 [组件设计原则](https://github.com/tinper-bee/react-components-docs/blob/master/%E7%BB%84%E4%BB%B6%E5%88%92%E5%88%86%E5%8E%9F%E5%88%99.md)\n\n<!--more-->\n### 命名\n- #### 文件命名\n    - 文件名使用大驼峰命名 `MyComponent`\n\n- #### 模块命名\n    - 模块使用当前模块文件夹名一样的名称\n    > 如果整个文件夹是一个模块，使用 `index.js`作为入口文件，然后直接使用当前文件夹名作为模块名称\n\n    ```\n    // bad\n    import Footer from './Footer/index';\n\n    // good\n    import Footer from './Footer';\n    ```\n\n- #### 引用命名\n    - 模块名使用大驼峰命名\n\n    ```javascriipt\n    // bad\n    import myComponent from './MyComponent';\n\n    // good\n    import MyComponent from './MyComponent';\n    ```\n    - 实例使用正常驼峰命名\n    ```\n    // bad\n    const MyComponent = <MyComponent />;\n\n    // good\n    const myComponent = <MyComponent />;\n    ```\n- #### 属性命名\n    - 避免使用 DOM 相关属性来用作其他用途\n    > 相关属性为正常 HTML 标签属性，如 `style、id、class、href` 等\n\n    ```javascriipt\n    // bad\n    <MyComponent style=\"fancy\" />\n\n    // good\n    <MyComponent variant=\"fancy\" />\n    ```\n\n### JSX 书写规范\n- #### 代码对齐\n    - 遵循以下的 JSX 语法缩进格式\n    ```\n    // bad\n    <Foo superLongParam=\"bar\"\n         anotherSuperLongParam=\"baz\" />\n    \n    // good, 有多行属性的话, 新建一行关闭标签\n    <Foo\n      superLongParam=\"bar\"\n      anotherSuperLongParam=\"baz\"\n    />\n    \n    // 若能在一行中显示, 直接写成一行\n    <Foo bar=\"bar\" />\n    \n    // 子元素按照常规方式缩进\n    <Foo\n      superLongParam=\"bar\"\n      anotherSuperLongParam=\"baz\"\n    >\n    </Foo>\n    ```\n- #### 单双引号\n    - 对于 JSX 属性值总是使用双引号（`\"`）,其他均使用单引号（`'`）\n    ```\n    // bad\n    <Foo bar='bar' />\n    \n    // good\n    <Foo bar=\"bar\" />\n    \n    // bad\n    <Foo style={{ left: \"20px\" }} />\n    \n    // good\n    <Foo style={{ left: '20px' }} />\n    ```\n- #### 空格\n    - 总是在自动关闭的标签前加一个空格，正常情况下不需要换行\n    ```\n    // bad\n    <Foo/>\n    \n    // very bad\n    <Foo                 />\n    \n    // bad\n    <Foo\n     />\n    \n    // good\n    <Foo />\n    ```\n    - 不要在 JSX `{}` 引用括号里两边加空格\n    ```\n    // bad\n    <Foo bar={ baz } />\n    \n    // good\n    <Foo bar={baz} />\n    ```\n\n- #### 标签\n    - 对于没有子元素的标签来说总是自己关闭标签\n    ```\n    // bad\n    <Foo className=\"stuff\"></Foo>\n\n    // good\n    <Foo className=\"stuff\" />\n    ```\n    - 如果模块有多行的属性，关闭标签时新建一行\n    ```\n    // bad\n    <Foo\n        bar=\"bar\"\n        baz=\"baz\" />\n\n    // good\n    <Foo\n        bar=\"bar\"\n        baz=\"baz\"\n    />\n    ```\n- #### 组件结构\n\n    - 总体规则\n\n        函数式组件形式优于 ES6 Class\n\n    - 书写规则\n\n        组件（ES6 Class）内部生命周期函数书写顺序，如下\n\n    1. 可选的`static`方法\n    \n    2. `constructor`构造函数\n    \n    3. `getChildContext`获取子元素内容\n    \n    4. `componentWillMount`模块渲染前\n    \n    5. `componentDidMount`模块渲染后\n    \n    6. `componentWillReceiveProps`模块将接受新的数据\n    \n    7. `shouldComponentUpdate`判断模块需不需要重新渲染\n    \n    8. `componentWillUpdate`上面的的方法返回 true ，模块将重新渲染\n    \n    9. `componentDidUpdate`模块渲染结束\n    \n    10. `componentWillUnmount`模块将从DOM中清除，可以做些清理任务\n    \n    11. 点击回调或者事件处理器 如 `onClickSubmit()` 或 `onChangeDescription()`\n    \n    12. `render` 里的 getter方法 如 `getSelectReason()` 或 `getFooterContent()`\n    \n    13. 可选的 render 方法 如 `renderNavigation()` 或 `renderProfilePicture()`\n    \n    14. `render` render() 方法\n    \n        - 示例代码\n        > 如何定义 propTypes, defaultProps, contextTypes, 等其他属性...\n        \n        ```javascript\n        import React from 'react';\n        import PropTypes from 'prop-types';\n        \n        // 定义 props 类型\n        const propTypes = {\n          name: React.PropTypes.string\n        };\n        \n        // 如果需要\n        const defaultProps = {\n          name: 'Guest'\n        };\n        \n        class Person extends React.Component {\n          // 构造函数\n          constructor (props) {\n            super(props);\n            // 定义 state\n            this.state = { smiling: false };\n          }\n        \n          // 生命周期方法\n          componentWillMount () {},\n          componentDidMount () {},\n          componentWillUnmount () {},\n          \n          // getters and setters\n          get attr() {}\n        \n          // handlers\n          handleClick = ()=>{},\n        \n          // render\n          renderChild() {},\n          render () {},\n        \n        }\n        \n        /**\n         * 类变量定义\n         */\n        Person.defaultProps = defaultProps;\n        \n        /**\n         * 统一都要定义 propTypes\n         * @type {Object}\n         */\n        Person.propTypes = propTypes;\n        ```\n<!--\n- #### Refs \n    - 在 Refs 里使用回调函数\n\n    ```javascript\n    // bad\n    <Foo\n      ref=\"myRef\"\n    />\n    \n    // good\n    <Foo\n      ref={(ref) => { this.myRef = ref; }}\n    />\n    ```\n-->\n### 语法规范\n- #### return (返回)\n    - 将多行的 JSX 标签写在 `()` 里，并确保有返回内容\n\n    ```javascript\n    // bad\n    render() {\n      return <MyComponent className=\"long body\" foo=\"bar\">\n               <MyChild />\n             </MyComponent>;\n    }\n    \n    // good\n    render() {\n      return (\n        <MyComponent className=\"long body\" foo=\"bar\">\n          <MyChild />\n        </MyComponent>\n      );\n    }\n    \n    // good,单行可以不需要\n    render() {\n      const body = <div>hello</div>;\n      return <MyComponent>{body}</MyComponent>;\n    }\n    ```\n\n\n<!--\n### 测试相关\n\n- 不推荐对鼠标右键功能进行改写\n- 页面各主要元素应设定唯一性标识\n    > 标识对照如下表\n    \n    分类     | 标识     | 来源      \n    ---|---|---\n    input  | name   |   可以使用后台表中定义页面展示元素字段名或id\n    button | id     | 根据按钮操作功能进行定义\n    a   | href  | 根据 href 属性确定 a 标签的唯一性\n    其他容器标签（带事件）|id   | 根据当前容器事件功能进行定义\n    -->\n\n\n\n","slug":"React开发规范1-0","published":1,"updated":"2018-11-19T02:26:47.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a00001yeh78fj8stzf","content":"<h2 id=\"React-代码规范\"><a href=\"#React-代码规范\" class=\"headerlink\" title=\"React 代码规范\"></a>React 代码规范</h2><h3 id=\"内容目录\"><a href=\"#内容目录\" class=\"headerlink\" title=\"内容目录\"></a>内容目录</h3><p>[Toc]</p>\n<hr>\n<blockquote>\n<p>1.部分遵循 <a href=\"https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules\" target=\"_blank\" rel=\"noopener\">eslint 规则</a>， 后期可以直接引入 eslint</p>\n<p>2.此规范参考 tinper-bee 及 airbnb react 开发规范 </p>\n</blockquote>\n<h3 id=\"基础规范\"><a href=\"#基础规范\" class=\"headerlink\" title=\"基础规范\"></a>基础规范</h3><ul>\n<li>统一使用 <code>utf-8</code> 编码</li>\n<li>==回车换行==统一使用<code>CRLF</code></li>\n<li><code>Tab</code> 缩进为 <code>4</code> 个空格</li>\n<li>统一使用 ES6 语法进行开发 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ES6 语法参考</a></li>\n<li>使用 JSX 语法，模块文件统一使用 js 后缀</li>\n<li>不要使用 <code>React.createClass</code></li>\n<li>每一个文件只包含一个组件，每一个基本组件只包含单一功能 <a href=\"https://github.com/tinper-bee/react-components-docs/blob/master/%E7%BB%84%E4%BB%B6%E5%88%92%E5%88%86%E5%8E%9F%E5%88%99.md\" target=\"_blank\" rel=\"noopener\">组件设计原则</a></li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><ul>\n<li><h4 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h4><ul>\n<li>文件名使用大驼峰命名 <code>MyComponent</code></li>\n</ul>\n</li>\n<li><h4 id=\"模块命名\"><a href=\"#模块命名\" class=\"headerlink\" title=\"模块命名\"></a>模块命名</h4><ul>\n<li><p>模块使用当前模块文件夹名一样的名称</p>\n<blockquote>\n<p>如果整个文件夹是一个模块，使用 <code>index.js</code>作为入口文件，然后直接使用当前文件夹名作为模块名称</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import Footer from &apos;./Footer/index&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import Footer from &apos;./Footer&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"引用命名\"><a href=\"#引用命名\" class=\"headerlink\" title=\"引用命名\"></a>引用命名</h4><ul>\n<li><p>模块名使用大驼峰命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import myComponent from &apos;./MyComponent&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import MyComponent from &apos;./MyComponent&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例使用正常驼峰命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">const MyComponent = &lt;MyComponent /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">const myComponent = &lt;MyComponent /&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"属性命名\"><a href=\"#属性命名\" class=\"headerlink\" title=\"属性命名\"></a>属性命名</h4><ul>\n<li><p>避免使用 DOM 相关属性来用作其他用途</p>\n<blockquote>\n<p>相关属性为正常 HTML 标签属性，如 <code>style、id、class、href</code> 等</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;MyComponent style=&quot;fancy&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;MyComponent variant=&quot;fancy&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JSX-书写规范\"><a href=\"#JSX-书写规范\" class=\"headerlink\" title=\"JSX 书写规范\"></a>JSX 书写规范</h3><ul>\n<li><h4 id=\"代码对齐\"><a href=\"#代码对齐\" class=\"headerlink\" title=\"代码对齐\"></a>代码对齐</h4><ul>\n<li>遵循以下的 JSX 语法缩进格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo superLongParam=&quot;bar&quot;</span><br><span class=\"line\">     anotherSuperLongParam=&quot;baz&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good, 有多行属性的话, 新建一行关闭标签</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  superLongParam=&quot;bar&quot;</span><br><span class=\"line\">  anotherSuperLongParam=&quot;baz&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 若能在一行中显示, 直接写成一行</span><br><span class=\"line\">&lt;Foo bar=&quot;bar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 子元素按照常规方式缩进</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  superLongParam=&quot;bar&quot;</span><br><span class=\"line\">  anotherSuperLongParam=&quot;baz&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;/Foo&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"单双引号\"><a href=\"#单双引号\" class=\"headerlink\" title=\"单双引号\"></a>单双引号</h4><ul>\n<li>对于 JSX 属性值总是使用双引号（<code>&quot;</code>）,其他均使用单引号（<code>&#39;</code>）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo bar=&apos;bar&apos; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo bar=&quot;bar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo style=&#123;&#123; left: &quot;20px&quot; &#125;&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo style=&#123;&#123; left: &apos;20px&apos; &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h4><ul>\n<li><p>总是在自动关闭的标签前加一个空格，正常情况下不需要换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// very bad</span><br><span class=\"line\">&lt;Foo                 /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\"> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在 JSX <code>{}</code> 引用括号里两边加空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo bar=&#123; baz &#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo bar=&#123;baz&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><ul>\n<li><p>对于没有子元素的标签来说总是自己关闭标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo className=&quot;stuff&quot;&gt;&lt;/Foo&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo className=&quot;stuff&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果模块有多行的属性，关闭标签时新建一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    bar=&quot;bar&quot;</span><br><span class=\"line\">    baz=&quot;baz&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    bar=&quot;bar&quot;</span><br><span class=\"line\">    baz=&quot;baz&quot;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h4><ul>\n<li><p>总体规则</p>\n<p>  函数式组件形式优于 ES6 Class</p>\n</li>\n<li><p>书写规则</p>\n<p>  组件（ES6 Class）内部生命周期函数书写顺序，如下</p>\n</li>\n</ul>\n<ol>\n<li><p>可选的<code>static</code>方法</p>\n</li>\n<li><p><code>constructor</code>构造函数</p>\n</li>\n<li><p><code>getChildContext</code>获取子元素内容</p>\n</li>\n<li><p><code>componentWillMount</code>模块渲染前</p>\n</li>\n<li><p><code>componentDidMount</code>模块渲染后</p>\n</li>\n<li><p><code>componentWillReceiveProps</code>模块将接受新的数据</p>\n</li>\n<li><p><code>shouldComponentUpdate</code>判断模块需不需要重新渲染</p>\n</li>\n<li><p><code>componentWillUpdate</code>上面的的方法返回 true ，模块将重新渲染</p>\n</li>\n<li><p><code>componentDidUpdate</code>模块渲染结束</p>\n</li>\n<li><p><code>componentWillUnmount</code>模块将从DOM中清除，可以做些清理任务</p>\n</li>\n<li><p>点击回调或者事件处理器 如 <code>onClickSubmit()</code> 或 <code>onChangeDescription()</code></p>\n</li>\n<li><p><code>render</code> 里的 getter方法 如 <code>getSelectReason()</code> 或 <code>getFooterContent()</code></p>\n</li>\n<li><p>可选的 render 方法 如 <code>renderNavigation()</code> 或 <code>renderProfilePicture()</code></p>\n</li>\n<li><p><code>render</code> render() 方法</p>\n<ul>\n<li>示例代码<blockquote>\n<p>如何定义 propTypes, defaultProps, contextTypes, 等其他属性…</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 props 类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> propTypes = &#123;</span><br><span class=\"line\">  name: React.PropTypes.string</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果需要</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultProps = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Guest'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"comment\">// 定义 state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">smiling</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 生命周期方法</span></span><br><span class=\"line\">  componentWillMount () &#123;&#125;,</span><br><span class=\"line\">  componentDidMount () &#123;&#125;,</span><br><span class=\"line\">  componentWillUnmount () &#123;&#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// getters and setters</span></span><br><span class=\"line\">  get attr() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// handlers</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render</span></span><br><span class=\"line\">  renderChild() &#123;&#125;,</span><br><span class=\"line\">  render () &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类变量定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Person.defaultProps = defaultProps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 统一都要定义 propTypes</span></span><br><span class=\"line\"><span class=\"comment\"> * @type &#123;Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Person.propTypes = propTypes;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<!--\n- #### Refs \n    - 在 Refs 里使用回调函数\n\n    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  ref=<span class=\"string\">\"myRef\"</span></span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  ref=&#123;(ref) =&gt; &#123; <span class=\"keyword\">this</span>.myRef = ref; &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>–&gt;</p>\n<h3 id=\"语法规范\"><a href=\"#语法规范\" class=\"headerlink\" title=\"语法规范\"></a>语法规范</h3><ul>\n<li><h4 id=\"return-返回\"><a href=\"#return-返回\" class=\"headerlink\" title=\"return (返回)\"></a>return (返回)</h4><ul>\n<li><p>将多行的 JSX 标签写在 <code>()</code> 里，并确保有返回内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;MyComponent className=\"long body\" foo=\"bar\"&gt;</span><br><span class=\"line\">           &lt;MyChild /&gt;</span><br><span class=\"line\">         &lt;/MyComponent&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyComponent className=<span class=\"string\">\"long body\"</span> foo=<span class=\"string\">\"bar\"</span>&gt;</span><br><span class=\"line\">      &lt;MyChild /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MyComponent&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ good,单行可以不需要</span></span><br><span class=\"line\"><span class=\"regexp\">render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const body = &lt;div&gt;hello&lt;/</span>div&gt;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;MyComponent&gt;&#123;body&#125;&lt;/MyComponent&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<!--\n### 测试相关\n\n- 不推荐对鼠标右键功能进行改写\n- 页面各主要元素应设定唯一性标识\n    > 标识对照如下表\n\n    分类     | 标识     | 来源      \n    ---|---|---\n    input  | name   |   可以使用后台表中定义页面展示元素字段名或id\n    button | id     | 根据按钮操作功能进行定义\n    a   | href  | 根据 href 属性确定 a 标签的唯一性\n    其他容器标签（带事件）|id   | 根据当前容器事件功能进行定义\n    -->\n","site":{"data":{}},"excerpt":"<h2 id=\"React-代码规范\"><a href=\"#React-代码规范\" class=\"headerlink\" title=\"React 代码规范\"></a>React 代码规范</h2><h3 id=\"内容目录\"><a href=\"#内容目录\" class=\"headerlink\" title=\"内容目录\"></a>内容目录</h3><p>[Toc]</p>\n<hr>\n<blockquote>\n<p>1.部分遵循 <a href=\"https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules\" target=\"_blank\" rel=\"noopener\">eslint 规则</a>， 后期可以直接引入 eslint</p>\n<p>2.此规范参考 tinper-bee 及 airbnb react 开发规范 </p>\n</blockquote>\n<h3 id=\"基础规范\"><a href=\"#基础规范\" class=\"headerlink\" title=\"基础规范\"></a>基础规范</h3><ul>\n<li>统一使用 <code>utf-8</code> 编码</li>\n<li>==回车换行==统一使用<code>CRLF</code></li>\n<li><code>Tab</code> 缩进为 <code>4</code> 个空格</li>\n<li>统一使用 ES6 语法进行开发 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ES6 语法参考</a></li>\n<li>使用 JSX 语法，模块文件统一使用 js 后缀</li>\n<li>不要使用 <code>React.createClass</code></li>\n<li>每一个文件只包含一个组件，每一个基本组件只包含单一功能 <a href=\"https://github.com/tinper-bee/react-components-docs/blob/master/%E7%BB%84%E4%BB%B6%E5%88%92%E5%88%86%E5%8E%9F%E5%88%99.md\" target=\"_blank\" rel=\"noopener\">组件设计原则</a></li>\n</ul>","more":"<h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><ul>\n<li><h4 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h4><ul>\n<li>文件名使用大驼峰命名 <code>MyComponent</code></li>\n</ul>\n</li>\n<li><h4 id=\"模块命名\"><a href=\"#模块命名\" class=\"headerlink\" title=\"模块命名\"></a>模块命名</h4><ul>\n<li><p>模块使用当前模块文件夹名一样的名称</p>\n<blockquote>\n<p>如果整个文件夹是一个模块，使用 <code>index.js</code>作为入口文件，然后直接使用当前文件夹名作为模块名称</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import Footer from &apos;./Footer/index&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import Footer from &apos;./Footer&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"引用命名\"><a href=\"#引用命名\" class=\"headerlink\" title=\"引用命名\"></a>引用命名</h4><ul>\n<li><p>模块名使用大驼峰命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import myComponent from &apos;./MyComponent&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import MyComponent from &apos;./MyComponent&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例使用正常驼峰命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">const MyComponent = &lt;MyComponent /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">const myComponent = &lt;MyComponent /&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"属性命名\"><a href=\"#属性命名\" class=\"headerlink\" title=\"属性命名\"></a>属性命名</h4><ul>\n<li><p>避免使用 DOM 相关属性来用作其他用途</p>\n<blockquote>\n<p>相关属性为正常 HTML 标签属性，如 <code>style、id、class、href</code> 等</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;MyComponent style=&quot;fancy&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;MyComponent variant=&quot;fancy&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JSX-书写规范\"><a href=\"#JSX-书写规范\" class=\"headerlink\" title=\"JSX 书写规范\"></a>JSX 书写规范</h3><ul>\n<li><h4 id=\"代码对齐\"><a href=\"#代码对齐\" class=\"headerlink\" title=\"代码对齐\"></a>代码对齐</h4><ul>\n<li>遵循以下的 JSX 语法缩进格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo superLongParam=&quot;bar&quot;</span><br><span class=\"line\">     anotherSuperLongParam=&quot;baz&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good, 有多行属性的话, 新建一行关闭标签</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  superLongParam=&quot;bar&quot;</span><br><span class=\"line\">  anotherSuperLongParam=&quot;baz&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 若能在一行中显示, 直接写成一行</span><br><span class=\"line\">&lt;Foo bar=&quot;bar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 子元素按照常规方式缩进</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  superLongParam=&quot;bar&quot;</span><br><span class=\"line\">  anotherSuperLongParam=&quot;baz&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;/Foo&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"单双引号\"><a href=\"#单双引号\" class=\"headerlink\" title=\"单双引号\"></a>单双引号</h4><ul>\n<li>对于 JSX 属性值总是使用双引号（<code>&quot;</code>）,其他均使用单引号（<code>&#39;</code>）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo bar=&apos;bar&apos; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo bar=&quot;bar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo style=&#123;&#123; left: &quot;20px&quot; &#125;&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo style=&#123;&#123; left: &apos;20px&apos; &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h4><ul>\n<li><p>总是在自动关闭的标签前加一个空格，正常情况下不需要换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// very bad</span><br><span class=\"line\">&lt;Foo                 /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\"> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在 JSX <code>{}</code> 引用括号里两边加空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo bar=&#123; baz &#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo bar=&#123;baz&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><ul>\n<li><p>对于没有子元素的标签来说总是自己关闭标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo className=&quot;stuff&quot;&gt;&lt;/Foo&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo className=&quot;stuff&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果模块有多行的属性，关闭标签时新建一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    bar=&quot;bar&quot;</span><br><span class=\"line\">    baz=&quot;baz&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    bar=&quot;bar&quot;</span><br><span class=\"line\">    baz=&quot;baz&quot;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h4 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h4><ul>\n<li><p>总体规则</p>\n<p>  函数式组件形式优于 ES6 Class</p>\n</li>\n<li><p>书写规则</p>\n<p>  组件（ES6 Class）内部生命周期函数书写顺序，如下</p>\n</li>\n</ul>\n<ol>\n<li><p>可选的<code>static</code>方法</p>\n</li>\n<li><p><code>constructor</code>构造函数</p>\n</li>\n<li><p><code>getChildContext</code>获取子元素内容</p>\n</li>\n<li><p><code>componentWillMount</code>模块渲染前</p>\n</li>\n<li><p><code>componentDidMount</code>模块渲染后</p>\n</li>\n<li><p><code>componentWillReceiveProps</code>模块将接受新的数据</p>\n</li>\n<li><p><code>shouldComponentUpdate</code>判断模块需不需要重新渲染</p>\n</li>\n<li><p><code>componentWillUpdate</code>上面的的方法返回 true ，模块将重新渲染</p>\n</li>\n<li><p><code>componentDidUpdate</code>模块渲染结束</p>\n</li>\n<li><p><code>componentWillUnmount</code>模块将从DOM中清除，可以做些清理任务</p>\n</li>\n<li><p>点击回调或者事件处理器 如 <code>onClickSubmit()</code> 或 <code>onChangeDescription()</code></p>\n</li>\n<li><p><code>render</code> 里的 getter方法 如 <code>getSelectReason()</code> 或 <code>getFooterContent()</code></p>\n</li>\n<li><p>可选的 render 方法 如 <code>renderNavigation()</code> 或 <code>renderProfilePicture()</code></p>\n</li>\n<li><p><code>render</code> render() 方法</p>\n<ul>\n<li>示例代码<blockquote>\n<p>如何定义 propTypes, defaultProps, contextTypes, 等其他属性…</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PropTypes <span class=\"keyword\">from</span> <span class=\"string\">'prop-types'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 props 类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> propTypes = &#123;</span><br><span class=\"line\">  name: React.PropTypes.string</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果需要</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultProps = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Guest'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"comment\">// 定义 state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">smiling</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 生命周期方法</span></span><br><span class=\"line\">  componentWillMount () &#123;&#125;,</span><br><span class=\"line\">  componentDidMount () &#123;&#125;,</span><br><span class=\"line\">  componentWillUnmount () &#123;&#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// getters and setters</span></span><br><span class=\"line\">  get attr() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// handlers</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render</span></span><br><span class=\"line\">  renderChild() &#123;&#125;,</span><br><span class=\"line\">  render () &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类变量定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Person.defaultProps = defaultProps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 统一都要定义 propTypes</span></span><br><span class=\"line\"><span class=\"comment\"> * @type &#123;Object&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Person.propTypes = propTypes;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<!--\n- #### Refs \n    - 在 Refs 里使用回调函数\n\n    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  ref=<span class=\"string\">\"myRef\"</span></span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">  ref=&#123;(ref) =&gt; &#123; <span class=\"keyword\">this</span>.myRef = ref; &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>–&gt;</p>\n<h3 id=\"语法规范\"><a href=\"#语法规范\" class=\"headerlink\" title=\"语法规范\"></a>语法规范</h3><ul>\n<li><h4 id=\"return-返回\"><a href=\"#return-返回\" class=\"headerlink\" title=\"return (返回)\"></a>return (返回)</h4><ul>\n<li><p>将多行的 JSX 标签写在 <code>()</code> 里，并确保有返回内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;MyComponent className=\"long body\" foo=\"bar\"&gt;</span><br><span class=\"line\">           &lt;MyChild /&gt;</span><br><span class=\"line\">         &lt;/MyComponent&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyComponent className=<span class=\"string\">\"long body\"</span> foo=<span class=\"string\">\"bar\"</span>&gt;</span><br><span class=\"line\">      &lt;MyChild /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MyComponent&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ good,单行可以不需要</span></span><br><span class=\"line\"><span class=\"regexp\">render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const body = &lt;div&gt;hello&lt;/</span>div&gt;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;MyComponent&gt;&#123;body&#125;&lt;/MyComponent&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<!--\n### 测试相关\n\n- 不推荐对鼠标右键功能进行改写\n- 页面各主要元素应设定唯一性标识\n    > 标识对照如下表\n\n    分类     | 标识     | 来源      \n    ---|---|---\n    input  | name   |   可以使用后台表中定义页面展示元素字段名或id\n    button | id     | 根据按钮操作功能进行定义\n    a   | href  | 根据 href 属性确定 a 标签的唯一性\n    其他容器标签（带事件）|id   | 根据当前容器事件功能进行定义\n    -->"},{"title":"es6语法","date":"2017-06-25T01:13:11.000Z","_content":"\n## Set\n- Set是一个不重复的数组\n- 通过 new Set() 来进行构造，或者通过 new Set(array)\n- 可以用来去除数组的重复\n- 通过 Array.from(new Set(Arr)) 转换成去重后的数组，Arr为一个数组\n\n## Class\n- 定义类 \n","source":"_posts/es6语法.md","raw":"---\ntitle: es6语法\ndate: 2017-06-25 09:13:11\ntags: [前端,基础]\ncategories: es6\n---\n\n## Set\n- Set是一个不重复的数组\n- 通过 new Set() 来进行构造，或者通过 new Set(array)\n- 可以用来去除数组的重复\n- 通过 Array.from(new Set(Arr)) 转换成去重后的数组，Arr为一个数组\n\n## Class\n- 定义类 \n","slug":"es6语法","published":1,"updated":"2018-11-19T02:26:47.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a30004yeh7h4mo2gw7","content":"<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><ul>\n<li>Set是一个不重复的数组</li>\n<li>通过 new Set() 来进行构造，或者通过 new Set(array)</li>\n<li>可以用来去除数组的重复</li>\n<li>通过 Array.from(new Set(Arr)) 转换成去重后的数组，Arr为一个数组</li>\n</ul>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><ul>\n<li>定义类 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><ul>\n<li>Set是一个不重复的数组</li>\n<li>通过 new Set() 来进行构造，或者通过 new Set(array)</li>\n<li>可以用来去除数组的重复</li>\n<li>通过 Array.from(new Set(Arr)) 转换成去重后的数组，Arr为一个数组</li>\n</ul>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><ul>\n<li>定义类 </li>\n</ul>\n"},{"title":"express框架使用","date":"2017-05-13T01:47:23.000Z","_content":"## express 是后台框架\n帮我们解决手动搭建服务，处理逻辑的复杂\n```\nnpm init -y\nnpm install express --save\n```\n\n## 使用postman模拟数据发送\n<a href=\"https://www.getpostman.com/\">https://www.getpostman.com/</a>\n> 测试接口是否可用\n\n## 路由\n根据请求的方法和请求的路径返回不同的内容\n```\napp.方法('路径',callback)\napp.all('*',callback)\n```\n> 匹配路由从上到下匹配，匹配成功后不继续向下执行\n\n## express提供的属性\n```\nreq.path\nreq.query\nreq.method\nreq.headers\n```\n\n## 路径参数params\n- :id表示站位必须要有\n```\napp.get('/user/:id',callback)\n```\n<!--more-->\n\n## 中间件\n中间件一般在路由上面写，错误中间件一般写在底部\n- 扩展属性和方法，请求时中间件的res和req与路由中的是同一个\n- 做权限处理，next可以决定是否向下执行\n- 中间件可以写多个，和路由在同一个数组中\n```\napp.use('/',function(req,res,next){})\nnext();//表示是否向下执行\n```\n> 默认不写路径任何请求都能执行\n\n##　send方法\n- 不用设置类型\n- 可以传递对象，数字会转化成状态文本\n\n> 用send取代end\n\n## sendFile\n- 向客户端返回但以页面\n```\nres.sendFile(path.resolve('./index.html'))\nres.sendFile('./index.html',{root:__dirname});\n```\n\n## 静态服务中间件\n```\napp.use(express.static(路径));\n```\n## 常见的前台模板\n- ejs\n- jade\n- underscore\n- handlebar\n- smarty\n\n## 动态渲染js\n- ejs(基于HTML，可以渲染动态数据)\n- 如果安装了ejs，如果使用render，express会自动调用ejs\n```\napp.set('views','新的路径文件夹)\napp.set('view engine','html');// render 时不需要提供html后缀\napp.engine('html',require('ejs').__express);\nres.render('文件名'，渲染的对象 = 自定义对象 + res.locals);\n```\n##　ejs渲染数据\n\n```\n<%=%> 输出结果\n<%for(var i = 0;i<arr.length;i++){%>\n  <li><%=i%></li>\n<%}%>\n<%-%> 输出HTML\n<%include ejs文件%> 插入ejs文件\n```\n","source":"_posts/express框架使用.md","raw":"---\ntitle: express框架使用\ndate: 2017-05-13 09:47:23\ntags: [node,node基础]\ncategories: node\n---\n## express 是后台框架\n帮我们解决手动搭建服务，处理逻辑的复杂\n```\nnpm init -y\nnpm install express --save\n```\n\n## 使用postman模拟数据发送\n<a href=\"https://www.getpostman.com/\">https://www.getpostman.com/</a>\n> 测试接口是否可用\n\n## 路由\n根据请求的方法和请求的路径返回不同的内容\n```\napp.方法('路径',callback)\napp.all('*',callback)\n```\n> 匹配路由从上到下匹配，匹配成功后不继续向下执行\n\n## express提供的属性\n```\nreq.path\nreq.query\nreq.method\nreq.headers\n```\n\n## 路径参数params\n- :id表示站位必须要有\n```\napp.get('/user/:id',callback)\n```\n<!--more-->\n\n## 中间件\n中间件一般在路由上面写，错误中间件一般写在底部\n- 扩展属性和方法，请求时中间件的res和req与路由中的是同一个\n- 做权限处理，next可以决定是否向下执行\n- 中间件可以写多个，和路由在同一个数组中\n```\napp.use('/',function(req,res,next){})\nnext();//表示是否向下执行\n```\n> 默认不写路径任何请求都能执行\n\n##　send方法\n- 不用设置类型\n- 可以传递对象，数字会转化成状态文本\n\n> 用send取代end\n\n## sendFile\n- 向客户端返回但以页面\n```\nres.sendFile(path.resolve('./index.html'))\nres.sendFile('./index.html',{root:__dirname});\n```\n\n## 静态服务中间件\n```\napp.use(express.static(路径));\n```\n## 常见的前台模板\n- ejs\n- jade\n- underscore\n- handlebar\n- smarty\n\n## 动态渲染js\n- ejs(基于HTML，可以渲染动态数据)\n- 如果安装了ejs，如果使用render，express会自动调用ejs\n```\napp.set('views','新的路径文件夹)\napp.set('view engine','html');// render 时不需要提供html后缀\napp.engine('html',require('ejs').__express);\nres.render('文件名'，渲染的对象 = 自定义对象 + res.locals);\n```\n##　ejs渲染数据\n\n```\n<%=%> 输出结果\n<%for(var i = 0;i<arr.length;i++){%>\n  <li><%=i%></li>\n<%}%>\n<%-%> 输出HTML\n<%include ejs文件%> 插入ejs文件\n```\n","slug":"express框架使用","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a30005yeh7aalv71pa","content":"<h2 id=\"express-是后台框架\"><a href=\"#express-是后台框架\" class=\"headerlink\" title=\"express 是后台框架\"></a>express 是后台框架</h2><p>帮我们解决手动搭建服务，处理逻辑的复杂<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install express --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用postman模拟数据发送\"><a href=\"#使用postman模拟数据发送\" class=\"headerlink\" title=\"使用postman模拟数据发送\"></a>使用postman模拟数据发送</h2><p><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">https://www.getpostman.com/</a></p>\n<blockquote>\n<p>测试接口是否可用</p>\n</blockquote>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>根据请求的方法和请求的路径返回不同的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.方法(&apos;路径&apos;,callback)</span><br><span class=\"line\">app.all(&apos;*&apos;,callback)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>匹配路由从上到下匹配，匹配成功后不继续向下执行</p>\n</blockquote>\n<h2 id=\"express提供的属性\"><a href=\"#express提供的属性\" class=\"headerlink\" title=\"express提供的属性\"></a>express提供的属性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.path</span><br><span class=\"line\">req.query</span><br><span class=\"line\">req.method</span><br><span class=\"line\">req.headers</span><br></pre></td></tr></table></figure>\n<h2 id=\"路径参数params\"><a href=\"#路径参数params\" class=\"headerlink\" title=\"路径参数params\"></a>路径参数params</h2><ul>\n<li>:id表示站位必须要有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/user/:id&apos;,callback)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><p>中间件一般在路由上面写，错误中间件一般写在底部</p>\n<ul>\n<li>扩展属性和方法，请求时中间件的res和req与路由中的是同一个</li>\n<li>做权限处理，next可以决定是否向下执行</li>\n<li>中间件可以写多个，和路由在同一个数组中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(&apos;/&apos;,function(req,res,next)&#123;&#125;)</span><br><span class=\"line\">next();//表示是否向下执行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>默认不写路径任何请求都能执行</p>\n</blockquote>\n<p>##　send方法</p>\n<ul>\n<li>不用设置类型</li>\n<li>可以传递对象，数字会转化成状态文本</li>\n</ul>\n<blockquote>\n<p>用send取代end</p>\n</blockquote>\n<h2 id=\"sendFile\"><a href=\"#sendFile\" class=\"headerlink\" title=\"sendFile\"></a>sendFile</h2><ul>\n<li>向客户端返回但以页面<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.sendFile(path.resolve(&apos;./index.html&apos;))</span><br><span class=\"line\">res.sendFile(&apos;./index.html&apos;,&#123;root:__dirname&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"静态服务中间件\"><a href=\"#静态服务中间件\" class=\"headerlink\" title=\"静态服务中间件\"></a>静态服务中间件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(路径));</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的前台模板\"><a href=\"#常见的前台模板\" class=\"headerlink\" title=\"常见的前台模板\"></a>常见的前台模板</h2><ul>\n<li>ejs</li>\n<li>jade</li>\n<li>underscore</li>\n<li>handlebar</li>\n<li>smarty</li>\n</ul>\n<h2 id=\"动态渲染js\"><a href=\"#动态渲染js\" class=\"headerlink\" title=\"动态渲染js\"></a>动态渲染js</h2><ul>\n<li>ejs(基于HTML，可以渲染动态数据)</li>\n<li>如果安装了ejs，如果使用render，express会自动调用ejs<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(&apos;views&apos;,&apos;新的路径文件夹)</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);// render 时不需要提供html后缀</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">res.render(&apos;文件名&apos;，渲染的对象 = 自定义对象 + res.locals);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>##　ejs渲染数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%=%&gt; 输出结果</span><br><span class=\"line\">&lt;%for(var i = 0;i&lt;arr.length;i++)&#123;%&gt;</span><br><span class=\"line\">  &lt;li&gt;&lt;%=i%&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br><span class=\"line\">&lt;%-%&gt; 输出HTML</span><br><span class=\"line\">&lt;%include ejs文件%&gt; 插入ejs文件</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"express-是后台框架\"><a href=\"#express-是后台框架\" class=\"headerlink\" title=\"express 是后台框架\"></a>express 是后台框架</h2><p>帮我们解决手动搭建服务，处理逻辑的复杂<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install express --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用postman模拟数据发送\"><a href=\"#使用postman模拟数据发送\" class=\"headerlink\" title=\"使用postman模拟数据发送\"></a>使用postman模拟数据发送</h2><p><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">https://www.getpostman.com/</a></p>\n<blockquote>\n<p>测试接口是否可用</p>\n</blockquote>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>根据请求的方法和请求的路径返回不同的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.方法(&apos;路径&apos;,callback)</span><br><span class=\"line\">app.all(&apos;*&apos;,callback)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>匹配路由从上到下匹配，匹配成功后不继续向下执行</p>\n</blockquote>\n<h2 id=\"express提供的属性\"><a href=\"#express提供的属性\" class=\"headerlink\" title=\"express提供的属性\"></a>express提供的属性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.path</span><br><span class=\"line\">req.query</span><br><span class=\"line\">req.method</span><br><span class=\"line\">req.headers</span><br></pre></td></tr></table></figure>\n<h2 id=\"路径参数params\"><a href=\"#路径参数params\" class=\"headerlink\" title=\"路径参数params\"></a>路径参数params</h2><ul>\n<li>:id表示站位必须要有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/user/:id&apos;,callback)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><p>中间件一般在路由上面写，错误中间件一般写在底部</p>\n<ul>\n<li>扩展属性和方法，请求时中间件的res和req与路由中的是同一个</li>\n<li>做权限处理，next可以决定是否向下执行</li>\n<li>中间件可以写多个，和路由在同一个数组中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(&apos;/&apos;,function(req,res,next)&#123;&#125;)</span><br><span class=\"line\">next();//表示是否向下执行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>默认不写路径任何请求都能执行</p>\n</blockquote>\n<p>##　send方法</p>\n<ul>\n<li>不用设置类型</li>\n<li>可以传递对象，数字会转化成状态文本</li>\n</ul>\n<blockquote>\n<p>用send取代end</p>\n</blockquote>\n<h2 id=\"sendFile\"><a href=\"#sendFile\" class=\"headerlink\" title=\"sendFile\"></a>sendFile</h2><ul>\n<li>向客户端返回但以页面<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.sendFile(path.resolve(&apos;./index.html&apos;))</span><br><span class=\"line\">res.sendFile(&apos;./index.html&apos;,&#123;root:__dirname&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"静态服务中间件\"><a href=\"#静态服务中间件\" class=\"headerlink\" title=\"静态服务中间件\"></a>静态服务中间件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(路径));</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的前台模板\"><a href=\"#常见的前台模板\" class=\"headerlink\" title=\"常见的前台模板\"></a>常见的前台模板</h2><ul>\n<li>ejs</li>\n<li>jade</li>\n<li>underscore</li>\n<li>handlebar</li>\n<li>smarty</li>\n</ul>\n<h2 id=\"动态渲染js\"><a href=\"#动态渲染js\" class=\"headerlink\" title=\"动态渲染js\"></a>动态渲染js</h2><ul>\n<li>ejs(基于HTML，可以渲染动态数据)</li>\n<li>如果安装了ejs，如果使用render，express会自动调用ejs<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(&apos;views&apos;,&apos;新的路径文件夹)</span><br><span class=\"line\">app.set(&apos;view engine&apos;,&apos;html&apos;);// render 时不需要提供html后缀</span><br><span class=\"line\">app.engine(&apos;html&apos;,require(&apos;ejs&apos;).__express);</span><br><span class=\"line\">res.render(&apos;文件名&apos;，渲染的对象 = 自定义对象 + res.locals);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>##　ejs渲染数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%=%&gt; 输出结果</span><br><span class=\"line\">&lt;%for(var i = 0;i&lt;arr.length;i++)&#123;%&gt;</span><br><span class=\"line\">  &lt;li&gt;&lt;%=i%&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br><span class=\"line\">&lt;%-%&gt; 输出HTML</span><br><span class=\"line\">&lt;%include ejs文件%&gt; 插入ejs文件</span><br></pre></td></tr></table></figure>"},{"title":"express中cookie/session","date":"2017-05-14T09:43:09.000Z","_content":"## body-parser\n解析请求体的会将请求的数据挂载在req.body上\n```\nnpm install body-parser --save\nlet bodyParser = require('body-parser');\napp.use(bodyParser.json());//解析json\napp.use(bodyParser.urlencoded({extended:false}));//解析formData的格式\n```\n\n## querystring的核心模块\n```\nlet querystring = require('querystring');\nquerystring.parse('name=1&age=2','&','=');\nquerystring.stringify({name:1,age:2},'&&','=');\n```\n\n## cookie\n```\nnpm install cookie-parser --save\nlet cookieParser = require('cookie-parser');\napp.use(cookieParser());\nreq.cookies //可以直接获取cookie转换后的对象\nreq.cookie(key,value,{domain,path,expires,maxAge,httpOnly});\n```\n<!--more-->\n## session\n```\nnpm install express-session --save\nlet session = require('express-session');\n\n```\n","source":"_posts/express中cookie-session.md","raw":"---\ntitle: express中cookie/session\ndate: 2017-05-14 17:43:09\ntags: [node,node基础]\ncategories: node\n---\n## body-parser\n解析请求体的会将请求的数据挂载在req.body上\n```\nnpm install body-parser --save\nlet bodyParser = require('body-parser');\napp.use(bodyParser.json());//解析json\napp.use(bodyParser.urlencoded({extended:false}));//解析formData的格式\n```\n\n## querystring的核心模块\n```\nlet querystring = require('querystring');\nquerystring.parse('name=1&age=2','&','=');\nquerystring.stringify({name:1,age:2},'&&','=');\n```\n\n## cookie\n```\nnpm install cookie-parser --save\nlet cookieParser = require('cookie-parser');\napp.use(cookieParser());\nreq.cookies //可以直接获取cookie转换后的对象\nreq.cookie(key,value,{domain,path,expires,maxAge,httpOnly});\n```\n<!--more-->\n## session\n```\nnpm install express-session --save\nlet session = require('express-session');\n\n```\n","slug":"express中cookie-session","published":1,"updated":"2018-11-19T02:26:47.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a40006yeh74c2okjlp","content":"<h2 id=\"body-parser\"><a href=\"#body-parser\" class=\"headerlink\" title=\"body-parser\"></a>body-parser</h2><p>解析请求体的会将请求的数据挂载在req.body上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install body-parser --save</span><br><span class=\"line\">let bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">app.use(bodyParser.json());//解析json</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended:false&#125;));//解析formData的格式</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"querystring的核心模块\"><a href=\"#querystring的核心模块\" class=\"headerlink\" title=\"querystring的核心模块\"></a>querystring的核心模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">querystring.parse(&apos;name=1&amp;age=2&apos;,&apos;&amp;&apos;,&apos;=&apos;);</span><br><span class=\"line\">querystring.stringify(&#123;name:1,age:2&#125;,&apos;&amp;&amp;&apos;,&apos;=&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cookie-parser --save</span><br><span class=\"line\">let cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">req.cookies //可以直接获取cookie转换后的对象</span><br><span class=\"line\">req.cookie(key,value,&#123;domain,path,expires,maxAge,httpOnly&#125;);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express-session --save</span><br><span class=\"line\">let session = require(&apos;express-session&apos;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"body-parser\"><a href=\"#body-parser\" class=\"headerlink\" title=\"body-parser\"></a>body-parser</h2><p>解析请求体的会将请求的数据挂载在req.body上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install body-parser --save</span><br><span class=\"line\">let bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">app.use(bodyParser.json());//解析json</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended:false&#125;));//解析formData的格式</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"querystring的核心模块\"><a href=\"#querystring的核心模块\" class=\"headerlink\" title=\"querystring的核心模块\"></a>querystring的核心模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\">querystring.parse(&apos;name=1&amp;age=2&apos;,&apos;&amp;&apos;,&apos;=&apos;);</span><br><span class=\"line\">querystring.stringify(&#123;name:1,age:2&#125;,&apos;&amp;&amp;&apos;,&apos;=&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cookie-parser --save</span><br><span class=\"line\">let cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">req.cookies //可以直接获取cookie转换后的对象</span><br><span class=\"line\">req.cookie(key,value,&#123;domain,path,expires,maxAge,httpOnly&#125;);</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express-session --save</span><br><span class=\"line\">let session = require(&apos;express-session&apos;);</span><br></pre></td></tr></table></figure>"},{"title":"git","date":"2017-04-29T02:04:24.000Z","_content":"## pwd\n  print working directory 打印当前工作目录\n\n## 告诉git当前用户\n\n- 用git第一次需要配置 以后都不需要\n\n```\ngit config --global user.name <your name>\ngit config --global user.email <your email>\ngit config list 查看配置列表\n\n```\n<!--more-->\n## 初始化文件夹（告诉git那个文件夹归git所管理）\n\n```\ngit init\n```\n## 打开文件夹\n```\ncd\n```\n\n## 删除文件夹  循环删除（递归删除）\n```\nrm -rf <文件夹名>\n```\n## 删除文件\n```\nrm <文件名>\n```\n\n## macOS中查看隐藏文件夹\n```\nls -a\n```\n## 新建文件\n```\ntouch <文件名>\n```\n## 查看文件名\n```\ncat <文件名>\n```\n## 编辑文件 进入vi编辑模式\n```\nvi <文件名>\n```\n## 在vi模式下\n- 按 `i` 键 进入编辑模式\n- 编辑文件\n- 按  `esc` 键，退出编辑模式\n- `:wq` 保存并退出\n- `:q!` 强制退出，不保存\n\n## 工作区进行提交到暂存区\n- 提交全部\n```\ngit add .\n或者\ngit add -A\n```\n\n- 提交单个文件\n```\ngit add <文件名>\n```\n\n## 暂存区提交到版本库\n```\ngit commit -m \"更新内容描述\"\n```\n## 提交到版本库\n```\ngit push\n```\n## 查看文件所在区的提交状态\n```\ngit status\n```\n","source":"_posts/git.md","raw":"---\ntitle: git\ndate: 2017-04-29 10:04:24\ntags: [git,前端笔记]\ncategories: Git\n---\n## pwd\n  print working directory 打印当前工作目录\n\n## 告诉git当前用户\n\n- 用git第一次需要配置 以后都不需要\n\n```\ngit config --global user.name <your name>\ngit config --global user.email <your email>\ngit config list 查看配置列表\n\n```\n<!--more-->\n## 初始化文件夹（告诉git那个文件夹归git所管理）\n\n```\ngit init\n```\n## 打开文件夹\n```\ncd\n```\n\n## 删除文件夹  循环删除（递归删除）\n```\nrm -rf <文件夹名>\n```\n## 删除文件\n```\nrm <文件名>\n```\n\n## macOS中查看隐藏文件夹\n```\nls -a\n```\n## 新建文件\n```\ntouch <文件名>\n```\n## 查看文件名\n```\ncat <文件名>\n```\n## 编辑文件 进入vi编辑模式\n```\nvi <文件名>\n```\n## 在vi模式下\n- 按 `i` 键 进入编辑模式\n- 编辑文件\n- 按  `esc` 键，退出编辑模式\n- `:wq` 保存并退出\n- `:q!` 强制退出，不保存\n\n## 工作区进行提交到暂存区\n- 提交全部\n```\ngit add .\n或者\ngit add -A\n```\n\n- 提交单个文件\n```\ngit add <文件名>\n```\n\n## 暂存区提交到版本库\n```\ngit commit -m \"更新内容描述\"\n```\n## 提交到版本库\n```\ngit push\n```\n## 查看文件所在区的提交状态\n```\ngit status\n```\n","slug":"git","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a5000ayeh7xbi05gnp","content":"<h2 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h2><p>  print working directory 打印当前工作目录</p>\n<h2 id=\"告诉git当前用户\"><a href=\"#告诉git当前用户\" class=\"headerlink\" title=\"告诉git当前用户\"></a>告诉git当前用户</h2><ul>\n<li>用git第一次需要配置 以后都不需要</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &lt;your name&gt;</span><br><span class=\"line\">git config --global user.email &lt;your email&gt;</span><br><span class=\"line\">git config list 查看配置列表</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"初始化文件夹（告诉git那个文件夹归git所管理）\"><a href=\"#初始化文件夹（告诉git那个文件夹归git所管理）\" class=\"headerlink\" title=\"初始化文件夹（告诉git那个文件夹归git所管理）\"></a>初始化文件夹（告诉git那个文件夹归git所管理）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<h2 id=\"打开文件夹\"><a href=\"#打开文件夹\" class=\"headerlink\" title=\"打开文件夹\"></a>打开文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件夹-循环删除（递归删除）\"><a href=\"#删除文件夹-循环删除（递归删除）\" class=\"headerlink\" title=\"删除文件夹  循环删除（递归删除）\"></a>删除文件夹  循环删除（递归删除）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf &lt;文件夹名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"macOS中查看隐藏文件夹\"><a href=\"#macOS中查看隐藏文件夹\" class=\"headerlink\" title=\"macOS中查看隐藏文件夹\"></a>macOS中查看隐藏文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看文件名\"><a href=\"#查看文件名\" class=\"headerlink\" title=\"查看文件名\"></a>查看文件名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑文件-进入vi编辑模式\"><a href=\"#编辑文件-进入vi编辑模式\" class=\"headerlink\" title=\"编辑文件 进入vi编辑模式\"></a>编辑文件 进入vi编辑模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在vi模式下\"><a href=\"#在vi模式下\" class=\"headerlink\" title=\"在vi模式下\"></a>在vi模式下</h2><ul>\n<li>按 <code>i</code> 键 进入编辑模式</li>\n<li>编辑文件</li>\n<li>按  <code>esc</code> 键，退出编辑模式</li>\n<li><code>:wq</code> 保存并退出</li>\n<li><code>:q!</code> 强制退出，不保存</li>\n</ul>\n<h2 id=\"工作区进行提交到暂存区\"><a href=\"#工作区进行提交到暂存区\" class=\"headerlink\" title=\"工作区进行提交到暂存区\"></a>工作区进行提交到暂存区</h2><ul>\n<li><p>提交全部</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">或者</span><br><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交单个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"暂存区提交到版本库\"><a href=\"#暂存区提交到版本库\" class=\"headerlink\" title=\"暂存区提交到版本库\"></a>暂存区提交到版本库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;更新内容描述&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到版本库\"><a href=\"#提交到版本库\" class=\"headerlink\" title=\"提交到版本库\"></a>提交到版本库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看文件所在区的提交状态\"><a href=\"#查看文件所在区的提交状态\" class=\"headerlink\" title=\"查看文件所在区的提交状态\"></a>查看文件所在区的提交状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h2><p>  print working directory 打印当前工作目录</p>\n<h2 id=\"告诉git当前用户\"><a href=\"#告诉git当前用户\" class=\"headerlink\" title=\"告诉git当前用户\"></a>告诉git当前用户</h2><ul>\n<li>用git第一次需要配置 以后都不需要</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &lt;your name&gt;</span><br><span class=\"line\">git config --global user.email &lt;your email&gt;</span><br><span class=\"line\">git config list 查看配置列表</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"初始化文件夹（告诉git那个文件夹归git所管理）\"><a href=\"#初始化文件夹（告诉git那个文件夹归git所管理）\" class=\"headerlink\" title=\"初始化文件夹（告诉git那个文件夹归git所管理）\"></a>初始化文件夹（告诉git那个文件夹归git所管理）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<h2 id=\"打开文件夹\"><a href=\"#打开文件夹\" class=\"headerlink\" title=\"打开文件夹\"></a>打开文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件夹-循环删除（递归删除）\"><a href=\"#删除文件夹-循环删除（递归删除）\" class=\"headerlink\" title=\"删除文件夹  循环删除（递归删除）\"></a>删除文件夹  循环删除（递归删除）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf &lt;文件夹名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"macOS中查看隐藏文件夹\"><a href=\"#macOS中查看隐藏文件夹\" class=\"headerlink\" title=\"macOS中查看隐藏文件夹\"></a>macOS中查看隐藏文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看文件名\"><a href=\"#查看文件名\" class=\"headerlink\" title=\"查看文件名\"></a>查看文件名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑文件-进入vi编辑模式\"><a href=\"#编辑文件-进入vi编辑模式\" class=\"headerlink\" title=\"编辑文件 进入vi编辑模式\"></a>编辑文件 进入vi编辑模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在vi模式下\"><a href=\"#在vi模式下\" class=\"headerlink\" title=\"在vi模式下\"></a>在vi模式下</h2><ul>\n<li>按 <code>i</code> 键 进入编辑模式</li>\n<li>编辑文件</li>\n<li>按  <code>esc</code> 键，退出编辑模式</li>\n<li><code>:wq</code> 保存并退出</li>\n<li><code>:q!</code> 强制退出，不保存</li>\n</ul>\n<h2 id=\"工作区进行提交到暂存区\"><a href=\"#工作区进行提交到暂存区\" class=\"headerlink\" title=\"工作区进行提交到暂存区\"></a>工作区进行提交到暂存区</h2><ul>\n<li><p>提交全部</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">或者</span><br><span class=\"line\">git add -A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交单个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"暂存区提交到版本库\"><a href=\"#暂存区提交到版本库\" class=\"headerlink\" title=\"暂存区提交到版本库\"></a>暂存区提交到版本库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;更新内容描述&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交到版本库\"><a href=\"#提交到版本库\" class=\"headerlink\" title=\"提交到版本库\"></a>提交到版本库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看文件所在区的提交状态\"><a href=\"#查看文件所在区的提交状态\" class=\"headerlink\" title=\"查看文件所在区的提交状态\"></a>查看文件所在区的提交状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>"},{"title":"git分支","date":"2017-04-29T04:14:41.000Z","_content":"## 查看当前git分支\n```\ngit branch\n```\n## 创建分支\n```\ngit branch <分支名>\n```\n<!--more-->\n## 切换分支\n```\ngit checkout <分支名>\n```\n## 删除分支\n注：删除分支之前一定确定要删除的分支，不是当前所在分支，切换其他分支之后即可删除\n```\ngit branch -D <分支名>\n```\n## 创建并切换指定分支\n```\ngit checkout -b <分支名>\n```\n## 分支合并 用主干分支合并分支\n注：默认master是主干\n```\ngit merge <分支名>\n```\n\n> 合并分支后 被合并的分支删除即可\n","source":"_posts/git分支.md","raw":"---\ntitle: git分支\ndate: 2017-04-29 12:14:41\ntags: [git,前端笔记]\ncategories: Git\n---\n## 查看当前git分支\n```\ngit branch\n```\n## 创建分支\n```\ngit branch <分支名>\n```\n<!--more-->\n## 切换分支\n```\ngit checkout <分支名>\n```\n## 删除分支\n注：删除分支之前一定确定要删除的分支，不是当前所在分支，切换其他分支之后即可删除\n```\ngit branch -D <分支名>\n```\n## 创建并切换指定分支\n```\ngit checkout -b <分支名>\n```\n## 分支合并 用主干分支合并分支\n注：默认master是主干\n```\ngit merge <分支名>\n```\n\n> 合并分支后 被合并的分支删除即可\n","slug":"git分支","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a6000byeh7j2cguqqs","content":"<h2 id=\"查看当前git分支\"><a href=\"#查看当前git分支\" class=\"headerlink\" title=\"查看当前git分支\"></a>查看当前git分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><p>注：删除分支之前一定确定要删除的分支，不是当前所在分支，切换其他分支之后即可删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D &lt;分支名&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建并切换指定分支\"><a href=\"#创建并切换指定分支\" class=\"headerlink\" title=\"创建并切换指定分支\"></a>创建并切换指定分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支合并-用主干分支合并分支\"><a href=\"#分支合并-用主干分支合并分支\" class=\"headerlink\" title=\"分支合并 用主干分支合并分支\"></a>分支合并 用主干分支合并分支</h2><p>注：默认master是主干<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;分支名&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>合并分支后 被合并的分支删除即可</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"查看当前git分支\"><a href=\"#查看当前git分支\" class=\"headerlink\" title=\"查看当前git分支\"></a>查看当前git分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;分支名&gt;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><p>注：删除分支之前一定确定要删除的分支，不是当前所在分支，切换其他分支之后即可删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D &lt;分支名&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建并切换指定分支\"><a href=\"#创建并切换指定分支\" class=\"headerlink\" title=\"创建并切换指定分支\"></a>创建并切换指定分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;分支名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支合并-用主干分支合并分支\"><a href=\"#分支合并-用主干分支合并分支\" class=\"headerlink\" title=\"分支合并 用主干分支合并分支\"></a>分支合并 用主干分支合并分支</h2><p>注：默认master是主干<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;分支名&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>合并分支后 被合并的分支删除即可</p>\n</blockquote>"},{"title":"git发布静态网站","date":"2017-04-29T07:59:01.000Z","_content":"## 在github上发布静态网站\n- 必须在当前项目下建立一个`gh-pages`的分支\n- 将我们需要发布的内容推送到`gh-pages`这个分支上\n- 推送到远程仓库上即可\n- github会给你一个在线地址\n<!--more-->\n## 执行步骤\n- git checkout -b gh-pages\n- touch index.html\n- git add .\n- git commit -m \"add index.html\"\n- git push origin gh-pages\n-在github中的setting页可以查找到网址+文件名即可（默认会展示index.html）\n\n## 获取自己仓库的代码\n```\ngit clone <地址>\n```\n","source":"_posts/git发布静态网站.md","raw":"---\ntitle: git发布静态网站\ndate: 2017-04-29 15:59:01\ntags: [git,前端笔记]\ncategories: Git\n---\n## 在github上发布静态网站\n- 必须在当前项目下建立一个`gh-pages`的分支\n- 将我们需要发布的内容推送到`gh-pages`这个分支上\n- 推送到远程仓库上即可\n- github会给你一个在线地址\n<!--more-->\n## 执行步骤\n- git checkout -b gh-pages\n- touch index.html\n- git add .\n- git commit -m \"add index.html\"\n- git push origin gh-pages\n-在github中的setting页可以查找到网址+文件名即可（默认会展示index.html）\n\n## 获取自己仓库的代码\n```\ngit clone <地址>\n```\n","slug":"git发布静态网站","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a8000fyeh7k86fswhe","content":"<h2 id=\"在github上发布静态网站\"><a href=\"#在github上发布静态网站\" class=\"headerlink\" title=\"在github上发布静态网站\"></a>在github上发布静态网站</h2><ul>\n<li>必须在当前项目下建立一个<code>gh-pages</code>的分支</li>\n<li>将我们需要发布的内容推送到<code>gh-pages</code>这个分支上</li>\n<li>推送到远程仓库上即可</li>\n<li>github会给你一个在线地址<a id=\"more\"></a>\n<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2></li>\n<li>git checkout -b gh-pages</li>\n<li>touch index.html</li>\n<li>git add .</li>\n<li>git commit -m “add index.html”</li>\n<li>git push origin gh-pages<br>-在github中的setting页可以查找到网址+文件名即可（默认会展示index.html）</li>\n</ul>\n<h2 id=\"获取自己仓库的代码\"><a href=\"#获取自己仓库的代码\" class=\"headerlink\" title=\"获取自己仓库的代码\"></a>获取自己仓库的代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;地址&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"在github上发布静态网站\"><a href=\"#在github上发布静态网站\" class=\"headerlink\" title=\"在github上发布静态网站\"></a>在github上发布静态网站</h2><ul>\n<li>必须在当前项目下建立一个<code>gh-pages</code>的分支</li>\n<li>将我们需要发布的内容推送到<code>gh-pages</code>这个分支上</li>\n<li>推送到远程仓库上即可</li>\n<li>github会给你一个在线地址","more":"<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2></li>\n<li>git checkout -b gh-pages</li>\n<li>touch index.html</li>\n<li>git add .</li>\n<li>git commit -m “add index.html”</li>\n<li>git push origin gh-pages<br>-在github中的setting页可以查找到网址+文件名即可（默认会展示index.html）</li>\n</ul>\n<h2 id=\"获取自己仓库的代码\"><a href=\"#获取自己仓库的代码\" class=\"headerlink\" title=\"获取自己仓库的代码\"></a>获取自己仓库的代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;地址&gt;</span><br></pre></td></tr></table></figure>"},{"title":"git文件对比","date":"2017-04-29T03:00:26.000Z","_content":"## 查看版本信息\n```\ngit log\n```\n或者\n```\ngit log --oneline\n```\n<!--more-->\n## 文件内容比对\n- 工作区和暂存区文件比较\n```\ngit diff\n```\n- 暂存区和版本文件比较\n```\ngit diff --cached\n```\n- 工作区和版本库比较\n```\ngit diff master\n```\n","source":"_posts/git文件内容对比.md","raw":"---\ntitle: git文件对比\ndate: 2017-04-29 11:00:26\ntags: [git,前端笔记]\ncategories: Git\n---\n## 查看版本信息\n```\ngit log\n```\n或者\n```\ngit log --oneline\n```\n<!--more-->\n## 文件内容比对\n- 工作区和暂存区文件比较\n```\ngit diff\n```\n- 暂存区和版本文件比较\n```\ngit diff --cached\n```\n- 工作区和版本库比较\n```\ngit diff master\n```\n","slug":"git文件内容对比","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4a9000gyeh7vbn5krbs","content":"<h2 id=\"查看版本信息\"><a href=\"#查看版本信息\" class=\"headerlink\" title=\"查看版本信息\"></a>查看版本信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"文件内容比对\"><a href=\"#文件内容比对\" class=\"headerlink\" title=\"文件内容比对\"></a>文件内容比对</h2><ul>\n<li><p>工作区和暂存区文件比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暂存区和版本文件比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工作区和版本库比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"查看版本信息\"><a href=\"#查看版本信息\" class=\"headerlink\" title=\"查看版本信息\"></a>查看版本信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"文件内容比对\"><a href=\"#文件内容比对\" class=\"headerlink\" title=\"文件内容比对\"></a>文件内容比对</h2><ul>\n<li><p>工作区和暂存区文件比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暂存区和版本文件比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工作区和版本库比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"git在mac中自动补全功能配置","date":"2017-01-25T02:47:34.000Z","_content":"## ps:\n在 __MAC__ 中使用自带的命令行工具来操作git很不方便，没有提示对于我这种英语渣渣的人来说简直是不能接受。\n***\n## 话不多说直接走起\n<!--more-->\n- 首先使用 `$ brew list` 命令来查看你是否已经安装了\n***bash-completion*** ，如果没有继续向下进行，有的跳过下一步。\n- 接下来安装 ***bash-completion*** ，执行以下命令：\n\n  `$ brew install bash-completion`\n\n  安装完成之后运行 `$ brew info bash-completion`\n\n  在最下方会出现\n      ==> Caveats\n      Add the following lines to your ~/.bash_profile:\n      if [ -f $(brew --prefix)/etc/bash_completion ]; then\n      . $(brew --prefix)/etc/bash_completion\n      fi\n  这个是已经配置好的，正常的是没有if...then...这段的。\n\n  这时候我们需要在当前用户根目录（即 __~/__ 目录）下创建一个 .bash_profile 文件（即创建路径为 `~/.bash_profile` ），\n  接下来将\n\n      if [ -f $(brew --prefix)/etc/bash_completion ]; then\n      . $(brew --prefix)/etc/bash_completion\n      fi\n\n  添加到 .bash_profile 文件内。\n\n  ### 注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\n\n  安装完 ***bash-completion*** 重启终端命令行工具，继续一下步骤。\n\n- 然后将  __Git__ 源码中的 __completion.bash__ 源码clone到本地\n\n  `$ git clone  https://github.com/markgandolfo/git-bash-completion`\n\n- 在下载的git-bash-completion文件夹中，找到git-bash-completion文件夹中的git-bash-completion文件。将此文件重名为.git-bash-completion（目的是将此文件隐藏在用户跟目录中，防止意外将其删除）。如果重命名不成功，可以通过 `$ vi .git-bash-completion`\n   命令在用户跟目录下进行创建，然后通过编辑器将git-bash-completion文件中的内容复制到.git-bash-completion文件中。\n- 之后，在用户跟目录下创建.bashrc文件，此文件也可以通过 `$ vi .bashrc` 命令进行创建，其内容如下：\n\n        source ~/.git-completion.bashrc\n\n 然后保存。\n## 配置都已完成，重启终端命令行工具即可。\n","source":"_posts/git在mac中自动补全功能配置.md","raw":"---\ntitle: git在mac中自动补全功能配置\ndate: 2017-01-25 10:47:34\ntags: [git配置,前端笔记]\ncategories: [Git]\n---\n## ps:\n在 __MAC__ 中使用自带的命令行工具来操作git很不方便，没有提示对于我这种英语渣渣的人来说简直是不能接受。\n***\n## 话不多说直接走起\n<!--more-->\n- 首先使用 `$ brew list` 命令来查看你是否已经安装了\n***bash-completion*** ，如果没有继续向下进行，有的跳过下一步。\n- 接下来安装 ***bash-completion*** ，执行以下命令：\n\n  `$ brew install bash-completion`\n\n  安装完成之后运行 `$ brew info bash-completion`\n\n  在最下方会出现\n      ==> Caveats\n      Add the following lines to your ~/.bash_profile:\n      if [ -f $(brew --prefix)/etc/bash_completion ]; then\n      . $(brew --prefix)/etc/bash_completion\n      fi\n  这个是已经配置好的，正常的是没有if...then...这段的。\n\n  这时候我们需要在当前用户根目录（即 __~/__ 目录）下创建一个 .bash_profile 文件（即创建路径为 `~/.bash_profile` ），\n  接下来将\n\n      if [ -f $(brew --prefix)/etc/bash_completion ]; then\n      . $(brew --prefix)/etc/bash_completion\n      fi\n\n  添加到 .bash_profile 文件内。\n\n  ### 注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\n\n  安装完 ***bash-completion*** 重启终端命令行工具，继续一下步骤。\n\n- 然后将  __Git__ 源码中的 __completion.bash__ 源码clone到本地\n\n  `$ git clone  https://github.com/markgandolfo/git-bash-completion`\n\n- 在下载的git-bash-completion文件夹中，找到git-bash-completion文件夹中的git-bash-completion文件。将此文件重名为.git-bash-completion（目的是将此文件隐藏在用户跟目录中，防止意外将其删除）。如果重命名不成功，可以通过 `$ vi .git-bash-completion`\n   命令在用户跟目录下进行创建，然后通过编辑器将git-bash-completion文件中的内容复制到.git-bash-completion文件中。\n- 之后，在用户跟目录下创建.bashrc文件，此文件也可以通过 `$ vi .bashrc` 命令进行创建，其内容如下：\n\n        source ~/.git-completion.bashrc\n\n 然后保存。\n## 配置都已完成，重启终端命令行工具即可。\n","slug":"git在mac中自动补全功能配置","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ab000kyeh7r1t3r3rn","content":"<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps:\"></a>ps:</h2><p>在 <strong>MAC</strong> 中使用自带的命令行工具来操作git很不方便，没有提示对于我这种英语渣渣的人来说简直是不能接受。</p>\n<hr>\n<h2 id=\"话不多说直接走起\"><a href=\"#话不多说直接走起\" class=\"headerlink\" title=\"话不多说直接走起\"></a>话不多说直接走起</h2><a id=\"more\"></a>\n<ul>\n<li>首先使用 <code>$ brew list</code> 命令来查看你是否已经安装了<br><strong><em>bash-completion</em></strong> ，如果没有继续向下进行，有的跳过下一步。</li>\n<li><p>接下来安装 <strong><em>bash-completion</em></strong> ，执行以下命令：</p>\n<p><code>$ brew install bash-completion</code></p>\n<p>安装完成之后运行 <code>$ brew info bash-completion</code></p>\n<p>在最下方会出现</p>\n<pre><code>==&gt; Caveats\nAdd the following lines to your ~/.bash_profile:\nif [ -f $(brew --prefix)/etc/bash_completion ]; then\n. $(brew --prefix)/etc/bash_completion\nfi\n</code></pre><p>这个是已经配置好的，正常的是没有if…then…这段的。</p>\n<p>这时候我们需要在当前用户根目录（即 <strong>~/</strong> 目录）下创建一个 .bash_profile 文件（即创建路径为 <code>~/.bash_profile</code> ），<br>接下来将</p>\n<pre><code>if [ -f $(brew --prefix)/etc/bash_completion ]; then\n. $(brew --prefix)/etc/bash_completion\nfi\n</code></pre><p>添加到 .bash_profile 文件内。</p>\n<h3 id=\"注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\"><a href=\"#注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\" class=\"headerlink\" title=\"注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\"></a>注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！</h3><p>安装完 <strong><em>bash-completion</em></strong> 重启终端命令行工具，继续一下步骤。</p>\n</li>\n<li><p>然后将  <strong>Git</strong> 源码中的 <strong>completion.bash</strong> 源码clone到本地</p>\n<p><code>$ git clone  https://github.com/markgandolfo/git-bash-completion</code></p>\n</li>\n<li><p>在下载的git-bash-completion文件夹中，找到git-bash-completion文件夹中的git-bash-completion文件。将此文件重名为.git-bash-completion（目的是将此文件隐藏在用户跟目录中，防止意外将其删除）。如果重命名不成功，可以通过 <code>$ vi .git-bash-completion</code><br> 命令在用户跟目录下进行创建，然后通过编辑器将git-bash-completion文件中的内容复制到.git-bash-completion文件中。</p>\n</li>\n<li><p>之后，在用户跟目录下创建.bashrc文件，此文件也可以通过 <code>$ vi .bashrc</code> 命令进行创建，其内容如下：</p>\n<pre><code>source ~/.git-completion.bashrc\n</code></pre><p>然后保存。</p>\n<h2 id=\"配置都已完成，重启终端命令行工具即可。\"><a href=\"#配置都已完成，重启终端命令行工具即可。\" class=\"headerlink\" title=\"配置都已完成，重启终端命令行工具即可。\"></a>配置都已完成，重启终端命令行工具即可。</h2></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps:\"></a>ps:</h2><p>在 <strong>MAC</strong> 中使用自带的命令行工具来操作git很不方便，没有提示对于我这种英语渣渣的人来说简直是不能接受。</p>\n<hr>\n<h2 id=\"话不多说直接走起\"><a href=\"#话不多说直接走起\" class=\"headerlink\" title=\"话不多说直接走起\"></a>话不多说直接走起</h2>","more":"<ul>\n<li>首先使用 <code>$ brew list</code> 命令来查看你是否已经安装了<br><strong><em>bash-completion</em></strong> ，如果没有继续向下进行，有的跳过下一步。</li>\n<li><p>接下来安装 <strong><em>bash-completion</em></strong> ，执行以下命令：</p>\n<p><code>$ brew install bash-completion</code></p>\n<p>安装完成之后运行 <code>$ brew info bash-completion</code></p>\n<p>在最下方会出现</p>\n<pre><code>==&gt; Caveats\nAdd the following lines to your ~/.bash_profile:\nif [ -f $(brew --prefix)/etc/bash_completion ]; then\n. $(brew --prefix)/etc/bash_completion\nfi\n</code></pre><p>这个是已经配置好的，正常的是没有if…then…这段的。</p>\n<p>这时候我们需要在当前用户根目录（即 <strong>~/</strong> 目录）下创建一个 .bash_profile 文件（即创建路径为 <code>~/.bash_profile</code> ），<br>接下来将</p>\n<pre><code>if [ -f $(brew --prefix)/etc/bash_completion ]; then\n. $(brew --prefix)/etc/bash_completion\nfi\n</code></pre><p>添加到 .bash_profile 文件内。</p>\n<h3 id=\"注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\"><a href=\"#注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\" class=\"headerlink\" title=\"注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！\"></a>注意：最好不要直接复制。如果复制的话，代码中的换行位置需要重新输入。否则最后会报错！</h3><p>安装完 <strong><em>bash-completion</em></strong> 重启终端命令行工具，继续一下步骤。</p>\n</li>\n<li><p>然后将  <strong>Git</strong> 源码中的 <strong>completion.bash</strong> 源码clone到本地</p>\n<p><code>$ git clone  https://github.com/markgandolfo/git-bash-completion</code></p>\n</li>\n<li><p>在下载的git-bash-completion文件夹中，找到git-bash-completion文件夹中的git-bash-completion文件。将此文件重名为.git-bash-completion（目的是将此文件隐藏在用户跟目录中，防止意外将其删除）。如果重命名不成功，可以通过 <code>$ vi .git-bash-completion</code><br> 命令在用户跟目录下进行创建，然后通过编辑器将git-bash-completion文件中的内容复制到.git-bash-completion文件中。</p>\n</li>\n<li><p>之后，在用户跟目录下创建.bashrc文件，此文件也可以通过 <code>$ vi .bashrc</code> 命令进行创建，其内容如下：</p>\n<pre><code>source ~/.git-completion.bashrc\n</code></pre><p>然后保存。</p>\n<h2 id=\"配置都已完成，重启终端命令行工具即可。\"><a href=\"#配置都已完成，重启终端命令行工具即可。\" class=\"headerlink\" title=\"配置都已完成，重启终端命令行工具即可。\"></a>配置都已完成，重启终端命令行工具即可。</h2></li>\n</ul>"},{"title":"git文件回滚","date":"2017-04-29T03:18:08.000Z","_content":"## 跨过暂存区直接将本地文件提交到版本库\n\n如果执行过一次增加到版本库 `git commit -a -m \"更新内容描述\"`\n\n## 从暂存区拉取历史文件\n- 全部拉取回来\n```\ngit checkout .\n```\n<!--more-->\n- 拉取某一个文件\n```\ngit checkout <文件名>\n```\n\n## 从版本库将文件某一版本回滚到暂存区和工作区\n```\ngit reset --hard <版本号>\n```\n\n## 查看所有操作的版本号\n```\ngit reflog\n```\n\n## 搜索带有<需要查询的关键字>的版本号\n```\ngit log --grep=<需要查询的关键字>\n```\n\n## 搜索<作者/用户名>提交的历史版本\n```\ngit log --author=<作者/用户名>\n```\n\n## 加入暂存区后，返回上一次的添加 (删除本次的 `add`)\n- 返回指定文件\n```\ngit reset HEAD <文件名>\n```\n- 返回所有文件\n```\ngit reset HEAD .\n```\n","source":"_posts/git文件回滚.md","raw":"---\ntitle: git文件回滚\ndate: 2017-04-29 11:18:08\ntags: [git,前端笔记]\ncategories: Git\n---\n## 跨过暂存区直接将本地文件提交到版本库\n\n如果执行过一次增加到版本库 `git commit -a -m \"更新内容描述\"`\n\n## 从暂存区拉取历史文件\n- 全部拉取回来\n```\ngit checkout .\n```\n<!--more-->\n- 拉取某一个文件\n```\ngit checkout <文件名>\n```\n\n## 从版本库将文件某一版本回滚到暂存区和工作区\n```\ngit reset --hard <版本号>\n```\n\n## 查看所有操作的版本号\n```\ngit reflog\n```\n\n## 搜索带有<需要查询的关键字>的版本号\n```\ngit log --grep=<需要查询的关键字>\n```\n\n## 搜索<作者/用户名>提交的历史版本\n```\ngit log --author=<作者/用户名>\n```\n\n## 加入暂存区后，返回上一次的添加 (删除本次的 `add`)\n- 返回指定文件\n```\ngit reset HEAD <文件名>\n```\n- 返回所有文件\n```\ngit reset HEAD .\n```\n","slug":"git文件回滚","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ac000myeh7p2jp3gin","content":"<h2 id=\"跨过暂存区直接将本地文件提交到版本库\"><a href=\"#跨过暂存区直接将本地文件提交到版本库\" class=\"headerlink\" title=\"跨过暂存区直接将本地文件提交到版本库\"></a>跨过暂存区直接将本地文件提交到版本库</h2><p>如果执行过一次增加到版本库 <code>git commit -a -m &quot;更新内容描述&quot;</code></p>\n<h2 id=\"从暂存区拉取历史文件\"><a href=\"#从暂存区拉取历史文件\" class=\"headerlink\" title=\"从暂存区拉取历史文件\"></a>从暂存区拉取历史文件</h2><ul>\n<li>全部拉取回来<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>拉取某一个文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"从版本库将文件某一版本回滚到暂存区和工作区\"><a href=\"#从版本库将文件某一版本回滚到暂存区和工作区\" class=\"headerlink\" title=\"从版本库将文件某一版本回滚到暂存区和工作区\"></a>从版本库将文件某一版本回滚到暂存区和工作区</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;版本号&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看所有操作的版本号\"><a href=\"#查看所有操作的版本号\" class=\"headerlink\" title=\"查看所有操作的版本号\"></a>查看所有操作的版本号</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索带有-lt-需要查询的关键字-gt-的版本号\"><a href=\"#搜索带有-lt-需要查询的关键字-gt-的版本号\" class=\"headerlink\" title=\"搜索带有&lt;需要查询的关键字&gt;的版本号\"></a>搜索带有&lt;需要查询的关键字&gt;的版本号</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --grep=&lt;需要查询的关键字&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索-lt-作者-用户名-gt-提交的历史版本\"><a href=\"#搜索-lt-作者-用户名-gt-提交的历史版本\" class=\"headerlink\" title=\"搜索&lt;作者/用户名&gt;提交的历史版本\"></a>搜索&lt;作者/用户名&gt;提交的历史版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --author=&lt;作者/用户名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加入暂存区后，返回上一次的添加-删除本次的-add\"><a href=\"#加入暂存区后，返回上一次的添加-删除本次的-add\" class=\"headerlink\" title=\"加入暂存区后，返回上一次的添加 (删除本次的 add)\"></a>加入暂存区后，返回上一次的添加 (删除本次的 <code>add</code>)</h2><ul>\n<li><p>返回指定文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"跨过暂存区直接将本地文件提交到版本库\"><a href=\"#跨过暂存区直接将本地文件提交到版本库\" class=\"headerlink\" title=\"跨过暂存区直接将本地文件提交到版本库\"></a>跨过暂存区直接将本地文件提交到版本库</h2><p>如果执行过一次增加到版本库 <code>git commit -a -m &quot;更新内容描述&quot;</code></p>\n<h2 id=\"从暂存区拉取历史文件\"><a href=\"#从暂存区拉取历史文件\" class=\"headerlink\" title=\"从暂存区拉取历史文件\"></a>从暂存区拉取历史文件</h2><ul>\n<li>全部拉取回来<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li>拉取某一个文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"从版本库将文件某一版本回滚到暂存区和工作区\"><a href=\"#从版本库将文件某一版本回滚到暂存区和工作区\" class=\"headerlink\" title=\"从版本库将文件某一版本回滚到暂存区和工作区\"></a>从版本库将文件某一版本回滚到暂存区和工作区</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;版本号&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看所有操作的版本号\"><a href=\"#查看所有操作的版本号\" class=\"headerlink\" title=\"查看所有操作的版本号\"></a>查看所有操作的版本号</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索带有-lt-需要查询的关键字-gt-的版本号\"><a href=\"#搜索带有-lt-需要查询的关键字-gt-的版本号\" class=\"headerlink\" title=\"搜索带有&lt;需要查询的关键字&gt;的版本号\"></a>搜索带有&lt;需要查询的关键字&gt;的版本号</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --grep=&lt;需要查询的关键字&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索-lt-作者-用户名-gt-提交的历史版本\"><a href=\"#搜索-lt-作者-用户名-gt-提交的历史版本\" class=\"headerlink\" title=\"搜索&lt;作者/用户名&gt;提交的历史版本\"></a>搜索&lt;作者/用户名&gt;提交的历史版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --author=&lt;作者/用户名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加入暂存区后，返回上一次的添加-删除本次的-add\"><a href=\"#加入暂存区后，返回上一次的添加-删除本次的-add\" class=\"headerlink\" title=\"加入暂存区后，返回上一次的添加 (删除本次的 add)\"></a>加入暂存区后，返回上一次的添加 (删除本次的 <code>add</code>)</h2><ul>\n<li><p>返回指定文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD &lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回所有文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"git解决冲突","date":"2017-04-29T04:46:48.000Z","_content":"## 处理冲突\n由于两个分支改变了相同的文件，但是文件内容不同，这时候需要手动吹，再次提交，就可以完成合并\n> 模块化开发，可以降低冲突的发生\n\n## 查看git提交图谱\n```\ngit log --graph\n```\n<!--more-->\n通过上下方向键拉倒提交日志最低端，按`Q`键退出提交日志窗口。\n\n## github注册之后需要配置邮箱\n\n## 创建有内容的文件\n```\necho \"重写的内容\" > README.md\necho \"需要追加的内容\" >> README.md\n```\n\n## 本地仓库与远程仓库进行关联\n```\ngit remote add <名字> <地址>\n```\n\n## 查看远程仓库的连接列表\n```\ngit remote -v\n```\n## 删除远程仓库的连接\n```\ngit remote <连接名>\n```\n\n## 推送到远程仓库\n-u 为upstream  设置之后下次推送时可以使用简写\n```\ngit push origin master -u\n简写\ngit push\n```\n","source":"_posts/git解决冲突.md","raw":"---\ntitle: git解决冲突\ndate: 2017-04-29 12:46:48\ntags: [git，前端笔记]\ncategories: Git\n---\n## 处理冲突\n由于两个分支改变了相同的文件，但是文件内容不同，这时候需要手动吹，再次提交，就可以完成合并\n> 模块化开发，可以降低冲突的发生\n\n## 查看git提交图谱\n```\ngit log --graph\n```\n<!--more-->\n通过上下方向键拉倒提交日志最低端，按`Q`键退出提交日志窗口。\n\n## github注册之后需要配置邮箱\n\n## 创建有内容的文件\n```\necho \"重写的内容\" > README.md\necho \"需要追加的内容\" >> README.md\n```\n\n## 本地仓库与远程仓库进行关联\n```\ngit remote add <名字> <地址>\n```\n\n## 查看远程仓库的连接列表\n```\ngit remote -v\n```\n## 删除远程仓库的连接\n```\ngit remote <连接名>\n```\n\n## 推送到远程仓库\n-u 为upstream  设置之后下次推送时可以使用简写\n```\ngit push origin master -u\n简写\ngit push\n```\n","slug":"git解决冲突","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ad000ryeh7sn92qoj3","content":"<h2 id=\"处理冲突\"><a href=\"#处理冲突\" class=\"headerlink\" title=\"处理冲突\"></a>处理冲突</h2><p>由于两个分支改变了相同的文件，但是文件内容不同，这时候需要手动吹，再次提交，就可以完成合并</p>\n<blockquote>\n<p>模块化开发，可以降低冲突的发生</p>\n</blockquote>\n<h2 id=\"查看git提交图谱\"><a href=\"#查看git提交图谱\" class=\"headerlink\" title=\"查看git提交图谱\"></a>查看git提交图谱</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>通过上下方向键拉倒提交日志最低端，按<code>Q</code>键退出提交日志窗口。</p>\n<h2 id=\"github注册之后需要配置邮箱\"><a href=\"#github注册之后需要配置邮箱\" class=\"headerlink\" title=\"github注册之后需要配置邮箱\"></a>github注册之后需要配置邮箱</h2><h2 id=\"创建有内容的文件\"><a href=\"#创建有内容的文件\" class=\"headerlink\" title=\"创建有内容的文件\"></a>创建有内容的文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;重写的内容&quot; &gt; README.md</span><br><span class=\"line\">echo &quot;需要追加的内容&quot; &gt;&gt; README.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地仓库与远程仓库进行关联\"><a href=\"#本地仓库与远程仓库进行关联\" class=\"headerlink\" title=\"本地仓库与远程仓库进行关联\"></a>本地仓库与远程仓库进行关联</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add &lt;名字&gt; &lt;地址&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看远程仓库的连接列表\"><a href=\"#查看远程仓库的连接列表\" class=\"headerlink\" title=\"查看远程仓库的连接列表\"></a>查看远程仓库的连接列表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除远程仓库的连接\"><a href=\"#删除远程仓库的连接\" class=\"headerlink\" title=\"删除远程仓库的连接\"></a>删除远程仓库的连接</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote &lt;连接名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送到远程仓库\"><a href=\"#推送到远程仓库\" class=\"headerlink\" title=\"推送到远程仓库\"></a>推送到远程仓库</h2><p>-u 为upstream  设置之后下次推送时可以使用简写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master -u</span><br><span class=\"line\">简写</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"处理冲突\"><a href=\"#处理冲突\" class=\"headerlink\" title=\"处理冲突\"></a>处理冲突</h2><p>由于两个分支改变了相同的文件，但是文件内容不同，这时候需要手动吹，再次提交，就可以完成合并</p>\n<blockquote>\n<p>模块化开发，可以降低冲突的发生</p>\n</blockquote>\n<h2 id=\"查看git提交图谱\"><a href=\"#查看git提交图谱\" class=\"headerlink\" title=\"查看git提交图谱\"></a>查看git提交图谱</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph</span><br></pre></td></tr></table></figure>","more":"<p>通过上下方向键拉倒提交日志最低端，按<code>Q</code>键退出提交日志窗口。</p>\n<h2 id=\"github注册之后需要配置邮箱\"><a href=\"#github注册之后需要配置邮箱\" class=\"headerlink\" title=\"github注册之后需要配置邮箱\"></a>github注册之后需要配置邮箱</h2><h2 id=\"创建有内容的文件\"><a href=\"#创建有内容的文件\" class=\"headerlink\" title=\"创建有内容的文件\"></a>创建有内容的文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;重写的内容&quot; &gt; README.md</span><br><span class=\"line\">echo &quot;需要追加的内容&quot; &gt;&gt; README.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地仓库与远程仓库进行关联\"><a href=\"#本地仓库与远程仓库进行关联\" class=\"headerlink\" title=\"本地仓库与远程仓库进行关联\"></a>本地仓库与远程仓库进行关联</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add &lt;名字&gt; &lt;地址&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看远程仓库的连接列表\"><a href=\"#查看远程仓库的连接列表\" class=\"headerlink\" title=\"查看远程仓库的连接列表\"></a>查看远程仓库的连接列表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除远程仓库的连接\"><a href=\"#删除远程仓库的连接\" class=\"headerlink\" title=\"删除远程仓库的连接\"></a>删除远程仓库的连接</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote &lt;连接名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送到远程仓库\"><a href=\"#推送到远程仓库\" class=\"headerlink\" title=\"推送到远程仓库\"></a>推送到远程仓库</h2><p>-u 为upstream  设置之后下次推送时可以使用简写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master -u</span><br><span class=\"line\">简写</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>"},{"title":"hexo发布","date":"2017-04-30T09:48:34.000Z","_content":"## 发布hexo\n发布到github上一个账号只能发布一次，创建新的github库名字必须是\n`<github用户名>.github.io`\n## 配置到github\n在_config.yml中找到`deploy`中添加一下内容\n<!--more-->\n```\ndeploy:\n  type: git\n  repository: https://github.com/<github用户名>/<github用户名>.github.io.git\n  branch: master\n```\n## 下载发布插件\n```\nnpm install hexo-deployer-git --save\n```\n## 发布\n```\nhexo g //生成静态页\nhexo d //发布博客\n```\n","source":"_posts/hexo发布.md","raw":"---\ntitle: hexo发布\ndate: 2017-04-30 17:48:34\ntags: [hexo,装逼利器]\ncategories: HEXO\n---\n## 发布hexo\n发布到github上一个账号只能发布一次，创建新的github库名字必须是\n`<github用户名>.github.io`\n## 配置到github\n在_config.yml中找到`deploy`中添加一下内容\n<!--more-->\n```\ndeploy:\n  type: git\n  repository: https://github.com/<github用户名>/<github用户名>.github.io.git\n  branch: master\n```\n## 下载发布插件\n```\nnpm install hexo-deployer-git --save\n```\n## 发布\n```\nhexo g //生成静态页\nhexo d //发布博客\n```\n","slug":"hexo发布","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ae000syeh7k4aojmlh","content":"<h2 id=\"发布hexo\"><a href=\"#发布hexo\" class=\"headerlink\" title=\"发布hexo\"></a>发布hexo</h2><p>发布到github上一个账号只能发布一次，创建新的github库名字必须是<br><code>&lt;github用户名&gt;.github.io</code></p>\n<h2 id=\"配置到github\"><a href=\"#配置到github\" class=\"headerlink\" title=\"配置到github\"></a>配置到github</h2><p>在_config.yml中找到<code>deploy</code>中添加一下内容<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/&lt;github用户名&gt;/&lt;github用户名&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载发布插件\"><a href=\"#下载发布插件\" class=\"headerlink\" title=\"下载发布插件\"></a>下载发布插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g //生成静态页</span><br><span class=\"line\">hexo d //发布博客</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"发布hexo\"><a href=\"#发布hexo\" class=\"headerlink\" title=\"发布hexo\"></a>发布hexo</h2><p>发布到github上一个账号只能发布一次，创建新的github库名字必须是<br><code>&lt;github用户名&gt;.github.io</code></p>\n<h2 id=\"配置到github\"><a href=\"#配置到github\" class=\"headerlink\" title=\"配置到github\"></a>配置到github</h2><p>在_config.yml中找到<code>deploy</code>中添加一下内容<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/&lt;github用户名&gt;/&lt;github用户名&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"下载发布插件\"><a href=\"#下载发布插件\" class=\"headerlink\" title=\"下载发布插件\"></a>下载发布插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g //生成静态页</span><br><span class=\"line\">hexo d //发布博客</span><br></pre></td></tr></table></figure>"},{"title":"WebStorm搭建本地授权服务","date":"2017-02-09T00:55:44.000Z","_content":"> ### 本地搭建各种storm License Server ,建立自己的本地授权服务器。告别那些恶心的注册码。\n\n## 适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\n### 1、下载下面的文件\n<!--more-->\n#### 链接地址：\n http://ol31uv24o.bkt.clouddn.com/IDEALicenseServer.zip\n### 2、解压文件，找到自己的操作版本。\n\n以下使用windows64位系统做示例。\n找到![图1](http://ol320xopj.bkt.clouddn.com/blog-webstorm-01.jpg)\n\n双击运行 ***IntelliJIDEALicenseServer_windows_amd64.exe***\n\n![图2](http://ol320xopj.bkt.clouddn.com/blog-webstorm-02.jpg)\n\n### 3、之前如果通过其他方式注册的，可以在 ***WebStorm*** 中的 ***Helep*** 选项下 ***Register...*** 选项中进行重新注册。\n\n![图3](http://ol320xopj.bkt.clouddn.com/blog-webstorm-03.jpg)\n\n### 4、在注册界面选择 ***License server*** 授权服务器，填写 ***http://127.0.0.1:41017***,然后点击 “Activate” ,如下图\n![图4](http://ol320xopj.bkt.clouddn.com/blog-webstorm-04.jpg)\n","source":"_posts/WebStorm、PhpStorm搭建本地授权服务.md","raw":"---\ntitle: WebStorm搭建本地授权服务\ndate: 2017-02-09 08:55:44\ntags: [WebStorm,PhpStorm,开发工具]\ncategories: 开发工具\n---\n> ### 本地搭建各种storm License Server ,建立自己的本地授权服务器。告别那些恶心的注册码。\n\n## 适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\n### 1、下载下面的文件\n<!--more-->\n#### 链接地址：\n http://ol31uv24o.bkt.clouddn.com/IDEALicenseServer.zip\n### 2、解压文件，找到自己的操作版本。\n\n以下使用windows64位系统做示例。\n找到![图1](http://ol320xopj.bkt.clouddn.com/blog-webstorm-01.jpg)\n\n双击运行 ***IntelliJIDEALicenseServer_windows_amd64.exe***\n\n![图2](http://ol320xopj.bkt.clouddn.com/blog-webstorm-02.jpg)\n\n### 3、之前如果通过其他方式注册的，可以在 ***WebStorm*** 中的 ***Helep*** 选项下 ***Register...*** 选项中进行重新注册。\n\n![图3](http://ol320xopj.bkt.clouddn.com/blog-webstorm-03.jpg)\n\n### 4、在注册界面选择 ***License server*** 授权服务器，填写 ***http://127.0.0.1:41017***,然后点击 “Activate” ,如下图\n![图4](http://ol320xopj.bkt.clouddn.com/blog-webstorm-04.jpg)\n","slug":"WebStorm、PhpStorm搭建本地授权服务","published":1,"updated":"2018-11-19T02:26:47.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4af000wyeh7o1t7c2aw","content":"<blockquote>\n<h3 id=\"本地搭建各种storm-License-Server-建立自己的本地授权服务器。告别那些恶心的注册码。\"><a href=\"#本地搭建各种storm-License-Server-建立自己的本地授权服务器。告别那些恶心的注册码。\" class=\"headerlink\" title=\"本地搭建各种storm License Server ,建立自己的本地授权服务器。告别那些恶心的注册码。\"></a>本地搭建各种storm License Server ,建立自己的本地授权服务器。告别那些恶心的注册码。</h3></blockquote>\n<h2 id=\"适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\"><a href=\"#适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\" class=\"headerlink\" title=\"适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\"></a>适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。</h2><h3 id=\"1、下载下面的文件\"><a href=\"#1、下载下面的文件\" class=\"headerlink\" title=\"1、下载下面的文件\"></a>1、下载下面的文件</h3><a id=\"more\"></a>\n<h4 id=\"链接地址：\"><a href=\"#链接地址：\" class=\"headerlink\" title=\"链接地址：\"></a>链接地址：</h4><p> <a href=\"http://ol31uv24o.bkt.clouddn.com/IDEALicenseServer.zip\" target=\"_blank\" rel=\"noopener\">http://ol31uv24o.bkt.clouddn.com/IDEALicenseServer.zip</a></p>\n<h3 id=\"2、解压文件，找到自己的操作版本。\"><a href=\"#2、解压文件，找到自己的操作版本。\" class=\"headerlink\" title=\"2、解压文件，找到自己的操作版本。\"></a>2、解压文件，找到自己的操作版本。</h3><p>以下使用windows64位系统做示例。<br>找到<img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-01.jpg\" alt=\"图1\"></p>\n<p>双击运行 <strong><em>IntelliJIDEALicenseServer_windows_amd64.exe</em></strong></p>\n<p><img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-02.jpg\" alt=\"图2\"></p>\n<h3 id=\"3、之前如果通过其他方式注册的，可以在-WebStorm-中的-Helep-选项下-Register…-选项中进行重新注册。\"><a href=\"#3、之前如果通过其他方式注册的，可以在-WebStorm-中的-Helep-选项下-Register…-选项中进行重新注册。\" class=\"headerlink\" title=\"3、之前如果通过其他方式注册的，可以在 WebStorm 中的 Helep 选项下 Register… 选项中进行重新注册。\"></a>3、之前如果通过其他方式注册的，可以在 <strong><em>WebStorm</em></strong> 中的 <strong><em>Helep</em></strong> 选项下 <strong><em>Register…</em></strong> 选项中进行重新注册。</h3><p><img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-03.jpg\" alt=\"图3\"></p>\n<h3 id=\"4、在注册界面选择-License-server-授权服务器，填写-http-127-0-0-1-41017-然后点击-“Activate”-如下图\"><a href=\"#4、在注册界面选择-License-server-授权服务器，填写-http-127-0-0-1-41017-然后点击-“Activate”-如下图\" class=\"headerlink\" title=\"4、在注册界面选择 License server 授权服务器，填写 http://127.0.0.1:41017,然后点击 “Activate” ,如下图\"></a>4、在注册界面选择 <strong><em>License server</em></strong> 授权服务器，填写 <strong><em><a href=\"http://127.0.0.1:41017\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:41017</a></em></strong>,然后点击 “Activate” ,如下图</h3><p><img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-04.jpg\" alt=\"图4\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h3 id=\"本地搭建各种storm-License-Server-建立自己的本地授权服务器。告别那些恶心的注册码。\"><a href=\"#本地搭建各种storm-License-Server-建立自己的本地授权服务器。告别那些恶心的注册码。\" class=\"headerlink\" title=\"本地搭建各种storm License Server ,建立自己的本地授权服务器。告别那些恶心的注册码。\"></a>本地搭建各种storm License Server ,建立自己的本地授权服务器。告别那些恶心的注册码。</h3></blockquote>\n<h2 id=\"适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\"><a href=\"#适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\" class=\"headerlink\" title=\"适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。\"></a>适用情况：理论上支持所有Jetbrains产品，截止到目前所有版本都可正常激活。</h2><h3 id=\"1、下载下面的文件\"><a href=\"#1、下载下面的文件\" class=\"headerlink\" title=\"1、下载下面的文件\"></a>1、下载下面的文件</h3>","more":"<h4 id=\"链接地址：\"><a href=\"#链接地址：\" class=\"headerlink\" title=\"链接地址：\"></a>链接地址：</h4><p> <a href=\"http://ol31uv24o.bkt.clouddn.com/IDEALicenseServer.zip\" target=\"_blank\" rel=\"noopener\">http://ol31uv24o.bkt.clouddn.com/IDEALicenseServer.zip</a></p>\n<h3 id=\"2、解压文件，找到自己的操作版本。\"><a href=\"#2、解压文件，找到自己的操作版本。\" class=\"headerlink\" title=\"2、解压文件，找到自己的操作版本。\"></a>2、解压文件，找到自己的操作版本。</h3><p>以下使用windows64位系统做示例。<br>找到<img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-01.jpg\" alt=\"图1\"></p>\n<p>双击运行 <strong><em>IntelliJIDEALicenseServer_windows_amd64.exe</em></strong></p>\n<p><img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-02.jpg\" alt=\"图2\"></p>\n<h3 id=\"3、之前如果通过其他方式注册的，可以在-WebStorm-中的-Helep-选项下-Register…-选项中进行重新注册。\"><a href=\"#3、之前如果通过其他方式注册的，可以在-WebStorm-中的-Helep-选项下-Register…-选项中进行重新注册。\" class=\"headerlink\" title=\"3、之前如果通过其他方式注册的，可以在 WebStorm 中的 Helep 选项下 Register… 选项中进行重新注册。\"></a>3、之前如果通过其他方式注册的，可以在 <strong><em>WebStorm</em></strong> 中的 <strong><em>Helep</em></strong> 选项下 <strong><em>Register…</em></strong> 选项中进行重新注册。</h3><p><img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-03.jpg\" alt=\"图3\"></p>\n<h3 id=\"4、在注册界面选择-License-server-授权服务器，填写-http-127-0-0-1-41017-然后点击-“Activate”-如下图\"><a href=\"#4、在注册界面选择-License-server-授权服务器，填写-http-127-0-0-1-41017-然后点击-“Activate”-如下图\" class=\"headerlink\" title=\"4、在注册界面选择 License server 授权服务器，填写 http://127.0.0.1:41017,然后点击 “Activate” ,如下图\"></a>4、在注册界面选择 <strong><em>License server</em></strong> 授权服务器，填写 <strong><em><a href=\"http://127.0.0.1:41017\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:41017</a></em></strong>,然后点击 “Activate” ,如下图</h3><p><img src=\"http://ol320xopj.bkt.clouddn.com/blog-webstorm-04.jpg\" alt=\"图4\"></p>"},{"title":"Homebrew安装","date":"2018-11-19T02:33:42.000Z","_content":"## Homebrew安装\n\n\b[Homebrew官网](https://brew.sh/index_zh-cn)\n\n在命令行\b工具中执行以下命令\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n## 疑难问题\n\n**macOS 更新到 mojove \b安装 Homebrew 时，你会发现按着以上的操作安装不成功**\n\n**报错如下：**\n\n![image](https://mdstatic.netlify.com/blog/%E5%AE%89%E8%A3%85brew%E6%8A%A5%E9%94%99-Command%20Line%20Tools%20(macOS%20Mojave%20version%2010.14).png)\n\n**解决\b办法：**\n\n安装 `Command Line Tools (macOS Mojave version 10.14)`\n\n[Command Line Tools (macOS Mojave version 10.14)](https://download.developer.apple.com/Developer_Tools/Command_Line_Tools_macOS_10.14_for_Xcode_10.1/Command_Line_Tools_macOS_10.14_for_Xcode_10.1.dmg)\n\n> \b以上链接如果失效请尝试登录 [苹果开发者网站](https://developer.apple.com/download/more/) 进行下载\n\n![image](https://mdstatic.netlify.com/blog/developer网站.png)\n","source":"_posts/brew安装.md","raw":"---\ntitle: Homebrew安装\ndate: 2018-11-19 10:33:42\ntags: [macOS,mojove,brew]\ncategories: 工具\n---\n## Homebrew安装\n\n\b[Homebrew官网](https://brew.sh/index_zh-cn)\n\n在命令行\b工具中执行以下命令\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n## 疑难问题\n\n**macOS 更新到 mojove \b安装 Homebrew 时，你会发现按着以上的操作安装不成功**\n\n**报错如下：**\n\n![image](https://mdstatic.netlify.com/blog/%E5%AE%89%E8%A3%85brew%E6%8A%A5%E9%94%99-Command%20Line%20Tools%20(macOS%20Mojave%20version%2010.14).png)\n\n**解决\b办法：**\n\n安装 `Command Line Tools (macOS Mojave version 10.14)`\n\n[Command Line Tools (macOS Mojave version 10.14)](https://download.developer.apple.com/Developer_Tools/Command_Line_Tools_macOS_10.14_for_Xcode_10.1/Command_Line_Tools_macOS_10.14_for_Xcode_10.1.dmg)\n\n> \b以上链接如果失效请尝试登录 [苹果开发者网站](https://developer.apple.com/download/more/) 进行下载\n\n![image](https://mdstatic.netlify.com/blog/developer网站.png)\n","slug":"brew安装","published":1,"updated":"2018-11-19T07:00:28.634Z","_id":"cjonqk4ag000yyeh763xhl0ok","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Homebrew安装\"><a href=\"#Homebrew安装\" class=\"headerlink\" title=\"Homebrew安装\"></a>Homebrew安装</h2><p>\b<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">Homebrew官网</a></p>\n<p>在命令行\b工具中执行以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"疑难问题\"><a href=\"#疑难问题\" class=\"headerlink\" title=\"疑难问题\"></a>疑难问题</h2><p><strong>macOS 更新到 mojove \b安装 Homebrew 时，你会发现按着以上的操作安装不成功</strong></p>\n<p><strong>报错如下：</strong></p>\n<p><img src=\"https://mdstatic.netlify.com/blog/%E5%AE%89%E8%A3%85brew%E6%8A%A5%E9%94%99-Command%20Line%20Tools%20(macOS%20Mojave%20version%2010.14\" alt=\"image\">.png)</p>\n<p><strong>解决\b办法：</strong></p>\n<p>安装 <code>Command Line Tools (macOS Mojave version 10.14)</code></p>\n<p><a href=\"https://download.developer.apple.com/Developer_Tools/Command_Line_Tools_macOS_10.14_for_Xcode_10.1/Command_Line_Tools_macOS_10.14_for_Xcode_10.1.dmg\" target=\"_blank\" rel=\"noopener\">Command Line Tools (macOS Mojave version 10.14)</a></p>\n<blockquote>\n<p>\b以上链接如果失效请尝试登录 <a href=\"https://developer.apple.com/download/more/\" target=\"_blank\" rel=\"noopener\">苹果开发者网站</a> 进行下载</p>\n</blockquote>\n<p><img src=\"https://mdstatic.netlify.com/blog/developer网站.png\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Homebrew安装\"><a href=\"#Homebrew安装\" class=\"headerlink\" title=\"Homebrew安装\"></a>Homebrew安装</h2><p>\b<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">Homebrew官网</a></p>\n<p>在命令行\b工具中执行以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"疑难问题\"><a href=\"#疑难问题\" class=\"headerlink\" title=\"疑难问题\"></a>疑难问题</h2><p><strong>macOS 更新到 mojove \b安装 Homebrew 时，你会发现按着以上的操作安装不成功</strong></p>\n<p><strong>报错如下：</strong></p>\n<p><img src=\"https://mdstatic.netlify.com/blog/%E5%AE%89%E8%A3%85brew%E6%8A%A5%E9%94%99-Command%20Line%20Tools%20(macOS%20Mojave%20version%2010.14\" alt=\"image\">.png)</p>\n<p><strong>解决\b办法：</strong></p>\n<p>安装 <code>Command Line Tools (macOS Mojave version 10.14)</code></p>\n<p><a href=\"https://download.developer.apple.com/Developer_Tools/Command_Line_Tools_macOS_10.14_for_Xcode_10.1/Command_Line_Tools_macOS_10.14_for_Xcode_10.1.dmg\" target=\"_blank\" rel=\"noopener\">Command Line Tools (macOS Mojave version 10.14)</a></p>\n<blockquote>\n<p>\b以上链接如果失效请尝试登录 <a href=\"https://developer.apple.com/download/more/\" target=\"_blank\" rel=\"noopener\">苹果开发者网站</a> 进行下载</p>\n</blockquote>\n<p><img src=\"https://mdstatic.netlify.com/blog/developer网站.png\" alt=\"image\"></p>\n"},{"title":"hexo安装","date":"2017-04-30T09:25:31.000Z","_content":"## 下载hexo脚手架工具\n```\nnpm install hexo-cli -g\n```\n> 下载后可以在命令行下生成一个全局命令`hexo`\n<!--more-->\n## 初始化博客\n```\nhexo init <博客文件夹名>\n```\n<!--more-->\n## 进入博客文件夹\n```\ncd <博客文件夹名>\n```\n## 启动hexo本地服务\n```\nhexo server\n```\n> 默认端口号为4000，如果端口被占用可以使用\n\n```\nhexo server -p <端口号>\n```\n","source":"_posts/hexo安装.md","raw":"---\ntitle: hexo安装\ndate: 2017-04-30 17:25:31\ntags: [hexo,装逼利器]\ncategories: HEXO\n---\n## 下载hexo脚手架工具\n```\nnpm install hexo-cli -g\n```\n> 下载后可以在命令行下生成一个全局命令`hexo`\n<!--more-->\n## 初始化博客\n```\nhexo init <博客文件夹名>\n```\n<!--more-->\n## 进入博客文件夹\n```\ncd <博客文件夹名>\n```\n## 启动hexo本地服务\n```\nhexo server\n```\n> 默认端口号为4000，如果端口被占用可以使用\n\n```\nhexo server -p <端口号>\n```\n","slug":"hexo安装","published":1,"updated":"2018-11-19T02:26:47.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ah0012yeh7xdwmk7og","content":"<h2 id=\"下载hexo脚手架工具\"><a href=\"#下载hexo脚手架工具\" class=\"headerlink\" title=\"下载hexo脚手架工具\"></a>下载hexo脚手架工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下载后可以在命令行下生成一个全局命令<code>hexo</code><br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"初始化博客\"><a href=\"#初始化博客\" class=\"headerlink\" title=\"初始化博客\"></a>初始化博客</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;博客文件夹名&gt;</span><br></pre></td></tr></table></figure>\n<!--more-->\n<h2 id=\"进入博客文件夹\"><a href=\"#进入博客文件夹\" class=\"headerlink\" title=\"进入博客文件夹\"></a>进入博客文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;博客文件夹名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动hexo本地服务\"><a href=\"#启动hexo本地服务\" class=\"headerlink\" title=\"启动hexo本地服务\"></a>启动hexo本地服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认端口号为4000，如果端口被占用可以使用</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server -p &lt;端口号&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"下载hexo脚手架工具\"><a href=\"#下载hexo脚手架工具\" class=\"headerlink\" title=\"下载hexo脚手架工具\"></a>下载hexo脚手架工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下载后可以在命令行下生成一个全局命令<code>hexo</code><br>","more":"</p>\n</blockquote>\n<h2 id=\"初始化博客\"><a href=\"#初始化博客\" class=\"headerlink\" title=\"初始化博客\"></a>初始化博客</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;博客文件夹名&gt;</span><br></pre></td></tr></table></figure>\n<!--more-->\n<h2 id=\"进入博客文件夹\"><a href=\"#进入博客文件夹\" class=\"headerlink\" title=\"进入博客文件夹\"></a>进入博客文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;博客文件夹名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动hexo本地服务\"><a href=\"#启动hexo本地服务\" class=\"headerlink\" title=\"启动hexo本地服务\"></a>启动hexo本地服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认端口号为4000，如果端口被占用可以使用</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server -p &lt;端口号&gt;</span><br></pre></td></tr></table></figure>"},{"title":"jsonp跨域","date":"2017-04-23T04:47:33.000Z","_content":"## 两个网站要共享数据\njsonp 为跨域的最常见的手段（不能发送数据，只支持get请求）\najax会有限制问题，会出现不允许访问。\njsonp,cros,postMessage(iframe),websocket;\n- jsonp:scritp 不会导致跨域问题，我的网站引用你的网站的js,img,css,不用img和css的原因是默认会被转成图片和样式，img常用作记录访问页面的次数，统计请求这样图片的次数。\n> jsonp是通过src跨域的，并且只支持get请求。\n<!--more-->\n> 由于src没有访问限制，可以通过src引用其他网站的数据（此网站必须通过这样的接口）\n- cros 让被访问的服务器 允许跨域即可 （需要服务端支持）\n- iftame 跨域 html5 提供的API\n- websocket html5 提供的API\n## jsonp 的原理\n- 1.在当前js中声明一个全局函数\nfunction fn(){}\n- 2.动态创建script标签\n通过script 标签引用其他网址并且将这个全局函数名字传递给后台\n\n```\n<script src =\"http://localhost:3000/getuser?callback=fn\">\n```\n- 3.后台返回函数执行\n`\nfn('{name:1}');\n`\n","source":"_posts/jsonp.md","raw":"---\ntitle: jsonp跨域\ndate: 2017-04-23 12:47:33\ntags: [node,js,jsonp]\ncategories: jsonp\n---\n## 两个网站要共享数据\njsonp 为跨域的最常见的手段（不能发送数据，只支持get请求）\najax会有限制问题，会出现不允许访问。\njsonp,cros,postMessage(iframe),websocket;\n- jsonp:scritp 不会导致跨域问题，我的网站引用你的网站的js,img,css,不用img和css的原因是默认会被转成图片和样式，img常用作记录访问页面的次数，统计请求这样图片的次数。\n> jsonp是通过src跨域的，并且只支持get请求。\n<!--more-->\n> 由于src没有访问限制，可以通过src引用其他网站的数据（此网站必须通过这样的接口）\n- cros 让被访问的服务器 允许跨域即可 （需要服务端支持）\n- iftame 跨域 html5 提供的API\n- websocket html5 提供的API\n## jsonp 的原理\n- 1.在当前js中声明一个全局函数\nfunction fn(){}\n- 2.动态创建script标签\n通过script 标签引用其他网址并且将这个全局函数名字传递给后台\n\n```\n<script src =\"http://localhost:3000/getuser?callback=fn\">\n```\n- 3.后台返回函数执行\n`\nfn('{name:1}');\n`\n","slug":"jsonp","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ai0014yeh7nn58njvk","content":"<h2 id=\"两个网站要共享数据\"><a href=\"#两个网站要共享数据\" class=\"headerlink\" title=\"两个网站要共享数据\"></a>两个网站要共享数据</h2><p>jsonp 为跨域的最常见的手段（不能发送数据，只支持get请求）<br>ajax会有限制问题，会出现不允许访问。<br>jsonp,cros,postMessage(iframe),websocket;</p>\n<ul>\n<li>jsonp:scritp 不会导致跨域问题，我的网站引用你的网站的js,img,css,不用img和css的原因是默认会被转成图片和样式，img常用作记录访问页面的次数，统计请求这样图片的次数。<blockquote>\n<p>jsonp是通过src跨域的，并且只支持get请求。</p>\n<a id=\"more\"></a>\n<p>由于src没有访问限制，可以通过src引用其他网站的数据（此网站必须通过这样的接口）</p>\n</blockquote>\n</li>\n<li>cros 让被访问的服务器 允许跨域即可 （需要服务端支持）</li>\n<li>iftame 跨域 html5 提供的API</li>\n<li>websocket html5 提供的API<h2 id=\"jsonp-的原理\"><a href=\"#jsonp-的原理\" class=\"headerlink\" title=\"jsonp 的原理\"></a>jsonp 的原理</h2></li>\n<li>1.在当前js中声明一个全局函数<br>function fn(){}</li>\n<li>2.动态创建script标签<br>通过script 标签引用其他网址并且将这个全局函数名字传递给后台</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src =&quot;http://localhost:3000/getuser?callback=fn&quot;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.后台返回函数执行<br><code>fn(&#39;{name:1}&#39;);</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"两个网站要共享数据\"><a href=\"#两个网站要共享数据\" class=\"headerlink\" title=\"两个网站要共享数据\"></a>两个网站要共享数据</h2><p>jsonp 为跨域的最常见的手段（不能发送数据，只支持get请求）<br>ajax会有限制问题，会出现不允许访问。<br>jsonp,cros,postMessage(iframe),websocket;</p>\n<ul>\n<li>jsonp:scritp 不会导致跨域问题，我的网站引用你的网站的js,img,css,不用img和css的原因是默认会被转成图片和样式，img常用作记录访问页面的次数，统计请求这样图片的次数。<blockquote>\n<p>jsonp是通过src跨域的，并且只支持get请求。</p>","more":"<p>由于src没有访问限制，可以通过src引用其他网站的数据（此网站必须通过这样的接口）</p>\n</blockquote>\n</li>\n<li>cros 让被访问的服务器 允许跨域即可 （需要服务端支持）</li>\n<li>iftame 跨域 html5 提供的API</li>\n<li>websocket html5 提供的API<h2 id=\"jsonp-的原理\"><a href=\"#jsonp-的原理\" class=\"headerlink\" title=\"jsonp 的原理\"></a>jsonp 的原理</h2></li>\n<li>1.在当前js中声明一个全局函数<br>function fn(){}</li>\n<li>2.动态创建script标签<br>通过script 标签引用其他网址并且将这个全局函数名字传递给后台</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src =&quot;http://localhost:3000/getuser?callback=fn&quot;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.后台返回函数执行<br><code>fn(&#39;{name:1}&#39;);</code></li>\n</ul>"},{"title":"node-EventEmitter方法","date":"2017-04-24T14:48:38.000Z","_content":"## EventEmitter方法\n- `addListener(eventName,listener)` 对指定事件绑定监听\n\n- `on(enentName,listener)` 对指定事件绑定监听同 `addListener(eventName,listener)`\n\n- `once(eventName,listener)` 对指定事件仅绑定一次\n<!--more-->\n- `removeListener(eventName，listener)` 解除绑定监听\n\n- `removeAllListener(eventName)` 解除所有绑定的监听事件\n\n- `emit(eventName,args)` 触发事件第一个是事件类型 args是传入的参数\n","source":"_posts/node-EventEmitter方法.md","raw":"---\ntitle: node-EventEmitter方法\ndate: 2017-04-24 22:48:38\ntags: [node,js,nodeAPI]\ncategories: node\n---\n## EventEmitter方法\n- `addListener(eventName,listener)` 对指定事件绑定监听\n\n- `on(enentName,listener)` 对指定事件绑定监听同 `addListener(eventName,listener)`\n\n- `once(eventName,listener)` 对指定事件仅绑定一次\n<!--more-->\n- `removeListener(eventName，listener)` 解除绑定监听\n\n- `removeAllListener(eventName)` 解除所有绑定的监听事件\n\n- `emit(eventName,args)` 触发事件第一个是事件类型 args是传入的参数\n","slug":"node-EventEmitter方法","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4aj0017yeh7gtfkwyn3","content":"<h2 id=\"EventEmitter方法\"><a href=\"#EventEmitter方法\" class=\"headerlink\" title=\"EventEmitter方法\"></a>EventEmitter方法</h2><ul>\n<li><p><code>addListener(eventName,listener)</code> 对指定事件绑定监听</p>\n</li>\n<li><p><code>on(enentName,listener)</code> 对指定事件绑定监听同 <code>addListener(eventName,listener)</code></p>\n</li>\n<li><p><code>once(eventName,listener)</code> 对指定事件仅绑定一次</p>\n<a id=\"more\"></a></li>\n<li><p><code>removeListener(eventName，listener)</code> 解除绑定监听</p>\n</li>\n<li><p><code>removeAllListener(eventName)</code> 解除所有绑定的监听事件</p>\n</li>\n<li><p><code>emit(eventName,args)</code> 触发事件第一个是事件类型 args是传入的参数</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"EventEmitter方法\"><a href=\"#EventEmitter方法\" class=\"headerlink\" title=\"EventEmitter方法\"></a>EventEmitter方法</h2><ul>\n<li><p><code>addListener(eventName,listener)</code> 对指定事件绑定监听</p>\n</li>\n<li><p><code>on(enentName,listener)</code> 对指定事件绑定监听同 <code>addListener(eventName,listener)</code></p>\n</li>\n<li><p><code>once(eventName,listener)</code> 对指定事件仅绑定一次</p>","more":"</li>\n<li><p><code>removeListener(eventName，listener)</code> 解除绑定监听</p>\n</li>\n<li><p><code>removeAllListener(eventName)</code> 解除所有绑定的监听事件</p>\n</li>\n<li><p><code>emit(eventName,args)</code> 触发事件第一个是事件类型 args是传入的参数</p>\n</li>\n</ul>"},{"title":"node发布与订阅-观察者模式","date":"2017-04-30T08:01:00.000Z","_content":"## 发布订阅模式\n- 一种一对多的关系，订阅事件和发布事件\n- {'水开了':['泡面','洗澡']}\n\n## 绑定事件 on\n维护一个一对多的关系{\"被监听的事件名\":[事件1,事件2,事件3]}\n<!--more-->\n## 发射事件 emit\n当触发事件后会将绑定的事件依次触发\n通过发射的事件名，将数组里面的参数依次执行\n","source":"_posts/node发布与订阅.md","raw":"---\ntitle: node发布与订阅-观察者模式\ndate: 2017-04-30 16:01:00\ntags: [node,node基础]\ncategories: node\n---\n## 发布订阅模式\n- 一种一对多的关系，订阅事件和发布事件\n- {'水开了':['泡面','洗澡']}\n\n## 绑定事件 on\n维护一个一对多的关系{\"被监听的事件名\":[事件1,事件2,事件3]}\n<!--more-->\n## 发射事件 emit\n当触发事件后会将绑定的事件依次触发\n通过发射的事件名，将数组里面的参数依次执行\n","slug":"node发布与订阅","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ak0019yeh7sg8mc8t0","content":"<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><ul>\n<li>一种一对多的关系，订阅事件和发布事件</li>\n<li>{‘水开了’:[‘泡面’,’洗澡’]}</li>\n</ul>\n<h2 id=\"绑定事件-on\"><a href=\"#绑定事件-on\" class=\"headerlink\" title=\"绑定事件 on\"></a>绑定事件 on</h2><p>维护一个一对多的关系{“被监听的事件名”:[事件1,事件2,事件3]}<br><a id=\"more\"></a></p>\n<h2 id=\"发射事件-emit\"><a href=\"#发射事件-emit\" class=\"headerlink\" title=\"发射事件 emit\"></a>发射事件 emit</h2><p>当触发事件后会将绑定的事件依次触发<br>通过发射的事件名，将数组里面的参数依次执行</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><ul>\n<li>一种一对多的关系，订阅事件和发布事件</li>\n<li>{‘水开了’:[‘泡面’,’洗澡’]}</li>\n</ul>\n<h2 id=\"绑定事件-on\"><a href=\"#绑定事件-on\" class=\"headerlink\" title=\"绑定事件 on\"></a>绑定事件 on</h2><p>维护一个一对多的关系{“被监听的事件名”:[事件1,事件2,事件3]}<br>","more":"</p>\n<h2 id=\"发射事件-emit\"><a href=\"#发射事件-emit\" class=\"headerlink\" title=\"发射事件 emit\"></a>发射事件 emit</h2><p>当触发事件后会将绑定的事件依次触发<br>通过发射的事件名，将数组里面的参数依次执行</p>"},{"title":"node同步与异步","date":"2017-04-30T01:46:51.000Z","_content":"## 同步与异步\nnode中异步包括：\n- setTimeout\n- callback\n- process\n- setImmediate\n- setInterval\n<!--more-->\n## 阻塞非阻塞\n针对的内核，厨师，如果厨师不释放掉服务员，主线程不可能异步\n- 非阻塞是异步的前置条件\n\n> 主线是单线程的，内核是多线程\n\n## 单线程&多线程\n- 一个个发短信\n- 群发短信多线程\n\n> 进程包括线程，在node中一个进程只能包括一个线程，node可以多开多个线程，开多个进程（子进程）\n\n## 事件循环\n- 事件驱动\n","source":"_posts/node同步与异步.md","raw":"---\ntitle: node同步与异步\ndate: 2017-04-30 09:46:51\ntags: [node]\ncategories: node\n---\n## 同步与异步\nnode中异步包括：\n- setTimeout\n- callback\n- process\n- setImmediate\n- setInterval\n<!--more-->\n## 阻塞非阻塞\n针对的内核，厨师，如果厨师不释放掉服务员，主线程不可能异步\n- 非阻塞是异步的前置条件\n\n> 主线是单线程的，内核是多线程\n\n## 单线程&多线程\n- 一个个发短信\n- 群发短信多线程\n\n> 进程包括线程，在node中一个进程只能包括一个线程，node可以多开多个线程，开多个进程（子进程）\n\n## 事件循环\n- 事件驱动\n","slug":"node同步与异步","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4al001dyeh7djjwfhkp","content":"<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>node中异步包括：</p>\n<ul>\n<li>setTimeout</li>\n<li>callback</li>\n<li>process</li>\n<li>setImmediate</li>\n<li>setInterval<a id=\"more\"></a>\n<h2 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h2>针对的内核，厨师，如果厨师不释放掉服务员，主线程不可能异步</li>\n<li>非阻塞是异步的前置条件</li>\n</ul>\n<blockquote>\n<p>主线是单线程的，内核是多线程</p>\n</blockquote>\n<h2 id=\"单线程-amp-多线程\"><a href=\"#单线程-amp-多线程\" class=\"headerlink\" title=\"单线程&amp;多线程\"></a>单线程&amp;多线程</h2><ul>\n<li>一个个发短信</li>\n<li>群发短信多线程</li>\n</ul>\n<blockquote>\n<p>进程包括线程，在node中一个进程只能包括一个线程，node可以多开多个线程，开多个进程（子进程）</p>\n</blockquote>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><ul>\n<li>事件驱动</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>node中异步包括：</p>\n<ul>\n<li>setTimeout</li>\n<li>callback</li>\n<li>process</li>\n<li>setImmediate</li>\n<li>setInterval","more":"<h2 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h2>针对的内核，厨师，如果厨师不释放掉服务员，主线程不可能异步</li>\n<li>非阻塞是异步的前置条件</li>\n</ul>\n<blockquote>\n<p>主线是单线程的，内核是多线程</p>\n</blockquote>\n<h2 id=\"单线程-amp-多线程\"><a href=\"#单线程-amp-多线程\" class=\"headerlink\" title=\"单线程&amp;多线程\"></a>单线程&amp;多线程</h2><ul>\n<li>一个个发短信</li>\n<li>群发短信多线程</li>\n</ul>\n<blockquote>\n<p>进程包括线程，在node中一个进程只能包括一个线程，node可以多开多个线程，开多个进程（子进程）</p>\n</blockquote>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><ul>\n<li>事件驱动</li>\n</ul>"},{"title":"node核心模块","date":"2017-04-30T04:37:18.000Z","_content":"## 核心模块\n引用核心模块不需要安装，也不需要使用./或者../来引入\n\n### util模块\nutil 最主要的功能是继承，判断类型\n>js中的继承call，原型继承，new，extends\n- Obj.create() es5的继承 只继承公有\n```\nSun.prototype = Obj.create(Parent.prototype)\n```\n<!--more-->\n- Object.setPrototypeOf() es6只继承公有\n```\nObject.setPrototypeOf(Sun.prototype,Parent.prototype);\n```\n原理Sun.prototype.__proto__ = Parent.prototype\n- call 只继承私有属性\n- Sun.prototype = new Parent() 可以继承公有和私有的方法 缺点不能传递参数\n- Sun.prototype.__proto__ = Parent.prototype 通过原型链连接父亲的原型\n\n- util.inherits(Child,Parent);   //node中的继承（继承公有属性）\n\n### events模块\n常用的包括 on，emit，once，removeListener，removeAllListener\n","source":"_posts/node核心模块.md","raw":"---\ntitle: node核心模块\ndate: 2017-04-30 12:37:18\ntags: [node，node基础]\ncategories: node\n---\n## 核心模块\n引用核心模块不需要安装，也不需要使用./或者../来引入\n\n### util模块\nutil 最主要的功能是继承，判断类型\n>js中的继承call，原型继承，new，extends\n- Obj.create() es5的继承 只继承公有\n```\nSun.prototype = Obj.create(Parent.prototype)\n```\n<!--more-->\n- Object.setPrototypeOf() es6只继承公有\n```\nObject.setPrototypeOf(Sun.prototype,Parent.prototype);\n```\n原理Sun.prototype.__proto__ = Parent.prototype\n- call 只继承私有属性\n- Sun.prototype = new Parent() 可以继承公有和私有的方法 缺点不能传递参数\n- Sun.prototype.__proto__ = Parent.prototype 通过原型链连接父亲的原型\n\n- util.inherits(Child,Parent);   //node中的继承（继承公有属性）\n\n### events模块\n常用的包括 on，emit，once，removeListener，removeAllListener\n","slug":"node核心模块","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4an001gyeh7fnxg8oiu","content":"<h2 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h2><p>引用核心模块不需要安装，也不需要使用./或者../来引入</p>\n<h3 id=\"util模块\"><a href=\"#util模块\" class=\"headerlink\" title=\"util模块\"></a>util模块</h3><p>util 最主要的功能是继承，判断类型</p>\n<blockquote>\n<p>js中的继承call，原型继承，new，extends</p>\n<ul>\n<li>Obj.create() es5的继承 只继承公有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sun.prototype = Obj.create(Parent.prototype)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>Object.setPrototypeOf() es6只继承公有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(Sun.prototype,Parent.prototype);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>原理Sun.prototype.<strong>proto</strong> = Parent.prototype</p>\n<ul>\n<li>call 只继承私有属性</li>\n<li>Sun.prototype = new Parent() 可以继承公有和私有的方法 缺点不能传递参数</li>\n<li><p>Sun.prototype.<strong>proto</strong> = Parent.prototype 通过原型链连接父亲的原型</p>\n</li>\n<li><p>util.inherits(Child,Parent);   //node中的继承（继承公有属性）</p>\n</li>\n</ul>\n<h3 id=\"events模块\"><a href=\"#events模块\" class=\"headerlink\" title=\"events模块\"></a>events模块</h3><p>常用的包括 on，emit，once，removeListener，removeAllListener</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h2><p>引用核心模块不需要安装，也不需要使用./或者../来引入</p>\n<h3 id=\"util模块\"><a href=\"#util模块\" class=\"headerlink\" title=\"util模块\"></a>util模块</h3><p>util 最主要的功能是继承，判断类型</p>\n<blockquote>\n<p>js中的继承call，原型继承，new，extends</p>\n<ul>\n<li>Obj.create() es5的继承 只继承公有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sun.prototype = Obj.create(Parent.prototype)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>","more":"<ul>\n<li>Object.setPrototypeOf() es6只继承公有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.setPrototypeOf(Sun.prototype,Parent.prototype);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>原理Sun.prototype.<strong>proto</strong> = Parent.prototype</p>\n<ul>\n<li>call 只继承私有属性</li>\n<li>Sun.prototype = new Parent() 可以继承公有和私有的方法 缺点不能传递参数</li>\n<li><p>Sun.prototype.<strong>proto</strong> = Parent.prototype 通过原型链连接父亲的原型</p>\n</li>\n<li><p>util.inherits(Child,Parent);   //node中的继承（继承公有属性）</p>\n</li>\n</ul>\n<h3 id=\"events模块\"><a href=\"#events模块\" class=\"headerlink\" title=\"events模块\"></a>events模块</h3><p>常用的包括 on，emit，once，removeListener，removeAllListener</p>"},{"title":"Web 前端学习清单","date":"2018-03-20T14:07:33.000Z","_content":"\n## 前言\n> 以下仅代表个人对前端学习方面的一些整理及知识点梳理，具体学习方式方法，还需根据个人能力做出相应调整。\n\n前端技术栈体系相对庞杂，***从应用角度出发*** 列此清单方便大家少走弯路，也警示自己还有很多东西需要在进一步去理解。\n\n前端\b框架部分\b多描述 React 部分，Vue 及 Angular 部分希望大家补充。\n\n***[Web 前端学习脑图](http://naotu.baidu.com/file/1bb54c00d3c9e9ad54494e9d689d928d?token=deffab7e0f444f9c)***\n\n***[前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)***\n\n<!-- more -->\n\n## 好物推荐\n了解一下？\n- [印记中文](https://docschina.org/) --- \b印记中文出品，唯一与官方文档同步的中文文档\n- [百度脑图](http://naotu.baidu.com/) --- 便捷的思维工具\n- [bestof.js.org](https://bestof.js.org/) --- The best of JavaScript, HTML and CSS\n- [Awesomes](https://www.awesomes.cn/) --- Web前端开发资源库\n- [奇舞周刊](https://weekly.75team.com/) --- 汇聚前端精华\n\n## 基础篇\n坐好，准备发车！\n\n### 1. ES 5/6/7/8 ...\n基础要打好\n\n你懂的，具体怎么学习，这个应该是仁者见仁智者见智。\b推荐夯实\b并且及时更新对 ***数组和对象*** 这两部分处理及操作的方法。原因是\b业务\b开发场景中打交道最多的就是对数组及对象的操作。\n\n### 2. React / Vue / Angular\nWeb 前端开发中越来越成为必需品的非必需品\n\n- React \n\n    学习基本 API \b在项目中越来越熟练的应用起来\n    ***[阮一峰 React 系列（基于当时的 React 版本相对较低，应该比较官方文档）](http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html)***\n\n    ***[React 小书 (React 入门神器)](http://huziketang.com/books/react/)***\n\n    ***[React 开发规范 1.0 (项目中基本开发规范，还待完善)](https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/)***\n\n    1. 理解 React 组件化开发思想\n    2. 按着要求或者模仿已完成的页面功能进行\b开发\n    3. 组件模块化创建\n    4. 常用的生命周期函数 \n        常用: `componentWillMount`、`render`、`componentDidMount`\n\n        可能会\b接触: `componentWillUpdate`、`componentDidUpdate`、`componentWillUnmount`、`shouldComponentUpdate`、`componentWillReceiveProps`\n    5. 数据传递 `state`、`props`\n- Vue\n> 待补充，基本思路应该同上\n- Angular\n> 待补充，基本思路应该同上\n\n### 3. 框架(或库)相关\n项目中引入的一些常用工具或者插件应该有所了解及使用\n- React + Redux (\b注：以下内容如果项目中没有引入可以放一放)\n    - react-router / react-router-dom 基本使用，需要撸文档或者  README \n    - redux 相关教程，需要了解及其基本使用 \n    - react-redux 相关教程及使用 \n    - prop-types 相关文档及使用\n\n    总体思路：先看项目中用到的工具或者插件，查看相关文档，学以致用\n- Vue\n    > 待补充，基本思路应该同上\n- Angular\n    > 待补充，基本思路应该同上\n\n### 4. Css、Less、Sass、Stylus\n其实 css 会越来越 NB 的，\bcss 预编译器迟早药丸。\n注：以下内容如果项目中没有引入可以放一放\n\n- css 预编译器的基本使用 简单撸文档即可\n- class 命名 按着项目中相关规范进行\n- 基本样式编写应该基于 class 而不是 id  \n- flex \b基本应用 [flex 教程，这篇才是最棒的](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n- 对 important 以及内联样式尽量不使用\n- 尽量用最少的 css 代码实现 UI 图需要展示的效果\n\n留在最后：不仅仅简单的还原 UI 图，还应该与需求及 UI 及时沟通，确定他们想要实现的效果\n\n### 5. 查看项目文件\n\n- 先看项目的描述文件，即 README，了解项目\b开发相关及项目启动命令\n- 再看项目入口文件，\bREADME 文件一般都有描述，了解整个项目的\b目录结构及组件\b依赖关系\n\n### 6. NPM 基本使用\n\n\bnpm 的安装 ***[前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)***\n\nnpm\b 的使用\b按着项目中 README 文件\b描述操作即可\n\n\b\b推荐\b以下常用命令\n```\n// 由于国内网络情况，推荐\b将 npm 源切换至淘宝镜像\nnpm config set registry https://registry.npm.taobao.org \n\n// 项目依赖安装\nnpm install \n// 简写\nnpm i \n\n// \b将 xxx \b安装到项目的基本依赖\nnpm install xxx --save \n// 简写\nnpm i -S xxx \n\n// 将 xxx \b安装到项目的开发依赖\nnpm install xxx --save-dev \n// 简写\nnpm i -D xxx \n\n// \b将 xxx \b从项目的基本依赖中移除\nnpm uninstall xxx --save \n// 简写\nnpm uninstall xxx -S\n\n// \b将 xxx \b从项目的开发依赖中移除\nnpm uninstall xxx --save-dev\n// 简写\nnpm uninstall xxx -D\n\n// 启动相关命令 其中的 xxx 代指 package.json 文件中 script 对象中的 key 值 \b\nnpm run xxx\n```\n\n如果感兴趣，也可以了解一下 nrm (npm 源快速切换工具)\n\n### 7. \bGit 基本使用\n\ngit 的安装 ***[前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)***\n\n\b\b推荐\b以下常用命令\n```\n// 代码克隆 将代码从 http://xxxx 地址克隆到本地\ngit clone http://xxxx \n// 代码拉取\ngit pull\n\n// 代码\b添加到本地\ngit add .\n\n// 代码提交\ngit commit -m '本次提交描述信息'\n\n// 将代码推送到 git 服务器\ngit push\n```\n\n### 8. DevTools 的基本使用\n即 GoogleChrome 开发者工具\n\n- Elements 查看元素及样式\n- Console 查看控制台信息\n- Sources \b\b\b对运行中的代码断点\b操作\n- Network 对运行中的代码进行数据\b查看及其他相关信息\n- Application 主要查看 LocalStorage、SessionStorage、Cookies 等其他信息\n\n更多使用方式 ***[点击查看](http://www.css88.com/doc/chrome-devtools/)***\n\n### 9. 编辑器调整\n推荐使用 VSCode\n\n推荐插件\n```\n// 编辑器文件图标\nVSCode Great Icons\n\n// \b好评率极高的代码\b格式化插件\nPrettier Now\n\n// react 开发效率插件 快速联想 \nJS JSX Snippets\n\n// 功能同上\nVS Code ES7 React/Redux/React-Native/JS snippets\n\n// 彩虹缩进\nIndent-Rainbow\n\n// 一款\b很骚气的主题\nOneDark Rain Coat\n\n// 强大的本地服务器\nLive Server\n```\n\n### 10. 了解网页在浏览器打开的大概过程？\n此阶段应该了解或已经了解了上边这个问题。还没有？加油🆙\n\n\n## 进阶篇\n\n学习前端也是一场修行，希望这些能帮到你。\n\n### 五花八门的各类插件\n拥抱新事物，走向新高度，开阔视野。\n有从众心理，用的人多的，不一定是最好的，但一定是最靠谱的！\n\n- 为什么要使用这些插件？\n    \n    这些插件存在的意义是解决业务开发场景中的痛点，解放开发者，把更多的时间及思考用在业务当中去，做出用户满意度更高的产品，以应对市场的变化。\n    从开发者角度来讲，减少造轮子的精力，\b也给自己更多的生活时间，何乐不为。\n    从项目本身来讲，选择适合的插件，能提高开发效率，也能提高产品的稳定性。因为大多的插件\b都已经经历过很多产品的验证，自然而然稳定性也是毋庸置疑，群众的眼睛是雪亮的嘛。\n    \n- 插件该如何选择？\n\n    个人认为应该从以下几点去进行分析：\n    1. 分析实际业务场景，到底需要那些功能，哪些功能在你的认知范围能能找到适合的插件去满足。\n    2. 分析插件的相关社区及维护人员是否积极，最简单的就是去 github 上看一看问题多少，活不活越，维护\b积极不积极。\n    3. 插件的版本号，是不是已经发布稳定版本，更新日志是不是有规律性。\n    4. 还有是否易用，\b比如文档是否丰富、API 是否简单易理解\n\n\t上边这么多条件都能满足，这款插件你不仅可以放心的使用，还可以研究其源码。\n\n- 插件该怎么应用？\n\n    拿到一款插件，\n    1. 看 README 文件\n    2. 对照 README 文件看相关 demo 代码\n    3. 运行 demo 代码，打断点看看这个插件都做\b了那些、都能做那些\n\n    如果\b经历了以上三点，你还是一脸懵逼，可以\b百度、Google此插件的相关教程或者问问周围的同事\b。\n    什么？周围的同事也是一脸懵逼？那我想说的是，这款插件不适合你们，请放弃...\n\n\n# 未完待续。。。","source":"_posts/前端学习清单.md","raw":"---\ntitle: Web 前端学习清单\ndate: 2018-03-20 22:07:33\ntags: [前端,基础]\ncategories: 初始\n---\n\n## 前言\n> 以下仅代表个人对前端学习方面的一些整理及知识点梳理，具体学习方式方法，还需根据个人能力做出相应调整。\n\n前端技术栈体系相对庞杂，***从应用角度出发*** 列此清单方便大家少走弯路，也警示自己还有很多东西需要在进一步去理解。\n\n前端\b框架部分\b多描述 React 部分，Vue 及 Angular 部分希望大家补充。\n\n***[Web 前端学习脑图](http://naotu.baidu.com/file/1bb54c00d3c9e9ad54494e9d689d928d?token=deffab7e0f444f9c)***\n\n***[前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)***\n\n<!-- more -->\n\n## 好物推荐\n了解一下？\n- [印记中文](https://docschina.org/) --- \b印记中文出品，唯一与官方文档同步的中文文档\n- [百度脑图](http://naotu.baidu.com/) --- 便捷的思维工具\n- [bestof.js.org](https://bestof.js.org/) --- The best of JavaScript, HTML and CSS\n- [Awesomes](https://www.awesomes.cn/) --- Web前端开发资源库\n- [奇舞周刊](https://weekly.75team.com/) --- 汇聚前端精华\n\n## 基础篇\n坐好，准备发车！\n\n### 1. ES 5/6/7/8 ...\n基础要打好\n\n你懂的，具体怎么学习，这个应该是仁者见仁智者见智。\b推荐夯实\b并且及时更新对 ***数组和对象*** 这两部分处理及操作的方法。原因是\b业务\b开发场景中打交道最多的就是对数组及对象的操作。\n\n### 2. React / Vue / Angular\nWeb 前端开发中越来越成为必需品的非必需品\n\n- React \n\n    学习基本 API \b在项目中越来越熟练的应用起来\n    ***[阮一峰 React 系列（基于当时的 React 版本相对较低，应该比较官方文档）](http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html)***\n\n    ***[React 小书 (React 入门神器)](http://huziketang.com/books/react/)***\n\n    ***[React 开发规范 1.0 (项目中基本开发规范，还待完善)](https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/)***\n\n    1. 理解 React 组件化开发思想\n    2. 按着要求或者模仿已完成的页面功能进行\b开发\n    3. 组件模块化创建\n    4. 常用的生命周期函数 \n        常用: `componentWillMount`、`render`、`componentDidMount`\n\n        可能会\b接触: `componentWillUpdate`、`componentDidUpdate`、`componentWillUnmount`、`shouldComponentUpdate`、`componentWillReceiveProps`\n    5. 数据传递 `state`、`props`\n- Vue\n> 待补充，基本思路应该同上\n- Angular\n> 待补充，基本思路应该同上\n\n### 3. 框架(或库)相关\n项目中引入的一些常用工具或者插件应该有所了解及使用\n- React + Redux (\b注：以下内容如果项目中没有引入可以放一放)\n    - react-router / react-router-dom 基本使用，需要撸文档或者  README \n    - redux 相关教程，需要了解及其基本使用 \n    - react-redux 相关教程及使用 \n    - prop-types 相关文档及使用\n\n    总体思路：先看项目中用到的工具或者插件，查看相关文档，学以致用\n- Vue\n    > 待补充，基本思路应该同上\n- Angular\n    > 待补充，基本思路应该同上\n\n### 4. Css、Less、Sass、Stylus\n其实 css 会越来越 NB 的，\bcss 预编译器迟早药丸。\n注：以下内容如果项目中没有引入可以放一放\n\n- css 预编译器的基本使用 简单撸文档即可\n- class 命名 按着项目中相关规范进行\n- 基本样式编写应该基于 class 而不是 id  \n- flex \b基本应用 [flex 教程，这篇才是最棒的](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)\n- 对 important 以及内联样式尽量不使用\n- 尽量用最少的 css 代码实现 UI 图需要展示的效果\n\n留在最后：不仅仅简单的还原 UI 图，还应该与需求及 UI 及时沟通，确定他们想要实现的效果\n\n### 5. 查看项目文件\n\n- 先看项目的描述文件，即 README，了解项目\b开发相关及项目启动命令\n- 再看项目入口文件，\bREADME 文件一般都有描述，了解整个项目的\b目录结构及组件\b依赖关系\n\n### 6. NPM 基本使用\n\n\bnpm 的安装 ***[前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)***\n\nnpm\b 的使用\b按着项目中 README 文件\b描述操作即可\n\n\b\b推荐\b以下常用命令\n```\n// 由于国内网络情况，推荐\b将 npm 源切换至淘宝镜像\nnpm config set registry https://registry.npm.taobao.org \n\n// 项目依赖安装\nnpm install \n// 简写\nnpm i \n\n// \b将 xxx \b安装到项目的基本依赖\nnpm install xxx --save \n// 简写\nnpm i -S xxx \n\n// 将 xxx \b安装到项目的开发依赖\nnpm install xxx --save-dev \n// 简写\nnpm i -D xxx \n\n// \b将 xxx \b从项目的基本依赖中移除\nnpm uninstall xxx --save \n// 简写\nnpm uninstall xxx -S\n\n// \b将 xxx \b从项目的开发依赖中移除\nnpm uninstall xxx --save-dev\n// 简写\nnpm uninstall xxx -D\n\n// 启动相关命令 其中的 xxx 代指 package.json 文件中 script 对象中的 key 值 \b\nnpm run xxx\n```\n\n如果感兴趣，也可以了解一下 nrm (npm 源快速切换工具)\n\n### 7. \bGit 基本使用\n\ngit 的安装 ***[前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)***\n\n\b\b推荐\b以下常用命令\n```\n// 代码克隆 将代码从 http://xxxx 地址克隆到本地\ngit clone http://xxxx \n// 代码拉取\ngit pull\n\n// 代码\b添加到本地\ngit add .\n\n// 代码提交\ngit commit -m '本次提交描述信息'\n\n// 将代码推送到 git 服务器\ngit push\n```\n\n### 8. DevTools 的基本使用\n即 GoogleChrome 开发者工具\n\n- Elements 查看元素及样式\n- Console 查看控制台信息\n- Sources \b\b\b对运行中的代码断点\b操作\n- Network 对运行中的代码进行数据\b查看及其他相关信息\n- Application 主要查看 LocalStorage、SessionStorage、Cookies 等其他信息\n\n更多使用方式 ***[点击查看](http://www.css88.com/doc/chrome-devtools/)***\n\n### 9. 编辑器调整\n推荐使用 VSCode\n\n推荐插件\n```\n// 编辑器文件图标\nVSCode Great Icons\n\n// \b好评率极高的代码\b格式化插件\nPrettier Now\n\n// react 开发效率插件 快速联想 \nJS JSX Snippets\n\n// 功能同上\nVS Code ES7 React/Redux/React-Native/JS snippets\n\n// 彩虹缩进\nIndent-Rainbow\n\n// 一款\b很骚气的主题\nOneDark Rain Coat\n\n// 强大的本地服务器\nLive Server\n```\n\n### 10. 了解网页在浏览器打开的大概过程？\n此阶段应该了解或已经了解了上边这个问题。还没有？加油🆙\n\n\n## 进阶篇\n\n学习前端也是一场修行，希望这些能帮到你。\n\n### 五花八门的各类插件\n拥抱新事物，走向新高度，开阔视野。\n有从众心理，用的人多的，不一定是最好的，但一定是最靠谱的！\n\n- 为什么要使用这些插件？\n    \n    这些插件存在的意义是解决业务开发场景中的痛点，解放开发者，把更多的时间及思考用在业务当中去，做出用户满意度更高的产品，以应对市场的变化。\n    从开发者角度来讲，减少造轮子的精力，\b也给自己更多的生活时间，何乐不为。\n    从项目本身来讲，选择适合的插件，能提高开发效率，也能提高产品的稳定性。因为大多的插件\b都已经经历过很多产品的验证，自然而然稳定性也是毋庸置疑，群众的眼睛是雪亮的嘛。\n    \n- 插件该如何选择？\n\n    个人认为应该从以下几点去进行分析：\n    1. 分析实际业务场景，到底需要那些功能，哪些功能在你的认知范围能能找到适合的插件去满足。\n    2. 分析插件的相关社区及维护人员是否积极，最简单的就是去 github 上看一看问题多少，活不活越，维护\b积极不积极。\n    3. 插件的版本号，是不是已经发布稳定版本，更新日志是不是有规律性。\n    4. 还有是否易用，\b比如文档是否丰富、API 是否简单易理解\n\n\t上边这么多条件都能满足，这款插件你不仅可以放心的使用，还可以研究其源码。\n\n- 插件该怎么应用？\n\n    拿到一款插件，\n    1. 看 README 文件\n    2. 对照 README 文件看相关 demo 代码\n    3. 运行 demo 代码，打断点看看这个插件都做\b了那些、都能做那些\n\n    如果\b经历了以上三点，你还是一脸懵逼，可以\b百度、Google此插件的相关教程或者问问周围的同事\b。\n    什么？周围的同事也是一脸懵逼？那我想说的是，这款插件不适合你们，请放弃...\n\n\n# 未完待续。。。","slug":"前端学习清单","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ao001kyeh77ynxr3l9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>以下仅代表个人对前端学习方面的一些整理及知识点梳理，具体学习方式方法，还需根据个人能力做出相应调整。</p>\n</blockquote>\n<p>前端技术栈体系相对庞杂，<strong><em>从应用角度出发</em></strong> 列此清单方便大家少走弯路，也警示自己还有很多东西需要在进一步去理解。</p>\n<p>前端\b框架部分\b多描述 React 部分，Vue 及 Angular 部分希望大家补充。</p>\n<p><strong><em><a href=\"http://naotu.baidu.com/file/1bb54c00d3c9e9ad54494e9d689d928d?token=deffab7e0f444f9c\" target=\"_blank\" rel=\"noopener\">Web 前端学习脑图</a></em></strong></p>\n<p><strong><em><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></em></strong></p>\n<a id=\"more\"></a>\n<h2 id=\"好物推荐\"><a href=\"#好物推荐\" class=\"headerlink\" title=\"好物推荐\"></a>好物推荐</h2><p>了解一下？</p>\n<ul>\n<li><a href=\"https://docschina.org/\" target=\"_blank\" rel=\"noopener\">印记中文</a> — \b印记中文出品，唯一与官方文档同步的中文文档</li>\n<li><a href=\"http://naotu.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度脑图</a> — 便捷的思维工具</li>\n<li><a href=\"https://bestof.js.org/\" target=\"_blank\" rel=\"noopener\">bestof.js.org</a> — The best of JavaScript, HTML and CSS</li>\n<li><a href=\"https://www.awesomes.cn/\" target=\"_blank\" rel=\"noopener\">Awesomes</a> — Web前端开发资源库</li>\n<li><a href=\"https://weekly.75team.com/\" target=\"_blank\" rel=\"noopener\">奇舞周刊</a> — 汇聚前端精华</li>\n</ul>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><p>坐好，准备发车！</p>\n<h3 id=\"1-ES-5-6-7-8-…\"><a href=\"#1-ES-5-6-7-8-…\" class=\"headerlink\" title=\"1. ES 5/6/7/8 …\"></a>1. ES 5/6/7/8 …</h3><p>基础要打好</p>\n<p>你懂的，具体怎么学习，这个应该是仁者见仁智者见智。\b推荐夯实\b并且及时更新对 <strong><em>数组和对象</em></strong> 这两部分处理及操作的方法。原因是\b业务\b开发场景中打交道最多的就是对数组及对象的操作。</p>\n<h3 id=\"2-React-Vue-Angular\"><a href=\"#2-React-Vue-Angular\" class=\"headerlink\" title=\"2. React / Vue / Angular\"></a>2. React / Vue / Angular</h3><p>Web 前端开发中越来越成为必需品的非必需品</p>\n<ul>\n<li><p>React </p>\n<p>  学习基本 API \b在项目中越来越熟练的应用起来<br>  <strong><em><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" rel=\"noopener\">阮一峰 React 系列（基于当时的 React 版本相对较低，应该比较官方文档）</a></em></strong></p>\n<p>  <strong><em><a href=\"http://huziketang.com/books/react/\" target=\"_blank\" rel=\"noopener\">React 小书 (React 入门神器)</a></em></strong></p>\n<p>  <strong><em><a href=\"https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/\" target=\"_blank\" rel=\"noopener\">React 开发规范 1.0 (项目中基本开发规范，还待完善)</a></em></strong></p>\n<ol>\n<li>理解 React 组件化开发思想</li>\n<li>按着要求或者模仿已完成的页面功能进行\b开发</li>\n<li>组件模块化创建</li>\n<li><p>常用的生命周期函数<br> 常用: <code>componentWillMount</code>、<code>render</code>、<code>componentDidMount</code></p>\n<p> 可能会\b接触: <code>componentWillUpdate</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code>、<code>shouldComponentUpdate</code>、<code>componentWillReceiveProps</code></p>\n</li>\n<li>数据传递 <code>state</code>、<code>props</code></li>\n</ol>\n</li>\n<li>Vue<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n<li>Angular<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-框架-或库-相关\"><a href=\"#3-框架-或库-相关\" class=\"headerlink\" title=\"3. 框架(或库)相关\"></a>3. 框架(或库)相关</h3><p>项目中引入的一些常用工具或者插件应该有所了解及使用</p>\n<ul>\n<li><p>React + Redux (\b注：以下内容如果项目中没有引入可以放一放)</p>\n<ul>\n<li>react-router / react-router-dom 基本使用，需要撸文档或者  README </li>\n<li>redux 相关教程，需要了解及其基本使用 </li>\n<li>react-redux 相关教程及使用 </li>\n<li><p>prop-types 相关文档及使用</p>\n<p>总体思路：先看项目中用到的工具或者插件，查看相关文档，学以致用</p>\n</li>\n</ul>\n</li>\n<li>Vue<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n<li>Angular<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4-Css、Less、Sass、Stylus\"><a href=\"#4-Css、Less、Sass、Stylus\" class=\"headerlink\" title=\"4. Css、Less、Sass、Stylus\"></a>4. Css、Less、Sass、Stylus</h3><p>其实 css 会越来越 NB 的，\bcss 预编译器迟早药丸。<br>注：以下内容如果项目中没有引入可以放一放</p>\n<ul>\n<li>css 预编译器的基本使用 简单撸文档即可</li>\n<li>class 命名 按着项目中相关规范进行</li>\n<li>基本样式编写应该基于 class 而不是 id  </li>\n<li>flex \b基本应用 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex 教程，这篇才是最棒的</a></li>\n<li>对 important 以及内联样式尽量不使用</li>\n<li>尽量用最少的 css 代码实现 UI 图需要展示的效果</li>\n</ul>\n<p>留在最后：不仅仅简单的还原 UI 图，还应该与需求及 UI 及时沟通，确定他们想要实现的效果</p>\n<h3 id=\"5-查看项目文件\"><a href=\"#5-查看项目文件\" class=\"headerlink\" title=\"5. 查看项目文件\"></a>5. 查看项目文件</h3><ul>\n<li>先看项目的描述文件，即 README，了解项目\b开发相关及项目启动命令</li>\n<li>再看项目入口文件，\bREADME 文件一般都有描述，了解整个项目的\b目录结构及组件\b依赖关系</li>\n</ul>\n<h3 id=\"6-NPM-基本使用\"><a href=\"#6-NPM-基本使用\" class=\"headerlink\" title=\"6. NPM 基本使用\"></a>6. NPM 基本使用</h3><p>\bnpm 的安装 <strong><em><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></em></strong></p>\n<p>npm\b 的使用\b按着项目中 README 文件\b描述操作即可</p>\n<p>\b\b推荐\b以下常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 由于国内网络情况，推荐\b将 npm 源切换至淘宝镜像</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org </span><br><span class=\"line\"></span><br><span class=\"line\">// 项目依赖安装</span><br><span class=\"line\">npm install </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm i </span><br><span class=\"line\"></span><br><span class=\"line\">// \b将 xxx \b安装到项目的基本依赖</span><br><span class=\"line\">npm install xxx --save </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm i -S xxx </span><br><span class=\"line\"></span><br><span class=\"line\">// 将 xxx \b安装到项目的开发依赖</span><br><span class=\"line\">npm install xxx --save-dev </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm i -D xxx </span><br><span class=\"line\"></span><br><span class=\"line\">// \b将 xxx \b从项目的基本依赖中移除</span><br><span class=\"line\">npm uninstall xxx --save </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm uninstall xxx -S</span><br><span class=\"line\"></span><br><span class=\"line\">// \b将 xxx \b从项目的开发依赖中移除</span><br><span class=\"line\">npm uninstall xxx --save-dev</span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm uninstall xxx -D</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动相关命令 其中的 xxx 代指 package.json 文件中 script 对象中的 key 值 \b</span><br><span class=\"line\">npm run xxx</span><br></pre></td></tr></table></figure></p>\n<p>如果感兴趣，也可以了解一下 nrm (npm 源快速切换工具)</p>\n<h3 id=\"7-Git-基本使用\"><a href=\"#7-Git-基本使用\" class=\"headerlink\" title=\"7. \bGit 基本使用\"></a>7. \bGit 基本使用</h3><p>git 的安装 <strong><em><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></em></strong></p>\n<p>\b\b推荐\b以下常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代码克隆 将代码从 http://xxxx 地址克隆到本地</span><br><span class=\"line\">git clone http://xxxx </span><br><span class=\"line\">// 代码拉取</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">// 代码\b添加到本地</span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">// 代码提交</span><br><span class=\"line\">git commit -m &apos;本次提交描述信息&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 将代码推送到 git 服务器</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-DevTools-的基本使用\"><a href=\"#8-DevTools-的基本使用\" class=\"headerlink\" title=\"8. DevTools 的基本使用\"></a>8. DevTools 的基本使用</h3><p>即 GoogleChrome 开发者工具</p>\n<ul>\n<li>Elements 查看元素及样式</li>\n<li>Console 查看控制台信息</li>\n<li>Sources \b\b\b对运行中的代码断点\b操作</li>\n<li>Network 对运行中的代码进行数据\b查看及其他相关信息</li>\n<li>Application 主要查看 LocalStorage、SessionStorage、Cookies 等其他信息</li>\n</ul>\n<p>更多使用方式 <strong><em><a href=\"http://www.css88.com/doc/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">点击查看</a></em></strong></p>\n<h3 id=\"9-编辑器调整\"><a href=\"#9-编辑器调整\" class=\"headerlink\" title=\"9. 编辑器调整\"></a>9. 编辑器调整</h3><p>推荐使用 VSCode</p>\n<p>推荐插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 编辑器文件图标</span><br><span class=\"line\">VSCode Great Icons</span><br><span class=\"line\"></span><br><span class=\"line\">// \b好评率极高的代码\b格式化插件</span><br><span class=\"line\">Prettier Now</span><br><span class=\"line\"></span><br><span class=\"line\">// react 开发效率插件 快速联想 </span><br><span class=\"line\">JS JSX Snippets</span><br><span class=\"line\"></span><br><span class=\"line\">// 功能同上</span><br><span class=\"line\">VS Code ES7 React/Redux/React-Native/JS snippets</span><br><span class=\"line\"></span><br><span class=\"line\">// 彩虹缩进</span><br><span class=\"line\">Indent-Rainbow</span><br><span class=\"line\"></span><br><span class=\"line\">// 一款\b很骚气的主题</span><br><span class=\"line\">OneDark Rain Coat</span><br><span class=\"line\"></span><br><span class=\"line\">// 强大的本地服务器</span><br><span class=\"line\">Live Server</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-了解网页在浏览器打开的大概过程？\"><a href=\"#10-了解网页在浏览器打开的大概过程？\" class=\"headerlink\" title=\"10. 了解网页在浏览器打开的大概过程？\"></a>10. 了解网页在浏览器打开的大概过程？</h3><p>此阶段应该了解或已经了解了上边这个问题。还没有？加油🆙</p>\n<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2><p>学习前端也是一场修行，希望这些能帮到你。</p>\n<h3 id=\"五花八门的各类插件\"><a href=\"#五花八门的各类插件\" class=\"headerlink\" title=\"五花八门的各类插件\"></a>五花八门的各类插件</h3><p>拥抱新事物，走向新高度，开阔视野。<br>有从众心理，用的人多的，不一定是最好的，但一定是最靠谱的！</p>\n<ul>\n<li><p>为什么要使用这些插件？</p>\n<p>  这些插件存在的意义是解决业务开发场景中的痛点，解放开发者，把更多的时间及思考用在业务当中去，做出用户满意度更高的产品，以应对市场的变化。<br>  从开发者角度来讲，减少造轮子的精力，\b也给自己更多的生活时间，何乐不为。<br>  从项目本身来讲，选择适合的插件，能提高开发效率，也能提高产品的稳定性。因为大多的插件\b都已经经历过很多产品的验证，自然而然稳定性也是毋庸置疑，群众的眼睛是雪亮的嘛。</p>\n</li>\n<li><p>插件该如何选择？</p>\n<p>  个人认为应该从以下几点去进行分析：</p>\n<ol>\n<li>分析实际业务场景，到底需要那些功能，哪些功能在你的认知范围能能找到适合的插件去满足。</li>\n<li>分析插件的相关社区及维护人员是否积极，最简单的就是去 github 上看一看问题多少，活不活越，维护\b积极不积极。</li>\n<li>插件的版本号，是不是已经发布稳定版本，更新日志是不是有规律性。</li>\n<li><p>还有是否易用，\b比如文档是否丰富、API 是否简单易理解</p>\n<p>上边这么多条件都能满足，这款插件你不仅可以放心的使用，还可以研究其源码。</p>\n</li>\n</ol>\n</li>\n<li><p>插件该怎么应用？</p>\n<p>  拿到一款插件，</p>\n<ol>\n<li>看 README 文件</li>\n<li>对照 README 文件看相关 demo 代码</li>\n<li><p>运行 demo 代码，打断点看看这个插件都做\b了那些、都能做那些</p>\n<p>如果\b经历了以上三点，你还是一脸懵逼，可以\b百度、Google此插件的相关教程或者问问周围的同事\b。<br>什么？周围的同事也是一脸懵逼？那我想说的是，这款插件不适合你们，请放弃…</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"未完待续。。。\"><a href=\"#未完待续。。。\" class=\"headerlink\" title=\"未完待续。。。\"></a>未完待续。。。</h1>","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>以下仅代表个人对前端学习方面的一些整理及知识点梳理，具体学习方式方法，还需根据个人能力做出相应调整。</p>\n</blockquote>\n<p>前端技术栈体系相对庞杂，<strong><em>从应用角度出发</em></strong> 列此清单方便大家少走弯路，也警示自己还有很多东西需要在进一步去理解。</p>\n<p>前端\b框架部分\b多描述 React 部分，Vue 及 Angular 部分希望大家补充。</p>\n<p><strong><em><a href=\"http://naotu.baidu.com/file/1bb54c00d3c9e9ad54494e9d689d928d?token=deffab7e0f444f9c\" target=\"_blank\" rel=\"noopener\">Web 前端学习脑图</a></em></strong></p>\n<p><strong><em><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></em></strong></p>","more":"<h2 id=\"好物推荐\"><a href=\"#好物推荐\" class=\"headerlink\" title=\"好物推荐\"></a>好物推荐</h2><p>了解一下？</p>\n<ul>\n<li><a href=\"https://docschina.org/\" target=\"_blank\" rel=\"noopener\">印记中文</a> — \b印记中文出品，唯一与官方文档同步的中文文档</li>\n<li><a href=\"http://naotu.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度脑图</a> — 便捷的思维工具</li>\n<li><a href=\"https://bestof.js.org/\" target=\"_blank\" rel=\"noopener\">bestof.js.org</a> — The best of JavaScript, HTML and CSS</li>\n<li><a href=\"https://www.awesomes.cn/\" target=\"_blank\" rel=\"noopener\">Awesomes</a> — Web前端开发资源库</li>\n<li><a href=\"https://weekly.75team.com/\" target=\"_blank\" rel=\"noopener\">奇舞周刊</a> — 汇聚前端精华</li>\n</ul>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><p>坐好，准备发车！</p>\n<h3 id=\"1-ES-5-6-7-8-…\"><a href=\"#1-ES-5-6-7-8-…\" class=\"headerlink\" title=\"1. ES 5/6/7/8 …\"></a>1. ES 5/6/7/8 …</h3><p>基础要打好</p>\n<p>你懂的，具体怎么学习，这个应该是仁者见仁智者见智。\b推荐夯实\b并且及时更新对 <strong><em>数组和对象</em></strong> 这两部分处理及操作的方法。原因是\b业务\b开发场景中打交道最多的就是对数组及对象的操作。</p>\n<h3 id=\"2-React-Vue-Angular\"><a href=\"#2-React-Vue-Angular\" class=\"headerlink\" title=\"2. React / Vue / Angular\"></a>2. React / Vue / Angular</h3><p>Web 前端开发中越来越成为必需品的非必需品</p>\n<ul>\n<li><p>React </p>\n<p>  学习基本 API \b在项目中越来越熟练的应用起来<br>  <strong><em><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" rel=\"noopener\">阮一峰 React 系列（基于当时的 React 版本相对较低，应该比较官方文档）</a></em></strong></p>\n<p>  <strong><em><a href=\"http://huziketang.com/books/react/\" target=\"_blank\" rel=\"noopener\">React 小书 (React 入门神器)</a></em></strong></p>\n<p>  <strong><em><a href=\"https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/\" target=\"_blank\" rel=\"noopener\">React 开发规范 1.0 (项目中基本开发规范，还待完善)</a></em></strong></p>\n<ol>\n<li>理解 React 组件化开发思想</li>\n<li>按着要求或者模仿已完成的页面功能进行\b开发</li>\n<li>组件模块化创建</li>\n<li><p>常用的生命周期函数<br> 常用: <code>componentWillMount</code>、<code>render</code>、<code>componentDidMount</code></p>\n<p> 可能会\b接触: <code>componentWillUpdate</code>、<code>componentDidUpdate</code>、<code>componentWillUnmount</code>、<code>shouldComponentUpdate</code>、<code>componentWillReceiveProps</code></p>\n</li>\n<li>数据传递 <code>state</code>、<code>props</code></li>\n</ol>\n</li>\n<li>Vue<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n<li>Angular<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-框架-或库-相关\"><a href=\"#3-框架-或库-相关\" class=\"headerlink\" title=\"3. 框架(或库)相关\"></a>3. 框架(或库)相关</h3><p>项目中引入的一些常用工具或者插件应该有所了解及使用</p>\n<ul>\n<li><p>React + Redux (\b注：以下内容如果项目中没有引入可以放一放)</p>\n<ul>\n<li>react-router / react-router-dom 基本使用，需要撸文档或者  README </li>\n<li>redux 相关教程，需要了解及其基本使用 </li>\n<li>react-redux 相关教程及使用 </li>\n<li><p>prop-types 相关文档及使用</p>\n<p>总体思路：先看项目中用到的工具或者插件，查看相关文档，学以致用</p>\n</li>\n</ul>\n</li>\n<li>Vue<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n<li>Angular<blockquote>\n<p>待补充，基本思路应该同上</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4-Css、Less、Sass、Stylus\"><a href=\"#4-Css、Less、Sass、Stylus\" class=\"headerlink\" title=\"4. Css、Less、Sass、Stylus\"></a>4. Css、Less、Sass、Stylus</h3><p>其实 css 会越来越 NB 的，\bcss 预编译器迟早药丸。<br>注：以下内容如果项目中没有引入可以放一放</p>\n<ul>\n<li>css 预编译器的基本使用 简单撸文档即可</li>\n<li>class 命名 按着项目中相关规范进行</li>\n<li>基本样式编写应该基于 class 而不是 id  </li>\n<li>flex \b基本应用 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">flex 教程，这篇才是最棒的</a></li>\n<li>对 important 以及内联样式尽量不使用</li>\n<li>尽量用最少的 css 代码实现 UI 图需要展示的效果</li>\n</ul>\n<p>留在最后：不仅仅简单的还原 UI 图，还应该与需求及 UI 及时沟通，确定他们想要实现的效果</p>\n<h3 id=\"5-查看项目文件\"><a href=\"#5-查看项目文件\" class=\"headerlink\" title=\"5. 查看项目文件\"></a>5. 查看项目文件</h3><ul>\n<li>先看项目的描述文件，即 README，了解项目\b开发相关及项目启动命令</li>\n<li>再看项目入口文件，\bREADME 文件一般都有描述，了解整个项目的\b目录结构及组件\b依赖关系</li>\n</ul>\n<h3 id=\"6-NPM-基本使用\"><a href=\"#6-NPM-基本使用\" class=\"headerlink\" title=\"6. NPM 基本使用\"></a>6. NPM 基本使用</h3><p>\bnpm 的安装 <strong><em><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></em></strong></p>\n<p>npm\b 的使用\b按着项目中 README 文件\b描述操作即可</p>\n<p>\b\b推荐\b以下常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 由于国内网络情况，推荐\b将 npm 源切换至淘宝镜像</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org </span><br><span class=\"line\"></span><br><span class=\"line\">// 项目依赖安装</span><br><span class=\"line\">npm install </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm i </span><br><span class=\"line\"></span><br><span class=\"line\">// \b将 xxx \b安装到项目的基本依赖</span><br><span class=\"line\">npm install xxx --save </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm i -S xxx </span><br><span class=\"line\"></span><br><span class=\"line\">// 将 xxx \b安装到项目的开发依赖</span><br><span class=\"line\">npm install xxx --save-dev </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm i -D xxx </span><br><span class=\"line\"></span><br><span class=\"line\">// \b将 xxx \b从项目的基本依赖中移除</span><br><span class=\"line\">npm uninstall xxx --save </span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm uninstall xxx -S</span><br><span class=\"line\"></span><br><span class=\"line\">// \b将 xxx \b从项目的开发依赖中移除</span><br><span class=\"line\">npm uninstall xxx --save-dev</span><br><span class=\"line\">// 简写</span><br><span class=\"line\">npm uninstall xxx -D</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动相关命令 其中的 xxx 代指 package.json 文件中 script 对象中的 key 值 \b</span><br><span class=\"line\">npm run xxx</span><br></pre></td></tr></table></figure></p>\n<p>如果感兴趣，也可以了解一下 nrm (npm 源快速切换工具)</p>\n<h3 id=\"7-Git-基本使用\"><a href=\"#7-Git-基本使用\" class=\"headerlink\" title=\"7. \bGit 基本使用\"></a>7. \bGit 基本使用</h3><p>git 的安装 <strong><em><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></em></strong></p>\n<p>\b\b推荐\b以下常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代码克隆 将代码从 http://xxxx 地址克隆到本地</span><br><span class=\"line\">git clone http://xxxx </span><br><span class=\"line\">// 代码拉取</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">// 代码\b添加到本地</span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">// 代码提交</span><br><span class=\"line\">git commit -m &apos;本次提交描述信息&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 将代码推送到 git 服务器</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-DevTools-的基本使用\"><a href=\"#8-DevTools-的基本使用\" class=\"headerlink\" title=\"8. DevTools 的基本使用\"></a>8. DevTools 的基本使用</h3><p>即 GoogleChrome 开发者工具</p>\n<ul>\n<li>Elements 查看元素及样式</li>\n<li>Console 查看控制台信息</li>\n<li>Sources \b\b\b对运行中的代码断点\b操作</li>\n<li>Network 对运行中的代码进行数据\b查看及其他相关信息</li>\n<li>Application 主要查看 LocalStorage、SessionStorage、Cookies 等其他信息</li>\n</ul>\n<p>更多使用方式 <strong><em><a href=\"http://www.css88.com/doc/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">点击查看</a></em></strong></p>\n<h3 id=\"9-编辑器调整\"><a href=\"#9-编辑器调整\" class=\"headerlink\" title=\"9. 编辑器调整\"></a>9. 编辑器调整</h3><p>推荐使用 VSCode</p>\n<p>推荐插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 编辑器文件图标</span><br><span class=\"line\">VSCode Great Icons</span><br><span class=\"line\"></span><br><span class=\"line\">// \b好评率极高的代码\b格式化插件</span><br><span class=\"line\">Prettier Now</span><br><span class=\"line\"></span><br><span class=\"line\">// react 开发效率插件 快速联想 </span><br><span class=\"line\">JS JSX Snippets</span><br><span class=\"line\"></span><br><span class=\"line\">// 功能同上</span><br><span class=\"line\">VS Code ES7 React/Redux/React-Native/JS snippets</span><br><span class=\"line\"></span><br><span class=\"line\">// 彩虹缩进</span><br><span class=\"line\">Indent-Rainbow</span><br><span class=\"line\"></span><br><span class=\"line\">// 一款\b很骚气的主题</span><br><span class=\"line\">OneDark Rain Coat</span><br><span class=\"line\"></span><br><span class=\"line\">// 强大的本地服务器</span><br><span class=\"line\">Live Server</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-了解网页在浏览器打开的大概过程？\"><a href=\"#10-了解网页在浏览器打开的大概过程？\" class=\"headerlink\" title=\"10. 了解网页在浏览器打开的大概过程？\"></a>10. 了解网页在浏览器打开的大概过程？</h3><p>此阶段应该了解或已经了解了上边这个问题。还没有？加油🆙</p>\n<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2><p>学习前端也是一场修行，希望这些能帮到你。</p>\n<h3 id=\"五花八门的各类插件\"><a href=\"#五花八门的各类插件\" class=\"headerlink\" title=\"五花八门的各类插件\"></a>五花八门的各类插件</h3><p>拥抱新事物，走向新高度，开阔视野。<br>有从众心理，用的人多的，不一定是最好的，但一定是最靠谱的！</p>\n<ul>\n<li><p>为什么要使用这些插件？</p>\n<p>  这些插件存在的意义是解决业务开发场景中的痛点，解放开发者，把更多的时间及思考用在业务当中去，做出用户满意度更高的产品，以应对市场的变化。<br>  从开发者角度来讲，减少造轮子的精力，\b也给自己更多的生活时间，何乐不为。<br>  从项目本身来讲，选择适合的插件，能提高开发效率，也能提高产品的稳定性。因为大多的插件\b都已经经历过很多产品的验证，自然而然稳定性也是毋庸置疑，群众的眼睛是雪亮的嘛。</p>\n</li>\n<li><p>插件该如何选择？</p>\n<p>  个人认为应该从以下几点去进行分析：</p>\n<ol>\n<li>分析实际业务场景，到底需要那些功能，哪些功能在你的认知范围能能找到适合的插件去满足。</li>\n<li>分析插件的相关社区及维护人员是否积极，最简单的就是去 github 上看一看问题多少，活不活越，维护\b积极不积极。</li>\n<li>插件的版本号，是不是已经发布稳定版本，更新日志是不是有规律性。</li>\n<li><p>还有是否易用，\b比如文档是否丰富、API 是否简单易理解</p>\n<p>上边这么多条件都能满足，这款插件你不仅可以放心的使用，还可以研究其源码。</p>\n</li>\n</ol>\n</li>\n<li><p>插件该怎么应用？</p>\n<p>  拿到一款插件，</p>\n<ol>\n<li>看 README 文件</li>\n<li>对照 README 文件看相关 demo 代码</li>\n<li><p>运行 demo 代码，打断点看看这个插件都做\b了那些、都能做那些</p>\n<p>如果\b经历了以上三点，你还是一脸懵逼，可以\b百度、Google此插件的相关教程或者问问周围的同事\b。<br>什么？周围的同事也是一脸懵逼？那我想说的是，这款插件不适合你们，请放弃…</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"未完待续。。。\"><a href=\"#未完待续。。。\" class=\"headerlink\" title=\"未完待续。。。\"></a>未完待续。。。</h1>"},{"title":"node模块安装","date":"2017-04-30T03:39:38.000Z","_content":"## 模块\n- 文件模块\n- 内置模块\n- 第三方模块\n### 模块安装\n- npm root -g 可以查看安装到哪里去了\n- 全局安装 -g 在命令行下使用\n- nrm 切换源的工具\n> 默认下载从官方下载npm，nrm可以切换国内数据源\n- 全局安装nrm\n<!--more-->\n```\nnpm install -g nrm\n```\n- 列出所有可用的源\n```\nnrm ls\n```\n- 测试源的速度\n```\nnrm test\n```\n- 添加数据源\n```\nnrm add <源名字> <地址> //\n```\n- 删除数据源\n```\nnrm del <源名字> //\n```\n- 使用数据源\n```\nnrm use <源名字> //\n```\n### 本地安装 （如果切换到淘宝后，以后都是通过淘宝进行安装）\n- 本地安装主要在项目中使用\n> 本地安装会默认安装到node_modules 中,如果没有初始化package.json可能会安装上一node_modules目录\n```\nnpm init -y\nnpm install jquery --save //安装\nnpm uninstall jquery --save //卸载\n```\n\n### 项目依赖\n- 上线需要开发时也需要 mime\n```\n--save 可以简写 -S\n```\n### 开发依赖\n- 上线不需要，开发时需要 webpack gulp\n```\n--save-dev  可以简写 -D\n```\n### 安装依赖\n- 当我们文件上传到github上，会node_module文件忽略掉，别人下载代码后需要执行npm install 将所有依赖进行安装\n```\nnpm install\n```\n### 安装指定版本\n```\nnpm install <依赖名>@版本号\n```\n### 查看指定版本号\n```\nnpm info <依赖名>\n```\n## yarn\n- 也是安装模块的方式，和npm一样。\n```\nnpm install yarn -g\n```\n- 初始化package.json\n```\nyarn init -y\n```\n- 安装模块\n如果是项目依赖则不用标注，如果是开发依赖需要标注（-dev）\n```\nyarn add <依赖名> //项目依赖\nyarn add <依赖名> -dev //开发依赖\n```\n- 删除模块\n```\nyarn remove <依赖名> （-dev）\n```\n- 找回模块\n```\nyarn install\n```\n","source":"_posts/node模块安装.md","raw":"---\ntitle: node模块安装\ndate: 2017-04-30 11:39:38\ntags: [node,node基础]\ncategories: node\n---\n## 模块\n- 文件模块\n- 内置模块\n- 第三方模块\n### 模块安装\n- npm root -g 可以查看安装到哪里去了\n- 全局安装 -g 在命令行下使用\n- nrm 切换源的工具\n> 默认下载从官方下载npm，nrm可以切换国内数据源\n- 全局安装nrm\n<!--more-->\n```\nnpm install -g nrm\n```\n- 列出所有可用的源\n```\nnrm ls\n```\n- 测试源的速度\n```\nnrm test\n```\n- 添加数据源\n```\nnrm add <源名字> <地址> //\n```\n- 删除数据源\n```\nnrm del <源名字> //\n```\n- 使用数据源\n```\nnrm use <源名字> //\n```\n### 本地安装 （如果切换到淘宝后，以后都是通过淘宝进行安装）\n- 本地安装主要在项目中使用\n> 本地安装会默认安装到node_modules 中,如果没有初始化package.json可能会安装上一node_modules目录\n```\nnpm init -y\nnpm install jquery --save //安装\nnpm uninstall jquery --save //卸载\n```\n\n### 项目依赖\n- 上线需要开发时也需要 mime\n```\n--save 可以简写 -S\n```\n### 开发依赖\n- 上线不需要，开发时需要 webpack gulp\n```\n--save-dev  可以简写 -D\n```\n### 安装依赖\n- 当我们文件上传到github上，会node_module文件忽略掉，别人下载代码后需要执行npm install 将所有依赖进行安装\n```\nnpm install\n```\n### 安装指定版本\n```\nnpm install <依赖名>@版本号\n```\n### 查看指定版本号\n```\nnpm info <依赖名>\n```\n## yarn\n- 也是安装模块的方式，和npm一样。\n```\nnpm install yarn -g\n```\n- 初始化package.json\n```\nyarn init -y\n```\n- 安装模块\n如果是项目依赖则不用标注，如果是开发依赖需要标注（-dev）\n```\nyarn add <依赖名> //项目依赖\nyarn add <依赖名> -dev //开发依赖\n```\n- 删除模块\n```\nyarn remove <依赖名> （-dev）\n```\n- 找回模块\n```\nyarn install\n```\n","slug":"node模块安装","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ap001oyeh772xbfrhp","content":"<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><ul>\n<li>文件模块</li>\n<li>内置模块</li>\n<li>第三方模块<h3 id=\"模块安装\"><a href=\"#模块安装\" class=\"headerlink\" title=\"模块安装\"></a>模块安装</h3></li>\n<li>npm root -g 可以查看安装到哪里去了</li>\n<li>全局安装 -g 在命令行下使用</li>\n<li>nrm 切换源的工具<blockquote>\n<p>默认下载从官方下载npm，nrm可以切换国内数据源</p>\n</blockquote>\n</li>\n<li><p>全局安装nrm</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出所有可用的源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试源的速度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm add &lt;源名字&gt; &lt;地址&gt; //</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm del &lt;源名字&gt; //</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use &lt;源名字&gt; //</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"本地安装-（如果切换到淘宝后，以后都是通过淘宝进行安装）\"><a href=\"#本地安装-（如果切换到淘宝后，以后都是通过淘宝进行安装）\" class=\"headerlink\" title=\"本地安装 （如果切换到淘宝后，以后都是通过淘宝进行安装）\"></a>本地安装 （如果切换到淘宝后，以后都是通过淘宝进行安装）</h3><ul>\n<li>本地安装主要在项目中使用<blockquote>\n<p>本地安装会默认安装到node_modules 中,如果没有初始化package.json可能会安装上一node_modules目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install jquery --save //安装</span><br><span class=\"line\">npm uninstall jquery --save //卸载</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h3><ul>\n<li>上线需要开发时也需要 mime<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--save 可以简写 -S</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"开发依赖\"><a href=\"#开发依赖\" class=\"headerlink\" title=\"开发依赖\"></a>开发依赖</h3><ul>\n<li>上线不需要，开发时需要 webpack gulp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--save-dev  可以简写 -D</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ul>\n<li>当我们文件上传到github上，会node_module文件忽略掉，别人下载代码后需要执行npm install 将所有依赖进行安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;依赖名&gt;@版本号</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看指定版本号\"><a href=\"#查看指定版本号\" class=\"headerlink\" title=\"查看指定版本号\"></a>查看指定版本号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;依赖名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h2><ul>\n<li><p>也是安装模块的方式，和npm一样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install yarn -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化package.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装模块<br>如果是项目依赖则不用标注，如果是开发依赖需要标注（-dev）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add &lt;依赖名&gt; //项目依赖</span><br><span class=\"line\">yarn add &lt;依赖名&gt; -dev //开发依赖</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn remove &lt;依赖名&gt; （-dev）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找回模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><ul>\n<li>文件模块</li>\n<li>内置模块</li>\n<li>第三方模块<h3 id=\"模块安装\"><a href=\"#模块安装\" class=\"headerlink\" title=\"模块安装\"></a>模块安装</h3></li>\n<li>npm root -g 可以查看安装到哪里去了</li>\n<li>全局安装 -g 在命令行下使用</li>\n<li>nrm 切换源的工具<blockquote>\n<p>默认下载从官方下载npm，nrm可以切换国内数据源</p>\n</blockquote>\n</li>\n<li><p>全局安装nrm</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出所有可用的源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试源的速度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm add &lt;源名字&gt; &lt;地址&gt; //</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm del &lt;源名字&gt; //</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use &lt;源名字&gt; //</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"本地安装-（如果切换到淘宝后，以后都是通过淘宝进行安装）\"><a href=\"#本地安装-（如果切换到淘宝后，以后都是通过淘宝进行安装）\" class=\"headerlink\" title=\"本地安装 （如果切换到淘宝后，以后都是通过淘宝进行安装）\"></a>本地安装 （如果切换到淘宝后，以后都是通过淘宝进行安装）</h3><ul>\n<li>本地安装主要在项目中使用<blockquote>\n<p>本地安装会默认安装到node_modules 中,如果没有初始化package.json可能会安装上一node_modules目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install jquery --save //安装</span><br><span class=\"line\">npm uninstall jquery --save //卸载</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h3><ul>\n<li>上线需要开发时也需要 mime<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--save 可以简写 -S</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"开发依赖\"><a href=\"#开发依赖\" class=\"headerlink\" title=\"开发依赖\"></a>开发依赖</h3><ul>\n<li>上线不需要，开发时需要 webpack gulp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--save-dev  可以简写 -D</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ul>\n<li>当我们文件上传到github上，会node_module文件忽略掉，别人下载代码后需要执行npm install 将所有依赖进行安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;依赖名&gt;@版本号</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看指定版本号\"><a href=\"#查看指定版本号\" class=\"headerlink\" title=\"查看指定版本号\"></a>查看指定版本号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &lt;依赖名&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h2><ul>\n<li><p>也是安装模块的方式，和npm一样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install yarn -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化package.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装模块<br>如果是项目依赖则不用标注，如果是开发依赖需要标注（-dev）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add &lt;依赖名&gt; //项目依赖</span><br><span class=\"line\">yarn add &lt;依赖名&gt; -dev //开发依赖</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn remove &lt;依赖名&gt; （-dev）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找回模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"node基础（一）","date":"2017-04-30T01:58:14.000Z","_content":"> node 默认执行一个‘文件’ 时，就会套一层闭包函数，所有代码都是在个函数中执行的，默认这个函数提供5个参数，这五个参数可以直接使用，不用声明可以直接使用exports,require,module,__filename,dirname\n\n- 1.process 进程对象\n- 2.Buffer 缓冲区，表示内存中的数据（16进制）\n- 3.clearImmediate , setImmediate\n- 4.clearInterval , setInterval\n- 5.clearTimeout , setTimeout\n- 6.console\n<!--more-->\n## console 顺序不定的\n- console.log('log');\n- console.error('error');\n- console.warn('warn');\n- console.info('info');\n\n## setTimeout 异步\n- (1)这里的this是setTimeout 自己\nconsole.log(this);//这里的this被外层的闭包改掉了，是个{}\n(function(){\n  console.log(this);\n})();//这里的this是global\n> 改变this指向的方式\n  - 1.call apply\n  - 2.bind\n  - 3.var that = this;\n  - 4.arrow func 即箭头函数\n\n- (2)setTimeout(function(参数1,参数2){\n  console.log(参数1，参数2);\n},1000,'参数1','参数2')；\n\n## 高阶函数\n> let a = b => c => b + c;\nconsole.log(a(2)(3)); //5\n\n## setImmediate 不能传递时间\n等待同步代码执行后调用，没有写时间的setTimeout\n```\nsetImmediate(function () {\n    console.log('setImmediate')\n});\nsetTimeout(function () {\n    console.log('setTimeout')\n});\nconsole.log('ok');//默认setTimeout 有可能比 setImmediate 先执行\n```\n## process 代码执行时会开一个进程，代码运行完成后进程就结束了\n```\nsetInterval(function () {\n    //process.pid//当前进程id\n     console.log(process.pid);\n     //process.kill(13140); //杀掉进程\n     //process.exit();//退出进程\n},1000);\n```\n```\nprocess.nextTick(function () {\n    console.log('nextTick')\n});//是异步的函数\n```\n> nextTick > setImmediate > setTimeout\n","source":"_posts/node基础.md","raw":"---\ntitle: node基础（一）\ndate: 2017-04-30 09:58:14\ntags: [node,node基础]\ncategories: node\n---\n> node 默认执行一个‘文件’ 时，就会套一层闭包函数，所有代码都是在个函数中执行的，默认这个函数提供5个参数，这五个参数可以直接使用，不用声明可以直接使用exports,require,module,__filename,dirname\n\n- 1.process 进程对象\n- 2.Buffer 缓冲区，表示内存中的数据（16进制）\n- 3.clearImmediate , setImmediate\n- 4.clearInterval , setInterval\n- 5.clearTimeout , setTimeout\n- 6.console\n<!--more-->\n## console 顺序不定的\n- console.log('log');\n- console.error('error');\n- console.warn('warn');\n- console.info('info');\n\n## setTimeout 异步\n- (1)这里的this是setTimeout 自己\nconsole.log(this);//这里的this被外层的闭包改掉了，是个{}\n(function(){\n  console.log(this);\n})();//这里的this是global\n> 改变this指向的方式\n  - 1.call apply\n  - 2.bind\n  - 3.var that = this;\n  - 4.arrow func 即箭头函数\n\n- (2)setTimeout(function(参数1,参数2){\n  console.log(参数1，参数2);\n},1000,'参数1','参数2')；\n\n## 高阶函数\n> let a = b => c => b + c;\nconsole.log(a(2)(3)); //5\n\n## setImmediate 不能传递时间\n等待同步代码执行后调用，没有写时间的setTimeout\n```\nsetImmediate(function () {\n    console.log('setImmediate')\n});\nsetTimeout(function () {\n    console.log('setTimeout')\n});\nconsole.log('ok');//默认setTimeout 有可能比 setImmediate 先执行\n```\n## process 代码执行时会开一个进程，代码运行完成后进程就结束了\n```\nsetInterval(function () {\n    //process.pid//当前进程id\n     console.log(process.pid);\n     //process.kill(13140); //杀掉进程\n     //process.exit();//退出进程\n},1000);\n```\n```\nprocess.nextTick(function () {\n    console.log('nextTick')\n});//是异步的函数\n```\n> nextTick > setImmediate > setTimeout\n","slug":"node基础","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4aq001syeh751q54f3o","content":"<blockquote>\n<p>node 默认执行一个‘文件’ 时，就会套一层闭包函数，所有代码都是在个函数中执行的，默认这个函数提供5个参数，这五个参数可以直接使用，不用声明可以直接使用exports,require,module,__filename,dirname</p>\n</blockquote>\n<ul>\n<li>1.process 进程对象</li>\n<li>2.Buffer 缓冲区，表示内存中的数据（16进制）</li>\n<li>3.clearImmediate , setImmediate</li>\n<li>4.clearInterval , setInterval</li>\n<li>5.clearTimeout , setTimeout</li>\n<li>6.console<a id=\"more\"></a>\n<h2 id=\"console-顺序不定的\"><a href=\"#console-顺序不定的\" class=\"headerlink\" title=\"console 顺序不定的\"></a>console 顺序不定的</h2></li>\n<li>console.log(‘log’);</li>\n<li>console.error(‘error’);</li>\n<li>console.warn(‘warn’);</li>\n<li>console.info(‘info’);</li>\n</ul>\n<h2 id=\"setTimeout-异步\"><a href=\"#setTimeout-异步\" class=\"headerlink\" title=\"setTimeout 异步\"></a>setTimeout 异步</h2><ul>\n<li><p>(1)这里的this是setTimeout 自己<br>console.log(this);//这里的this被外层的闭包改掉了，是个{}<br>(function(){<br>console.log(this);<br>})();//这里的this是global</p>\n<blockquote>\n<p>改变this指向的方式</p>\n<ul>\n<li>1.call apply</li>\n<li>2.bind</li>\n<li>3.var that = this;</li>\n<li>4.arrow func 即箭头函数</li>\n</ul>\n</blockquote>\n</li>\n<li><p>(2)setTimeout(function(参数1,参数2){<br>console.log(参数1，参数2);<br>},1000,’参数1’,’参数2’)；</p>\n</li>\n</ul>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><blockquote>\n<p>let a = b =&gt; c =&gt; b + c;<br>console.log(a(2)(3)); //5</p>\n</blockquote>\n<h2 id=\"setImmediate-不能传递时间\"><a href=\"#setImmediate-不能传递时间\" class=\"headerlink\" title=\"setImmediate 不能传递时间\"></a>setImmediate 不能传递时间</h2><p>等待同步代码执行后调用，没有写时间的setTimeout<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(function () &#123;</span><br><span class=\"line\">    console.log(&apos;setImmediate&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;ok&apos;);//默认setTimeout 有可能比 setImmediate 先执行</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"process-代码执行时会开一个进程，代码运行完成后进程就结束了\"><a href=\"#process-代码执行时会开一个进程，代码运行完成后进程就结束了\" class=\"headerlink\" title=\"process 代码执行时会开一个进程，代码运行完成后进程就结束了\"></a>process 代码执行时会开一个进程，代码运行完成后进程就结束了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(function () &#123;</span><br><span class=\"line\">    //process.pid//当前进程id</span><br><span class=\"line\">     console.log(process.pid);</span><br><span class=\"line\">     //process.kill(13140); //杀掉进程</span><br><span class=\"line\">     //process.exit();//退出进程</span><br><span class=\"line\">&#125;,1000);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function () &#123;</span><br><span class=\"line\">    console.log(&apos;nextTick&apos;)</span><br><span class=\"line\">&#125;);//是异步的函数</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>nextTick &gt; setImmediate &gt; setTimeout</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>node 默认执行一个‘文件’ 时，就会套一层闭包函数，所有代码都是在个函数中执行的，默认这个函数提供5个参数，这五个参数可以直接使用，不用声明可以直接使用exports,require,module,__filename,dirname</p>\n</blockquote>\n<ul>\n<li>1.process 进程对象</li>\n<li>2.Buffer 缓冲区，表示内存中的数据（16进制）</li>\n<li>3.clearImmediate , setImmediate</li>\n<li>4.clearInterval , setInterval</li>\n<li>5.clearTimeout , setTimeout</li>\n<li>6.console","more":"<h2 id=\"console-顺序不定的\"><a href=\"#console-顺序不定的\" class=\"headerlink\" title=\"console 顺序不定的\"></a>console 顺序不定的</h2></li>\n<li>console.log(‘log’);</li>\n<li>console.error(‘error’);</li>\n<li>console.warn(‘warn’);</li>\n<li>console.info(‘info’);</li>\n</ul>\n<h2 id=\"setTimeout-异步\"><a href=\"#setTimeout-异步\" class=\"headerlink\" title=\"setTimeout 异步\"></a>setTimeout 异步</h2><ul>\n<li><p>(1)这里的this是setTimeout 自己<br>console.log(this);//这里的this被外层的闭包改掉了，是个{}<br>(function(){<br>console.log(this);<br>})();//这里的this是global</p>\n<blockquote>\n<p>改变this指向的方式</p>\n<ul>\n<li>1.call apply</li>\n<li>2.bind</li>\n<li>3.var that = this;</li>\n<li>4.arrow func 即箭头函数</li>\n</ul>\n</blockquote>\n</li>\n<li><p>(2)setTimeout(function(参数1,参数2){<br>console.log(参数1，参数2);<br>},1000,’参数1’,’参数2’)；</p>\n</li>\n</ul>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><blockquote>\n<p>let a = b =&gt; c =&gt; b + c;<br>console.log(a(2)(3)); //5</p>\n</blockquote>\n<h2 id=\"setImmediate-不能传递时间\"><a href=\"#setImmediate-不能传递时间\" class=\"headerlink\" title=\"setImmediate 不能传递时间\"></a>setImmediate 不能传递时间</h2><p>等待同步代码执行后调用，没有写时间的setTimeout<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(function () &#123;</span><br><span class=\"line\">    console.log(&apos;setImmediate&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">setTimeout(function () &#123;</span><br><span class=\"line\">    console.log(&apos;setTimeout&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&apos;ok&apos;);//默认setTimeout 有可能比 setImmediate 先执行</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"process-代码执行时会开一个进程，代码运行完成后进程就结束了\"><a href=\"#process-代码执行时会开一个进程，代码运行完成后进程就结束了\" class=\"headerlink\" title=\"process 代码执行时会开一个进程，代码运行完成后进程就结束了\"></a>process 代码执行时会开一个进程，代码运行完成后进程就结束了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(function () &#123;</span><br><span class=\"line\">    //process.pid//当前进程id</span><br><span class=\"line\">     console.log(process.pid);</span><br><span class=\"line\">     //process.kill(13140); //杀掉进程</span><br><span class=\"line\">     //process.exit();//退出进程</span><br><span class=\"line\">&#125;,1000);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(function () &#123;</span><br><span class=\"line\">    console.log(&apos;nextTick&apos;)</span><br><span class=\"line\">&#125;);//是异步的函数</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>nextTick &gt; setImmediate &gt; setTimeout</p>\n</blockquote>"},{"title":"前端开发环境及工具","date":"2018-03-05T02:37:27.000Z","_content":"## 前端开发环境及工具\n\n### 内容目录\n\n[toc]\n\n---\n### 基本工具及环境\n\n> 前端开发基本工具整理。\n\n####  一、浏览器\n\n1. Chrome    [点此下载](http://www.google.cn/chrome/browser/desktop/index.html)\n\n2. Firefox   [点此下载](http://www.firefox.com.cn/)\n\n<!--more-->\n#### 二、编辑器\n\n1. VScode [点此下载](https://code.visualstudio.com/)\n\n<!--\n2. Webstorm [点此下载](http://www.jetbrains.com/webstorm/)\n\n3. Sublime [点此下载](https://www.sublimetext.com/3)\n\n4. Atom [点此下载](https://atom.io/)\n-->\n\n#### 三、运行环境\n\n1. 版本控制工具 Git [点此下载](https://git-scm.com/) [安装步骤](https://jingyan.baidu.com/article/020278117cbe921bcc9ce51c.html)\n\n2. 前端运行环境 Node (LTS) [点此下载](https://nodejs.org/en/)\n\n### 编辑器基本配置\n\n- 制表符长度：4\n- 编码格式：`UTF-8`\n- 换行符：`CRLF`\n- 插件\n    - 快速格式化 **Prettier Now**\n    - 快速代码生成 **JS JSX Snippets**\n- 编辑器已经内置 git 插件，无需另行配置\n\n\n\n---\n","source":"_posts/前端开发环境及工具.md","raw":"---\ntitle: 前端开发环境及工具\ndate: 2018-03-05 10:37:27\ntags: [uba,前端]\ncategories: 开发工具\n---\n## 前端开发环境及工具\n\n### 内容目录\n\n[toc]\n\n---\n### 基本工具及环境\n\n> 前端开发基本工具整理。\n\n####  一、浏览器\n\n1. Chrome    [点此下载](http://www.google.cn/chrome/browser/desktop/index.html)\n\n2. Firefox   [点此下载](http://www.firefox.com.cn/)\n\n<!--more-->\n#### 二、编辑器\n\n1. VScode [点此下载](https://code.visualstudio.com/)\n\n<!--\n2. Webstorm [点此下载](http://www.jetbrains.com/webstorm/)\n\n3. Sublime [点此下载](https://www.sublimetext.com/3)\n\n4. Atom [点此下载](https://atom.io/)\n-->\n\n#### 三、运行环境\n\n1. 版本控制工具 Git [点此下载](https://git-scm.com/) [安装步骤](https://jingyan.baidu.com/article/020278117cbe921bcc9ce51c.html)\n\n2. 前端运行环境 Node (LTS) [点此下载](https://nodejs.org/en/)\n\n### 编辑器基本配置\n\n- 制表符长度：4\n- 编码格式：`UTF-8`\n- 换行符：`CRLF`\n- 插件\n    - 快速格式化 **Prettier Now**\n    - 快速代码生成 **JS JSX Snippets**\n- 编辑器已经内置 git 插件，无需另行配置\n\n\n\n---\n","slug":"前端开发环境及工具","published":1,"updated":"2018-11-19T02:26:47.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4as001wyeh793lse105","content":"<h2 id=\"前端开发环境及工具\"><a href=\"#前端开发环境及工具\" class=\"headerlink\" title=\"前端开发环境及工具\"></a>前端开发环境及工具</h2><h3 id=\"内容目录\"><a href=\"#内容目录\" class=\"headerlink\" title=\"内容目录\"></a>内容目录</h3><p>[toc]</p>\n<hr>\n<h3 id=\"基本工具及环境\"><a href=\"#基本工具及环境\" class=\"headerlink\" title=\"基本工具及环境\"></a>基本工具及环境</h3><blockquote>\n<p>前端开发基本工具整理。</p>\n</blockquote>\n<h4 id=\"一、浏览器\"><a href=\"#一、浏览器\" class=\"headerlink\" title=\"一、浏览器\"></a>一、浏览器</h4><ol>\n<li><p>Chrome    <a href=\"http://www.google.cn/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"noopener\">点此下载</a></p>\n</li>\n<li><p>Firefox   <a href=\"http://www.firefox.com.cn/\" target=\"_blank\" rel=\"noopener\">点此下载</a></p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"二、编辑器\"><a href=\"#二、编辑器\" class=\"headerlink\" title=\"二、编辑器\"></a>二、编辑器</h4><ol>\n<li>VScode <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">点此下载</a></li>\n</ol>\n<!--\n2. Webstorm [点此下载](http://www.jetbrains.com/webstorm/)\n\n3. Sublime [点此下载](https://www.sublimetext.com/3)\n\n4. Atom [点此下载](https://atom.io/)\n-->\n<h4 id=\"三、运行环境\"><a href=\"#三、运行环境\" class=\"headerlink\" title=\"三、运行环境\"></a>三、运行环境</h4><ol>\n<li><p>版本控制工具 Git <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">点此下载</a> <a href=\"https://jingyan.baidu.com/article/020278117cbe921bcc9ce51c.html\" target=\"_blank\" rel=\"noopener\">安装步骤</a></p>\n</li>\n<li><p>前端运行环境 Node (LTS) <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">点此下载</a></p>\n</li>\n</ol>\n<h3 id=\"编辑器基本配置\"><a href=\"#编辑器基本配置\" class=\"headerlink\" title=\"编辑器基本配置\"></a>编辑器基本配置</h3><ul>\n<li>制表符长度：4</li>\n<li>编码格式：<code>UTF-8</code></li>\n<li>换行符：<code>CRLF</code></li>\n<li>插件<ul>\n<li>快速格式化 <strong>Prettier Now</strong></li>\n<li>快速代码生成 <strong>JS JSX Snippets</strong></li>\n</ul>\n</li>\n<li>编辑器已经内置 git 插件，无需另行配置</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"前端开发环境及工具\"><a href=\"#前端开发环境及工具\" class=\"headerlink\" title=\"前端开发环境及工具\"></a>前端开发环境及工具</h2><h3 id=\"内容目录\"><a href=\"#内容目录\" class=\"headerlink\" title=\"内容目录\"></a>内容目录</h3><p>[toc]</p>\n<hr>\n<h3 id=\"基本工具及环境\"><a href=\"#基本工具及环境\" class=\"headerlink\" title=\"基本工具及环境\"></a>基本工具及环境</h3><blockquote>\n<p>前端开发基本工具整理。</p>\n</blockquote>\n<h4 id=\"一、浏览器\"><a href=\"#一、浏览器\" class=\"headerlink\" title=\"一、浏览器\"></a>一、浏览器</h4><ol>\n<li><p>Chrome    <a href=\"http://www.google.cn/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"noopener\">点此下载</a></p>\n</li>\n<li><p>Firefox   <a href=\"http://www.firefox.com.cn/\" target=\"_blank\" rel=\"noopener\">点此下载</a></p>\n</li>\n</ol>","more":"<h4 id=\"二、编辑器\"><a href=\"#二、编辑器\" class=\"headerlink\" title=\"二、编辑器\"></a>二、编辑器</h4><ol>\n<li>VScode <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">点此下载</a></li>\n</ol>\n<!--\n2. Webstorm [点此下载](http://www.jetbrains.com/webstorm/)\n\n3. Sublime [点此下载](https://www.sublimetext.com/3)\n\n4. Atom [点此下载](https://atom.io/)\n-->\n<h4 id=\"三、运行环境\"><a href=\"#三、运行环境\" class=\"headerlink\" title=\"三、运行环境\"></a>三、运行环境</h4><ol>\n<li><p>版本控制工具 Git <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">点此下载</a> <a href=\"https://jingyan.baidu.com/article/020278117cbe921bcc9ce51c.html\" target=\"_blank\" rel=\"noopener\">安装步骤</a></p>\n</li>\n<li><p>前端运行环境 Node (LTS) <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">点此下载</a></p>\n</li>\n</ol>\n<h3 id=\"编辑器基本配置\"><a href=\"#编辑器基本配置\" class=\"headerlink\" title=\"编辑器基本配置\"></a>编辑器基本配置</h3><ul>\n<li>制表符长度：4</li>\n<li>编码格式：<code>UTF-8</code></li>\n<li>换行符：<code>CRLF</code></li>\n<li>插件<ul>\n<li>快速格式化 <strong>Prettier Now</strong></li>\n<li>快速代码生成 <strong>JS JSX Snippets</strong></li>\n</ul>\n</li>\n<li>编辑器已经内置 git 插件，无需另行配置</li>\n</ul>\n<hr>"},{"title":"发布node模块包","date":"2017-04-30T07:06:53.000Z","_content":"## 发布自己的包\n- 多个js文件组成的就叫包\n- 通常都存在一个入口文件\n- 发布这个文件夹（发布的包不能和已经存在的包相同）\n> 包中必须要有package.json文件\n\n## 向npm官网发包\n- 切换到官方npm\n<!--more-->\n```\nnrm use npm\n```\n- 如果有账号表示登录，没有账号表示新建账号\n```\nnpm addUser\n```\n- 发布\n```\nnpm publish\n```\n- 删除模块\n```\nnpm unpublish <模块名>@<版本号>\n```\n- 查询是否登录过\n```\nnpm whoami\n```\n## 使用idoc进行文档展示\n\n- 安装idoc\n```\nnpm install idoc -g\n```\n","source":"_posts/发布node模块包.md","raw":"---\ntitle: 发布node模块包\ndate: 2017-04-30 15:06:53\ntags: [node,node基础]\ncategories: node\n---\n## 发布自己的包\n- 多个js文件组成的就叫包\n- 通常都存在一个入口文件\n- 发布这个文件夹（发布的包不能和已经存在的包相同）\n> 包中必须要有package.json文件\n\n## 向npm官网发包\n- 切换到官方npm\n<!--more-->\n```\nnrm use npm\n```\n- 如果有账号表示登录，没有账号表示新建账号\n```\nnpm addUser\n```\n- 发布\n```\nnpm publish\n```\n- 删除模块\n```\nnpm unpublish <模块名>@<版本号>\n```\n- 查询是否登录过\n```\nnpm whoami\n```\n## 使用idoc进行文档展示\n\n- 安装idoc\n```\nnpm install idoc -g\n```\n","slug":"发布node模块包","published":1,"updated":"2018-11-19T02:26:47.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4do0045yeh7rd7w2dex","content":"<h2 id=\"发布自己的包\"><a href=\"#发布自己的包\" class=\"headerlink\" title=\"发布自己的包\"></a>发布自己的包</h2><ul>\n<li>多个js文件组成的就叫包</li>\n<li>通常都存在一个入口文件</li>\n<li>发布这个文件夹（发布的包不能和已经存在的包相同）<blockquote>\n<p>包中必须要有package.json文件</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"向npm官网发包\"><a href=\"#向npm官网发包\" class=\"headerlink\" title=\"向npm官网发包\"></a>向npm官网发包</h2><ul>\n<li><p>切换到官方npm</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果有账号表示登录，没有账号表示新建账号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm addUser</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unpublish &lt;模块名&gt;@&lt;版本号&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询是否登录过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm whoami</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用idoc进行文档展示\"><a href=\"#使用idoc进行文档展示\" class=\"headerlink\" title=\"使用idoc进行文档展示\"></a>使用idoc进行文档展示</h2><ul>\n<li>安装idoc<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install idoc -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"发布自己的包\"><a href=\"#发布自己的包\" class=\"headerlink\" title=\"发布自己的包\"></a>发布自己的包</h2><ul>\n<li>多个js文件组成的就叫包</li>\n<li>通常都存在一个入口文件</li>\n<li>发布这个文件夹（发布的包不能和已经存在的包相同）<blockquote>\n<p>包中必须要有package.json文件</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"向npm官网发包\"><a href=\"#向npm官网发包\" class=\"headerlink\" title=\"向npm官网发包\"></a>向npm官网发包</h2><ul>\n<li><p>切换到官方npm</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm use npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果有账号表示登录，没有账号表示新建账号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm addUser</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm unpublish &lt;模块名&gt;@&lt;版本号&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询是否登录过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm whoami</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用idoc进行文档展示\"><a href=\"#使用idoc进行文档展示\" class=\"headerlink\" title=\"使用idoc进行文档展示\"></a>使用idoc进行文档展示</h2><ul>\n<li>安装idoc<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install idoc -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"web前端规范","date":"2017-06-02T02:32:42.000Z","_content":"## web前端规范文档\n### 规范目的\n> 使开发流程更加规范\n\n### 通用规范\n>- TAB键使用两个空格代替（WINDOW 下TAB键占四个空格，LINUX 下TAB键占八个空格）。\n- CSS 样式属性或者JavaScript代码后加 “ ; ” 方便压缩工具 “断句”。\n- 文件内容编码统一为UTF-8。\n- CSS、JavaScript 中的非注释类中文字符必须转换成Unicode编码使用，以避免编码错误时乱码显示。\n\n<!--more-->\n\n### 文件规范\n>- 文件名用英文单词，多个单词使用驼峰命名法。\n- 一些浏览器会将含有这些词的作为广告拦截，文件名、ID、CLASS等所有命名避免以下词汇。  \n```\nad 、 ads 、 adv 、 banner 、 sponsor 、 gg 、 guangg 、 guanggao 等\n```\n\n### HTML书写规范\n- 为每一个html页面的第一行添加标准模式（standard mode）的声明，确保在每个浏览器中拥有一致的表现。\n文档类型声明统一为HTML5声明类型。\n```\n<!DOCTYPE html>\n```\n- 字符编码\n通过明确声明字符编码，能够确保浏览器快速容易的判断页面内容的渲染方式。这样做的好处是，可以避免在HTML中使用字符实体标记（character entity），从而全部与文档编码一致（约定一致采用UTF-8）。\n```\n<meta charset=\"UTF-8\">\n```\n- IE兼容模式\nIE支持通过特定的<meta>标签来确定绘制当前页面所应该采用的IE版本。除非有强烈的特殊需求，否则最好设置为 edge mode ，从而通知IE采用其所支持的最新的模式。\n```\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n```\n\n- 元素\n\n\n1. HTML5元素\n  - section 表示文档中的节、区段，可以和 h1 - h6 一起来显示文档结构。\n  - article 表示一块比较独立的内容或者主题内容，块级元素，比如 blog 的内容，报纸的文章。\n  - aside 表示 article 以外的内容，而且应该和 article 有一定的关系，块级元素。\n  - hgroup 表示一个文档、区段（ section ）的标题组合。\n  - header 表示页眉，页头。\n  - footer 表示页脚。\n  - nav 表示导航。\n  - figure 表示以相对独立的或外引的元素，如 img 、 video 。\n  - figcaption 表示 figure 内容的标题。\n\n  ```\n  <!-- hgroup 示例 -->\n  <hgroup>\n    <h1>文档主标题</h1>\n    <h2>文档副标题</h2>\n  </hgroup>\n\n  <!-- figure 示例 -->\n  <figure>\n    <video src=\"mp4\"></video>\n    <figcaption>示例</figcaption>\n  </figure>\n\n  <figure>\n    <img src=\"img\" alt=\"示例图片\" />\n    <figcaption>示例</figcaption>\n  </figure>\n  ```\n\n2. 结构性元素\n  - p 表示段落。只能包含内联元素，不能包含块级元素。\n  - div 本身无特殊含义，可用于布局。几乎可以包含任何元素。\n  - br 表示换行符。\n  - hr 表示水平分割线。\n  - h1 - h6 表示标题。其中 h1 用于表示当前页面最重要的内容的标题。\n  - blockquote 表示引用，可以包含多个段落。请勿纯粹为了缩进进而使用 blockquote ，大部分浏览器默认将 blockquote 渲染为带有左右缩进。\n  - pre 表示一段格式化好的文本。\n\n3. 头部元素\n  - title 每个页面必须有且仅有一个 title 元素。\n  - base 可用场景：首页、频道等大部分连接都为新窗口打开的页面。\n  - link link 用于引入 css 资源时，可省去 media （默认为 all ）和 type （默认为 text/css ）属性。\n  - style type 默认为 text/css ，可以省去。\n  - script type 属性可以省去。不赞成使用 lang 属性。\n  - noscript 在用户代理不支持 JavaScript 的情况下提供说明。\n\n4. 文本元素\n  - a 存在 href 属性时表示链接，无 href 属性但有 name 属性表示锚点。\n  - em / strong em 表示句意强调，加与不加会引起语义变化，可用于表示不同的心情或者语调；strong 表示重要性强调，可用于局部或全局，strong 强调的是重要性，不会改变句意。\n  - abbr 表示缩写。\n  - sub/sup 主要用于数学和化学公式，sup 还可用于脚注。\n  - span 本身无特殊含义。\n  - ins/del 分别表示从文档中增加（插入）和删除。\n\n5. 媒体元素\n  - img 请勿将img元素作为定位布局的工具，其中的 src 属性必须赋值，必要时给 img 元素增加 alt 属性。\n  - object 可以用来插入 Flash 。\n\n6. 列表元素\n  - dl 表示关联列表，dd 是对 dt 的解释，dt 和 dd 的对应关系比较随意，一个 dt 对应多个 dd 、多个 dt 对应一个 dd ，都合法。可用于名词/单词解释、日程列表、站点目录。\n  - ul 表示无序列表。\n  - ol 表示有序列表，可用于排行榜等。\n  - li 表示列表项，必须是 ul / ol 的子元素。\n\n7. 表单元素\n  - 推荐使用 button 代替 input, 但必须声明 type 。\n  - 表单元素的 name 不能设定为 action , enctype , method , novalidate , target , submit 会导致表单提交混乱。\n\n#### 属性顺序\n1. HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。\n  - CLASS\n  - ID 、name\n  - data-*\n  - src 、 for 、 type 、href\n  - title 、alt\n  - aria-* 、 role\n2. CLASS 用于标识高度可复用组件，因此应该排在首位。 ID 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。如：\n```\n<a class=\"...\" id=\"...\" data-modal=\"toggle\" href=\"#\">示例</a>\n<input class=\"form-control\" type=\"text\">\n<img src=\"img\" alt=\"...\">\n```\n\n#### 文件和目录命名约定\n\n1. 一律小写，必须是英文单词或者汉语拼音，以英语单词优先，多个单词以连字符（ - ）连接。只能出现小写英文字母，数字和连字符。\n2. 很多浏览器会将含有这些词的作为广告拦截：ad 、ads 、 adv 、 banner 、 sponsor 、 gg 、guangg 、guanggao 等 页面中尽量避免采用以上词汇来命名。\n3. 该命令规范适用于所有前端维护的内容和相关目录。（ html 、css 、js 、png 、 gif 、jpg 、ico）。\n\n#### 空格/标签/注释\n\n1. 用两个空格来代替制表符（tab）-- 这是唯一能保证在所有环境下获得一致展现的方法。\n2. 嵌套元素应当缩进依次 -- 即两个空格。\n3. 对于属性的定义，确保全部使用双引号，绝不要使用单引号。\n4. 不要省略可选的结束标签，如：</li> , </body> 。\n5. 习惯性书写注释，方便日后维护。\n\n#### 文件编码约定\n\n所有文件统一采用 UTF-8 无 BOM 编码。换行格式为 unix 格式。\n\n#### id 和 class 命名约定\n\n1. id 和 class 的命名基本原则：内容优先，表现为辅。首先根据内容来命名，如：`#header` , `#footer` , `.main-nav` 如根据内容无法找到合适的命名，可以在结合表现进行命名，如：`col-main` , `col-sub` , `col-extra` , `blue-box`\n2. id 和 class 的名称一律小写，多个单词以连接字符连接，如： `main-wrap`\n3. id 和 class 的名称只能出现，小写字母，数字和连字符( - ) ( js 钩子除外)\n4. id 和 class 的名称尽量使用英文单词命名，如确实找不到合适的单词，可以使用拼音，如：`zhidao-com`\n5. 在不影响语意的情况下，id 和 class 的名称可以适当使用缩写，如：`col` , `nav` , `hd` , `bd` , `fd` （ 缩写只用来表示结构，不允许写任何样式 ）。不要自造缩写。\n6. class 对于选中命名 `.selected` ；对于 `:hover` ，不支持的使用 `.hover` ，隐藏使用 `.hide`。\n7. id 和 class 的选择，如果只是用一次，使用 id ，如果使用多次使用 class ，如果需要和 js 交互，使用 id ，如果需要交互并且页面中有大量重复，请参见下一条。\n8. 对于作为 js 钩子的 id 和 class 命名规则以 “J_”开头（ J ，象形钩子的形状 ），后面加上应有的命名，在使用 class 的时候需要放在最前面。如：`class=\"J_tab-content some-mod-content\"`。（注意：钩子，不允许在 css 中定义任何的样式效果 ）。\n9. 很多浏览器会将含有这些词的作为广告拦截：`ad` 、`ads` 、 ` adv` 、 `banner` 、 `sponsor` 、 `gg` 、 `guangg` 、 `guanggao`等 页面中尽量避免采用以上词汇来命名。\n\n#### 文件引用\n\n1. 页面中不允许出现 css 内容（ 包括行内样式和 style ）。\n2. 每个页面中至多包括3个 css 文件，1个产品级1个模块级1个页面级别。\n\n#### 选择器\n\n1. 命名比较短的词，或者缩写的不允许直接定义样式，如：`.title` , `.hd` , `.bd` ,`.body`必须用上级节点进行限定，如：`.recommend-mod .title`。\n\n#### 通用结构\n\n1. 页面中的块采用如下结构\n```\n<div class=\"mod recommend-mod\">\n  <div class=\"hd recommend-title\">Title</div>\n  <div class=\"bd recommend-body\">contents</div>\n  <div class=\"ft recommend-footer\">footer</div>\n</div>\n```\n没有内容的部分可以省略，其中用来表示结构的 `mod` 、`hd` 、`bd` 、 `ft`不允许直接定义样式（避免嵌套带来样式问题），需要定义样式的时候需要另外增加 class 以控制样式如：\n```\n<div class=\"mod recommend-mod\">\n  <div class=\"hd recommend-title\">Title</div\n  <div class=\"bd recommend-body\">contents</div>\n  <div class=\"ft recommend-footer\">footer</div>\n</div>\n```\n当两个以上的结构不存在的时候可以不采用此结构，如：没有 hd 和 ft ， bd 也可以省略。\n","source":"_posts/前端规范.md","raw":"---\ntitle: web前端规范\ndate: 2017-06-02 10:32:42\ntags: [前端,基础]\ncategories: 规范\n---\n## web前端规范文档\n### 规范目的\n> 使开发流程更加规范\n\n### 通用规范\n>- TAB键使用两个空格代替（WINDOW 下TAB键占四个空格，LINUX 下TAB键占八个空格）。\n- CSS 样式属性或者JavaScript代码后加 “ ; ” 方便压缩工具 “断句”。\n- 文件内容编码统一为UTF-8。\n- CSS、JavaScript 中的非注释类中文字符必须转换成Unicode编码使用，以避免编码错误时乱码显示。\n\n<!--more-->\n\n### 文件规范\n>- 文件名用英文单词，多个单词使用驼峰命名法。\n- 一些浏览器会将含有这些词的作为广告拦截，文件名、ID、CLASS等所有命名避免以下词汇。  \n```\nad 、 ads 、 adv 、 banner 、 sponsor 、 gg 、 guangg 、 guanggao 等\n```\n\n### HTML书写规范\n- 为每一个html页面的第一行添加标准模式（standard mode）的声明，确保在每个浏览器中拥有一致的表现。\n文档类型声明统一为HTML5声明类型。\n```\n<!DOCTYPE html>\n```\n- 字符编码\n通过明确声明字符编码，能够确保浏览器快速容易的判断页面内容的渲染方式。这样做的好处是，可以避免在HTML中使用字符实体标记（character entity），从而全部与文档编码一致（约定一致采用UTF-8）。\n```\n<meta charset=\"UTF-8\">\n```\n- IE兼容模式\nIE支持通过特定的<meta>标签来确定绘制当前页面所应该采用的IE版本。除非有强烈的特殊需求，否则最好设置为 edge mode ，从而通知IE采用其所支持的最新的模式。\n```\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n```\n\n- 元素\n\n\n1. HTML5元素\n  - section 表示文档中的节、区段，可以和 h1 - h6 一起来显示文档结构。\n  - article 表示一块比较独立的内容或者主题内容，块级元素，比如 blog 的内容，报纸的文章。\n  - aside 表示 article 以外的内容，而且应该和 article 有一定的关系，块级元素。\n  - hgroup 表示一个文档、区段（ section ）的标题组合。\n  - header 表示页眉，页头。\n  - footer 表示页脚。\n  - nav 表示导航。\n  - figure 表示以相对独立的或外引的元素，如 img 、 video 。\n  - figcaption 表示 figure 内容的标题。\n\n  ```\n  <!-- hgroup 示例 -->\n  <hgroup>\n    <h1>文档主标题</h1>\n    <h2>文档副标题</h2>\n  </hgroup>\n\n  <!-- figure 示例 -->\n  <figure>\n    <video src=\"mp4\"></video>\n    <figcaption>示例</figcaption>\n  </figure>\n\n  <figure>\n    <img src=\"img\" alt=\"示例图片\" />\n    <figcaption>示例</figcaption>\n  </figure>\n  ```\n\n2. 结构性元素\n  - p 表示段落。只能包含内联元素，不能包含块级元素。\n  - div 本身无特殊含义，可用于布局。几乎可以包含任何元素。\n  - br 表示换行符。\n  - hr 表示水平分割线。\n  - h1 - h6 表示标题。其中 h1 用于表示当前页面最重要的内容的标题。\n  - blockquote 表示引用，可以包含多个段落。请勿纯粹为了缩进进而使用 blockquote ，大部分浏览器默认将 blockquote 渲染为带有左右缩进。\n  - pre 表示一段格式化好的文本。\n\n3. 头部元素\n  - title 每个页面必须有且仅有一个 title 元素。\n  - base 可用场景：首页、频道等大部分连接都为新窗口打开的页面。\n  - link link 用于引入 css 资源时，可省去 media （默认为 all ）和 type （默认为 text/css ）属性。\n  - style type 默认为 text/css ，可以省去。\n  - script type 属性可以省去。不赞成使用 lang 属性。\n  - noscript 在用户代理不支持 JavaScript 的情况下提供说明。\n\n4. 文本元素\n  - a 存在 href 属性时表示链接，无 href 属性但有 name 属性表示锚点。\n  - em / strong em 表示句意强调，加与不加会引起语义变化，可用于表示不同的心情或者语调；strong 表示重要性强调，可用于局部或全局，strong 强调的是重要性，不会改变句意。\n  - abbr 表示缩写。\n  - sub/sup 主要用于数学和化学公式，sup 还可用于脚注。\n  - span 本身无特殊含义。\n  - ins/del 分别表示从文档中增加（插入）和删除。\n\n5. 媒体元素\n  - img 请勿将img元素作为定位布局的工具，其中的 src 属性必须赋值，必要时给 img 元素增加 alt 属性。\n  - object 可以用来插入 Flash 。\n\n6. 列表元素\n  - dl 表示关联列表，dd 是对 dt 的解释，dt 和 dd 的对应关系比较随意，一个 dt 对应多个 dd 、多个 dt 对应一个 dd ，都合法。可用于名词/单词解释、日程列表、站点目录。\n  - ul 表示无序列表。\n  - ol 表示有序列表，可用于排行榜等。\n  - li 表示列表项，必须是 ul / ol 的子元素。\n\n7. 表单元素\n  - 推荐使用 button 代替 input, 但必须声明 type 。\n  - 表单元素的 name 不能设定为 action , enctype , method , novalidate , target , submit 会导致表单提交混乱。\n\n#### 属性顺序\n1. HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。\n  - CLASS\n  - ID 、name\n  - data-*\n  - src 、 for 、 type 、href\n  - title 、alt\n  - aria-* 、 role\n2. CLASS 用于标识高度可复用组件，因此应该排在首位。 ID 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。如：\n```\n<a class=\"...\" id=\"...\" data-modal=\"toggle\" href=\"#\">示例</a>\n<input class=\"form-control\" type=\"text\">\n<img src=\"img\" alt=\"...\">\n```\n\n#### 文件和目录命名约定\n\n1. 一律小写，必须是英文单词或者汉语拼音，以英语单词优先，多个单词以连字符（ - ）连接。只能出现小写英文字母，数字和连字符。\n2. 很多浏览器会将含有这些词的作为广告拦截：ad 、ads 、 adv 、 banner 、 sponsor 、 gg 、guangg 、guanggao 等 页面中尽量避免采用以上词汇来命名。\n3. 该命令规范适用于所有前端维护的内容和相关目录。（ html 、css 、js 、png 、 gif 、jpg 、ico）。\n\n#### 空格/标签/注释\n\n1. 用两个空格来代替制表符（tab）-- 这是唯一能保证在所有环境下获得一致展现的方法。\n2. 嵌套元素应当缩进依次 -- 即两个空格。\n3. 对于属性的定义，确保全部使用双引号，绝不要使用单引号。\n4. 不要省略可选的结束标签，如：</li> , </body> 。\n5. 习惯性书写注释，方便日后维护。\n\n#### 文件编码约定\n\n所有文件统一采用 UTF-8 无 BOM 编码。换行格式为 unix 格式。\n\n#### id 和 class 命名约定\n\n1. id 和 class 的命名基本原则：内容优先，表现为辅。首先根据内容来命名，如：`#header` , `#footer` , `.main-nav` 如根据内容无法找到合适的命名，可以在结合表现进行命名，如：`col-main` , `col-sub` , `col-extra` , `blue-box`\n2. id 和 class 的名称一律小写，多个单词以连接字符连接，如： `main-wrap`\n3. id 和 class 的名称只能出现，小写字母，数字和连字符( - ) ( js 钩子除外)\n4. id 和 class 的名称尽量使用英文单词命名，如确实找不到合适的单词，可以使用拼音，如：`zhidao-com`\n5. 在不影响语意的情况下，id 和 class 的名称可以适当使用缩写，如：`col` , `nav` , `hd` , `bd` , `fd` （ 缩写只用来表示结构，不允许写任何样式 ）。不要自造缩写。\n6. class 对于选中命名 `.selected` ；对于 `:hover` ，不支持的使用 `.hover` ，隐藏使用 `.hide`。\n7. id 和 class 的选择，如果只是用一次，使用 id ，如果使用多次使用 class ，如果需要和 js 交互，使用 id ，如果需要交互并且页面中有大量重复，请参见下一条。\n8. 对于作为 js 钩子的 id 和 class 命名规则以 “J_”开头（ J ，象形钩子的形状 ），后面加上应有的命名，在使用 class 的时候需要放在最前面。如：`class=\"J_tab-content some-mod-content\"`。（注意：钩子，不允许在 css 中定义任何的样式效果 ）。\n9. 很多浏览器会将含有这些词的作为广告拦截：`ad` 、`ads` 、 ` adv` 、 `banner` 、 `sponsor` 、 `gg` 、 `guangg` 、 `guanggao`等 页面中尽量避免采用以上词汇来命名。\n\n#### 文件引用\n\n1. 页面中不允许出现 css 内容（ 包括行内样式和 style ）。\n2. 每个页面中至多包括3个 css 文件，1个产品级1个模块级1个页面级别。\n\n#### 选择器\n\n1. 命名比较短的词，或者缩写的不允许直接定义样式，如：`.title` , `.hd` , `.bd` ,`.body`必须用上级节点进行限定，如：`.recommend-mod .title`。\n\n#### 通用结构\n\n1. 页面中的块采用如下结构\n```\n<div class=\"mod recommend-mod\">\n  <div class=\"hd recommend-title\">Title</div>\n  <div class=\"bd recommend-body\">contents</div>\n  <div class=\"ft recommend-footer\">footer</div>\n</div>\n```\n没有内容的部分可以省略，其中用来表示结构的 `mod` 、`hd` 、`bd` 、 `ft`不允许直接定义样式（避免嵌套带来样式问题），需要定义样式的时候需要另外增加 class 以控制样式如：\n```\n<div class=\"mod recommend-mod\">\n  <div class=\"hd recommend-title\">Title</div\n  <div class=\"bd recommend-body\">contents</div>\n  <div class=\"ft recommend-footer\">footer</div>\n</div>\n```\n当两个以上的结构不存在的时候可以不采用此结构，如：没有 hd 和 ft ， bd 也可以省略。\n","slug":"前端规范","published":1,"updated":"2018-11-19T02:26:47.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4dq0047yeh7274ccsju","content":"<h2 id=\"web前端规范文档\"><a href=\"#web前端规范文档\" class=\"headerlink\" title=\"web前端规范文档\"></a>web前端规范文档</h2><h3 id=\"规范目的\"><a href=\"#规范目的\" class=\"headerlink\" title=\"规范目的\"></a>规范目的</h3><blockquote>\n<p>使开发流程更加规范</p>\n</blockquote>\n<h3 id=\"通用规范\"><a href=\"#通用规范\" class=\"headerlink\" title=\"通用规范\"></a>通用规范</h3><blockquote>\n<ul>\n<li>TAB键使用两个空格代替（WINDOW 下TAB键占四个空格，LINUX 下TAB键占八个空格）。</li>\n<li>CSS 样式属性或者JavaScript代码后加 “ ; ” 方便压缩工具 “断句”。</li>\n<li>文件内容编码统一为UTF-8。</li>\n<li>CSS、JavaScript 中的非注释类中文字符必须转换成Unicode编码使用，以避免编码错误时乱码显示。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"文件规范\"><a href=\"#文件规范\" class=\"headerlink\" title=\"文件规范\"></a>文件规范</h3><blockquote>\n<ul>\n<li>文件名用英文单词，多个单词使用驼峰命名法。</li>\n<li>一些浏览器会将含有这些词的作为广告拦截，文件名、ID、CLASS等所有命名避免以下词汇。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ad 、 ads 、 adv 、 banner 、 sponsor 、 gg 、 guangg 、 guanggao 等</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"HTML书写规范\"><a href=\"#HTML书写规范\" class=\"headerlink\" title=\"HTML书写规范\"></a>HTML书写规范</h3><ul>\n<li><p>为每一个html页面的第一行添加标准模式（standard mode）的声明，确保在每个浏览器中拥有一致的表现。<br>文档类型声明统一为HTML5声明类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符编码<br>通过明确声明字符编码，能够确保浏览器快速容易的判断页面内容的渲染方式。这样做的好处是，可以避免在HTML中使用字符实体标记（character entity），从而全部与文档编码一致（约定一致采用UTF-8）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IE兼容模式<br>IE支持通过特定的<meta>标签来确定绘制当前页面所应该采用的IE版本。除非有强烈的特殊需求，否则最好设置为 edge mode ，从而通知IE采用其所支持的最新的模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>元素</p>\n</li>\n</ul>\n<ol>\n<li><p>HTML5元素</p>\n<ul>\n<li>section 表示文档中的节、区段，可以和 h1 - h6 一起来显示文档结构。</li>\n<li>article 表示一块比较独立的内容或者主题内容，块级元素，比如 blog 的内容，报纸的文章。</li>\n<li>aside 表示 article 以外的内容，而且应该和 article 有一定的关系，块级元素。</li>\n<li>hgroup 表示一个文档、区段（ section ）的标题组合。</li>\n<li>header 表示页眉，页头。</li>\n<li>footer 表示页脚。</li>\n<li>nav 表示导航。</li>\n<li>figure 表示以相对独立的或外引的元素，如 img 、 video 。</li>\n<li>figcaption 表示 figure 内容的标题。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- hgroup 示例 --&gt;</span><br><span class=\"line\">&lt;hgroup&gt;</span><br><span class=\"line\">  &lt;h1&gt;文档主标题&lt;/h1&gt;</span><br><span class=\"line\">  &lt;h2&gt;文档副标题&lt;/h2&gt;</span><br><span class=\"line\">&lt;/hgroup&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- figure 示例 --&gt;</span><br><span class=\"line\">&lt;figure&gt;</span><br><span class=\"line\">  &lt;video src=&quot;mp4&quot;&gt;&lt;/video&gt;</span><br><span class=\"line\">  &lt;figcaption&gt;示例&lt;/figcaption&gt;</span><br><span class=\"line\">&lt;/figure&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;figure&gt;</span><br><span class=\"line\">  &lt;img src=&quot;img&quot; alt=&quot;示例图片&quot; /&gt;</span><br><span class=\"line\">  &lt;figcaption&gt;示例&lt;/figcaption&gt;</span><br><span class=\"line\">&lt;/figure&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结构性元素</p>\n<ul>\n<li>p 表示段落。只能包含内联元素，不能包含块级元素。</li>\n<li>div 本身无特殊含义，可用于布局。几乎可以包含任何元素。</li>\n<li>br 表示换行符。</li>\n<li>hr 表示水平分割线。</li>\n<li>h1 - h6 表示标题。其中 h1 用于表示当前页面最重要的内容的标题。</li>\n<li>blockquote 表示引用，可以包含多个段落。请勿纯粹为了缩进进而使用 blockquote ，大部分浏览器默认将 blockquote 渲染为带有左右缩进。</li>\n<li>pre 表示一段格式化好的文本。</li>\n</ul>\n</li>\n<li><p>头部元素</p>\n<ul>\n<li>title 每个页面必须有且仅有一个 title 元素。</li>\n<li>base 可用场景：首页、频道等大部分连接都为新窗口打开的页面。</li>\n<li>link link 用于引入 css 资源时，可省去 media （默认为 all ）和 type （默认为 text/css ）属性。</li>\n<li>style type 默认为 text/css ，可以省去。</li>\n<li>script type 属性可以省去。不赞成使用 lang 属性。</li>\n<li>noscript 在用户代理不支持 JavaScript 的情况下提供说明。</li>\n</ul>\n</li>\n<li><p>文本元素</p>\n<ul>\n<li>a 存在 href 属性时表示链接，无 href 属性但有 name 属性表示锚点。</li>\n<li>em / strong em 表示句意强调，加与不加会引起语义变化，可用于表示不同的心情或者语调；strong 表示重要性强调，可用于局部或全局，strong 强调的是重要性，不会改变句意。</li>\n<li>abbr 表示缩写。</li>\n<li>sub/sup 主要用于数学和化学公式，sup 还可用于脚注。</li>\n<li>span 本身无特殊含义。</li>\n<li>ins/del 分别表示从文档中增加（插入）和删除。</li>\n</ul>\n</li>\n<li><p>媒体元素</p>\n<ul>\n<li>img 请勿将img元素作为定位布局的工具，其中的 src 属性必须赋值，必要时给 img 元素增加 alt 属性。</li>\n<li>object 可以用来插入 Flash 。</li>\n</ul>\n</li>\n<li><p>列表元素</p>\n<ul>\n<li>dl 表示关联列表，dd 是对 dt 的解释，dt 和 dd 的对应关系比较随意，一个 dt 对应多个 dd 、多个 dt 对应一个 dd ，都合法。可用于名词/单词解释、日程列表、站点目录。</li>\n<li>ul 表示无序列表。</li>\n<li>ol 表示有序列表，可用于排行榜等。</li>\n<li>li 表示列表项，必须是 ul / ol 的子元素。</li>\n</ul>\n</li>\n<li><p>表单元素</p>\n<ul>\n<li>推荐使用 button 代替 input, 但必须声明 type 。</li>\n<li>表单元素的 name 不能设定为 action , enctype , method , novalidate , target , submit 会导致表单提交混乱。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"属性顺序\"><a href=\"#属性顺序\" class=\"headerlink\" title=\"属性顺序\"></a>属性顺序</h4><ol>\n<li>HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。<ul>\n<li>CLASS</li>\n<li>ID 、name</li>\n<li>data-*</li>\n<li>src 、 for 、 type 、href</li>\n<li>title 、alt</li>\n<li>aria-* 、 role</li>\n</ul>\n</li>\n<li>CLASS 用于标识高度可复用组件，因此应该排在首位。 ID 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a class=&quot;...&quot; id=&quot;...&quot; data-modal=&quot;toggle&quot; href=&quot;#&quot;&gt;示例&lt;/a&gt;</span><br><span class=\"line\">&lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;img&quot; alt=&quot;...&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"文件和目录命名约定\"><a href=\"#文件和目录命名约定\" class=\"headerlink\" title=\"文件和目录命名约定\"></a>文件和目录命名约定</h4><ol>\n<li>一律小写，必须是英文单词或者汉语拼音，以英语单词优先，多个单词以连字符（ - ）连接。只能出现小写英文字母，数字和连字符。</li>\n<li>很多浏览器会将含有这些词的作为广告拦截：ad 、ads 、 adv 、 banner 、 sponsor 、 gg 、guangg 、guanggao 等 页面中尽量避免采用以上词汇来命名。</li>\n<li>该命令规范适用于所有前端维护的内容和相关目录。（ html 、css 、js 、png 、 gif 、jpg 、ico）。</li>\n</ol>\n<h4 id=\"空格-标签-注释\"><a href=\"#空格-标签-注释\" class=\"headerlink\" title=\"空格/标签/注释\"></a>空格/标签/注释</h4><ol>\n<li>用两个空格来代替制表符（tab）– 这是唯一能保证在所有环境下获得一致展现的方法。</li>\n<li>嵌套元素应当缩进依次 – 即两个空格。</li>\n<li>对于属性的定义，确保全部使用双引号，绝不要使用单引号。</li>\n<li>不要省略可选的结束标签，如：</li> ,  。\n<li>习惯性书写注释，方便日后维护。</li>\n</ol>\n<h4 id=\"文件编码约定\"><a href=\"#文件编码约定\" class=\"headerlink\" title=\"文件编码约定\"></a>文件编码约定</h4><p>所有文件统一采用 UTF-8 无 BOM 编码。换行格式为 unix 格式。</p>\n<h4 id=\"id-和-class-命名约定\"><a href=\"#id-和-class-命名约定\" class=\"headerlink\" title=\"id 和 class 命名约定\"></a>id 和 class 命名约定</h4><ol>\n<li>id 和 class 的命名基本原则：内容优先，表现为辅。首先根据内容来命名，如：<code>#header</code> , <code>#footer</code> , <code>.main-nav</code> 如根据内容无法找到合适的命名，可以在结合表现进行命名，如：<code>col-main</code> , <code>col-sub</code> , <code>col-extra</code> , <code>blue-box</code></li>\n<li>id 和 class 的名称一律小写，多个单词以连接字符连接，如： <code>main-wrap</code></li>\n<li>id 和 class 的名称只能出现，小写字母，数字和连字符( - ) ( js 钩子除外)</li>\n<li>id 和 class 的名称尽量使用英文单词命名，如确实找不到合适的单词，可以使用拼音，如：<code>zhidao-com</code></li>\n<li>在不影响语意的情况下，id 和 class 的名称可以适当使用缩写，如：<code>col</code> , <code>nav</code> , <code>hd</code> , <code>bd</code> , <code>fd</code> （ 缩写只用来表示结构，不允许写任何样式 ）。不要自造缩写。</li>\n<li>class 对于选中命名 <code>.selected</code> ；对于 <code>:hover</code> ，不支持的使用 <code>.hover</code> ，隐藏使用 <code>.hide</code>。</li>\n<li>id 和 class 的选择，如果只是用一次，使用 id ，如果使用多次使用 class ，如果需要和 js 交互，使用 id ，如果需要交互并且页面中有大量重复，请参见下一条。</li>\n<li>对于作为 js 钩子的 id 和 class 命名规则以 “J_”开头（ J ，象形钩子的形状 ），后面加上应有的命名，在使用 class 的时候需要放在最前面。如：<code>class=&quot;J_tab-content some-mod-content&quot;</code>。（注意：钩子，不允许在 css 中定义任何的样式效果 ）。</li>\n<li>很多浏览器会将含有这些词的作为广告拦截：<code>ad</code> 、<code>ads</code> 、 <code>adv</code> 、 <code>banner</code> 、 <code>sponsor</code> 、 <code>gg</code> 、 <code>guangg</code> 、 <code>guanggao</code>等 页面中尽量避免采用以上词汇来命名。</li>\n</ol>\n<h4 id=\"文件引用\"><a href=\"#文件引用\" class=\"headerlink\" title=\"文件引用\"></a>文件引用</h4><ol>\n<li>页面中不允许出现 css 内容（ 包括行内样式和 style ）。</li>\n<li>每个页面中至多包括3个 css 文件，1个产品级1个模块级1个页面级别。</li>\n</ol>\n<h4 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><ol>\n<li>命名比较短的词，或者缩写的不允许直接定义样式，如：<code>.title</code> , <code>.hd</code> , <code>.bd</code> ,<code>.body</code>必须用上级节点进行限定，如：<code>.recommend-mod .title</code>。</li>\n</ol>\n<h4 id=\"通用结构\"><a href=\"#通用结构\" class=\"headerlink\" title=\"通用结构\"></a>通用结构</h4><ol>\n<li>页面中的块采用如下结构<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;mod recommend-mod&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;hd recommend-title&quot;&gt;Title&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;bd recommend-body&quot;&gt;contents&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ft recommend-footer&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>没有内容的部分可以省略，其中用来表示结构的 <code>mod</code> 、<code>hd</code> 、<code>bd</code> 、 <code>ft</code>不允许直接定义样式（避免嵌套带来样式问题），需要定义样式的时候需要另外增加 class 以控制样式如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;mod recommend-mod&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;hd recommend-title&quot;&gt;Title&lt;/div</span><br><span class=\"line\">  &lt;div class=&quot;bd recommend-body&quot;&gt;contents&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ft recommend-footer&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>当两个以上的结构不存在的时候可以不采用此结构，如：没有 hd 和 ft ， bd 也可以省略。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"web前端规范文档\"><a href=\"#web前端规范文档\" class=\"headerlink\" title=\"web前端规范文档\"></a>web前端规范文档</h2><h3 id=\"规范目的\"><a href=\"#规范目的\" class=\"headerlink\" title=\"规范目的\"></a>规范目的</h3><blockquote>\n<p>使开发流程更加规范</p>\n</blockquote>\n<h3 id=\"通用规范\"><a href=\"#通用规范\" class=\"headerlink\" title=\"通用规范\"></a>通用规范</h3><blockquote>\n<ul>\n<li>TAB键使用两个空格代替（WINDOW 下TAB键占四个空格，LINUX 下TAB键占八个空格）。</li>\n<li>CSS 样式属性或者JavaScript代码后加 “ ; ” 方便压缩工具 “断句”。</li>\n<li>文件内容编码统一为UTF-8。</li>\n<li>CSS、JavaScript 中的非注释类中文字符必须转换成Unicode编码使用，以避免编码错误时乱码显示。</li>\n</ul>\n</blockquote>","more":"<h3 id=\"文件规范\"><a href=\"#文件规范\" class=\"headerlink\" title=\"文件规范\"></a>文件规范</h3><blockquote>\n<ul>\n<li>文件名用英文单词，多个单词使用驼峰命名法。</li>\n<li>一些浏览器会将含有这些词的作为广告拦截，文件名、ID、CLASS等所有命名避免以下词汇。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ad 、 ads 、 adv 、 banner 、 sponsor 、 gg 、 guangg 、 guanggao 等</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"HTML书写规范\"><a href=\"#HTML书写规范\" class=\"headerlink\" title=\"HTML书写规范\"></a>HTML书写规范</h3><ul>\n<li><p>为每一个html页面的第一行添加标准模式（standard mode）的声明，确保在每个浏览器中拥有一致的表现。<br>文档类型声明统一为HTML5声明类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符编码<br>通过明确声明字符编码，能够确保浏览器快速容易的判断页面内容的渲染方式。这样做的好处是，可以避免在HTML中使用字符实体标记（character entity），从而全部与文档编码一致（约定一致采用UTF-8）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IE兼容模式<br>IE支持通过特定的<meta>标签来确定绘制当前页面所应该采用的IE版本。除非有强烈的特殊需求，否则最好设置为 edge mode ，从而通知IE采用其所支持的最新的模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>元素</p>\n</li>\n</ul>\n<ol>\n<li><p>HTML5元素</p>\n<ul>\n<li>section 表示文档中的节、区段，可以和 h1 - h6 一起来显示文档结构。</li>\n<li>article 表示一块比较独立的内容或者主题内容，块级元素，比如 blog 的内容，报纸的文章。</li>\n<li>aside 表示 article 以外的内容，而且应该和 article 有一定的关系，块级元素。</li>\n<li>hgroup 表示一个文档、区段（ section ）的标题组合。</li>\n<li>header 表示页眉，页头。</li>\n<li>footer 表示页脚。</li>\n<li>nav 表示导航。</li>\n<li>figure 表示以相对独立的或外引的元素，如 img 、 video 。</li>\n<li>figcaption 表示 figure 内容的标题。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- hgroup 示例 --&gt;</span><br><span class=\"line\">&lt;hgroup&gt;</span><br><span class=\"line\">  &lt;h1&gt;文档主标题&lt;/h1&gt;</span><br><span class=\"line\">  &lt;h2&gt;文档副标题&lt;/h2&gt;</span><br><span class=\"line\">&lt;/hgroup&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- figure 示例 --&gt;</span><br><span class=\"line\">&lt;figure&gt;</span><br><span class=\"line\">  &lt;video src=&quot;mp4&quot;&gt;&lt;/video&gt;</span><br><span class=\"line\">  &lt;figcaption&gt;示例&lt;/figcaption&gt;</span><br><span class=\"line\">&lt;/figure&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;figure&gt;</span><br><span class=\"line\">  &lt;img src=&quot;img&quot; alt=&quot;示例图片&quot; /&gt;</span><br><span class=\"line\">  &lt;figcaption&gt;示例&lt;/figcaption&gt;</span><br><span class=\"line\">&lt;/figure&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结构性元素</p>\n<ul>\n<li>p 表示段落。只能包含内联元素，不能包含块级元素。</li>\n<li>div 本身无特殊含义，可用于布局。几乎可以包含任何元素。</li>\n<li>br 表示换行符。</li>\n<li>hr 表示水平分割线。</li>\n<li>h1 - h6 表示标题。其中 h1 用于表示当前页面最重要的内容的标题。</li>\n<li>blockquote 表示引用，可以包含多个段落。请勿纯粹为了缩进进而使用 blockquote ，大部分浏览器默认将 blockquote 渲染为带有左右缩进。</li>\n<li>pre 表示一段格式化好的文本。</li>\n</ul>\n</li>\n<li><p>头部元素</p>\n<ul>\n<li>title 每个页面必须有且仅有一个 title 元素。</li>\n<li>base 可用场景：首页、频道等大部分连接都为新窗口打开的页面。</li>\n<li>link link 用于引入 css 资源时，可省去 media （默认为 all ）和 type （默认为 text/css ）属性。</li>\n<li>style type 默认为 text/css ，可以省去。</li>\n<li>script type 属性可以省去。不赞成使用 lang 属性。</li>\n<li>noscript 在用户代理不支持 JavaScript 的情况下提供说明。</li>\n</ul>\n</li>\n<li><p>文本元素</p>\n<ul>\n<li>a 存在 href 属性时表示链接，无 href 属性但有 name 属性表示锚点。</li>\n<li>em / strong em 表示句意强调，加与不加会引起语义变化，可用于表示不同的心情或者语调；strong 表示重要性强调，可用于局部或全局，strong 强调的是重要性，不会改变句意。</li>\n<li>abbr 表示缩写。</li>\n<li>sub/sup 主要用于数学和化学公式，sup 还可用于脚注。</li>\n<li>span 本身无特殊含义。</li>\n<li>ins/del 分别表示从文档中增加（插入）和删除。</li>\n</ul>\n</li>\n<li><p>媒体元素</p>\n<ul>\n<li>img 请勿将img元素作为定位布局的工具，其中的 src 属性必须赋值，必要时给 img 元素增加 alt 属性。</li>\n<li>object 可以用来插入 Flash 。</li>\n</ul>\n</li>\n<li><p>列表元素</p>\n<ul>\n<li>dl 表示关联列表，dd 是对 dt 的解释，dt 和 dd 的对应关系比较随意，一个 dt 对应多个 dd 、多个 dt 对应一个 dd ，都合法。可用于名词/单词解释、日程列表、站点目录。</li>\n<li>ul 表示无序列表。</li>\n<li>ol 表示有序列表，可用于排行榜等。</li>\n<li>li 表示列表项，必须是 ul / ol 的子元素。</li>\n</ul>\n</li>\n<li><p>表单元素</p>\n<ul>\n<li>推荐使用 button 代替 input, 但必须声明 type 。</li>\n<li>表单元素的 name 不能设定为 action , enctype , method , novalidate , target , submit 会导致表单提交混乱。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"属性顺序\"><a href=\"#属性顺序\" class=\"headerlink\" title=\"属性顺序\"></a>属性顺序</h4><ol>\n<li>HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。<ul>\n<li>CLASS</li>\n<li>ID 、name</li>\n<li>data-*</li>\n<li>src 、 for 、 type 、href</li>\n<li>title 、alt</li>\n<li>aria-* 、 role</li>\n</ul>\n</li>\n<li>CLASS 用于标识高度可复用组件，因此应该排在首位。 ID 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a class=&quot;...&quot; id=&quot;...&quot; data-modal=&quot;toggle&quot; href=&quot;#&quot;&gt;示例&lt;/a&gt;</span><br><span class=\"line\">&lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;img&quot; alt=&quot;...&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"文件和目录命名约定\"><a href=\"#文件和目录命名约定\" class=\"headerlink\" title=\"文件和目录命名约定\"></a>文件和目录命名约定</h4><ol>\n<li>一律小写，必须是英文单词或者汉语拼音，以英语单词优先，多个单词以连字符（ - ）连接。只能出现小写英文字母，数字和连字符。</li>\n<li>很多浏览器会将含有这些词的作为广告拦截：ad 、ads 、 adv 、 banner 、 sponsor 、 gg 、guangg 、guanggao 等 页面中尽量避免采用以上词汇来命名。</li>\n<li>该命令规范适用于所有前端维护的内容和相关目录。（ html 、css 、js 、png 、 gif 、jpg 、ico）。</li>\n</ol>\n<h4 id=\"空格-标签-注释\"><a href=\"#空格-标签-注释\" class=\"headerlink\" title=\"空格/标签/注释\"></a>空格/标签/注释</h4><ol>\n<li>用两个空格来代替制表符（tab）– 这是唯一能保证在所有环境下获得一致展现的方法。</li>\n<li>嵌套元素应当缩进依次 – 即两个空格。</li>\n<li>对于属性的定义，确保全部使用双引号，绝不要使用单引号。</li>\n<li>不要省略可选的结束标签，如：</li> ,  。\n<li>习惯性书写注释，方便日后维护。</li>\n</ol>\n<h4 id=\"文件编码约定\"><a href=\"#文件编码约定\" class=\"headerlink\" title=\"文件编码约定\"></a>文件编码约定</h4><p>所有文件统一采用 UTF-8 无 BOM 编码。换行格式为 unix 格式。</p>\n<h4 id=\"id-和-class-命名约定\"><a href=\"#id-和-class-命名约定\" class=\"headerlink\" title=\"id 和 class 命名约定\"></a>id 和 class 命名约定</h4><ol>\n<li>id 和 class 的命名基本原则：内容优先，表现为辅。首先根据内容来命名，如：<code>#header</code> , <code>#footer</code> , <code>.main-nav</code> 如根据内容无法找到合适的命名，可以在结合表现进行命名，如：<code>col-main</code> , <code>col-sub</code> , <code>col-extra</code> , <code>blue-box</code></li>\n<li>id 和 class 的名称一律小写，多个单词以连接字符连接，如： <code>main-wrap</code></li>\n<li>id 和 class 的名称只能出现，小写字母，数字和连字符( - ) ( js 钩子除外)</li>\n<li>id 和 class 的名称尽量使用英文单词命名，如确实找不到合适的单词，可以使用拼音，如：<code>zhidao-com</code></li>\n<li>在不影响语意的情况下，id 和 class 的名称可以适当使用缩写，如：<code>col</code> , <code>nav</code> , <code>hd</code> , <code>bd</code> , <code>fd</code> （ 缩写只用来表示结构，不允许写任何样式 ）。不要自造缩写。</li>\n<li>class 对于选中命名 <code>.selected</code> ；对于 <code>:hover</code> ，不支持的使用 <code>.hover</code> ，隐藏使用 <code>.hide</code>。</li>\n<li>id 和 class 的选择，如果只是用一次，使用 id ，如果使用多次使用 class ，如果需要和 js 交互，使用 id ，如果需要交互并且页面中有大量重复，请参见下一条。</li>\n<li>对于作为 js 钩子的 id 和 class 命名规则以 “J_”开头（ J ，象形钩子的形状 ），后面加上应有的命名，在使用 class 的时候需要放在最前面。如：<code>class=&quot;J_tab-content some-mod-content&quot;</code>。（注意：钩子，不允许在 css 中定义任何的样式效果 ）。</li>\n<li>很多浏览器会将含有这些词的作为广告拦截：<code>ad</code> 、<code>ads</code> 、 <code>adv</code> 、 <code>banner</code> 、 <code>sponsor</code> 、 <code>gg</code> 、 <code>guangg</code> 、 <code>guanggao</code>等 页面中尽量避免采用以上词汇来命名。</li>\n</ol>\n<h4 id=\"文件引用\"><a href=\"#文件引用\" class=\"headerlink\" title=\"文件引用\"></a>文件引用</h4><ol>\n<li>页面中不允许出现 css 内容（ 包括行内样式和 style ）。</li>\n<li>每个页面中至多包括3个 css 文件，1个产品级1个模块级1个页面级别。</li>\n</ol>\n<h4 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h4><ol>\n<li>命名比较短的词，或者缩写的不允许直接定义样式，如：<code>.title</code> , <code>.hd</code> , <code>.bd</code> ,<code>.body</code>必须用上级节点进行限定，如：<code>.recommend-mod .title</code>。</li>\n</ol>\n<h4 id=\"通用结构\"><a href=\"#通用结构\" class=\"headerlink\" title=\"通用结构\"></a>通用结构</h4><ol>\n<li>页面中的块采用如下结构<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;mod recommend-mod&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;hd recommend-title&quot;&gt;Title&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;bd recommend-body&quot;&gt;contents&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ft recommend-footer&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>没有内容的部分可以省略，其中用来表示结构的 <code>mod</code> 、<code>hd</code> 、<code>bd</code> 、 <code>ft</code>不允许直接定义样式（避免嵌套带来样式问题），需要定义样式的时候需要另外增加 class 以控制样式如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;mod recommend-mod&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;hd recommend-title&quot;&gt;Title&lt;/div</span><br><span class=\"line\">  &lt;div class=&quot;bd recommend-body&quot;&gt;contents&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ft recommend-footer&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>当两个以上的结构不存在的时候可以不采用此结构，如：没有 hd 和 ft ， bd 也可以省略。</p>"},{"title":"基于uba前端项目搭建","date":"2018-03-05T02:45:20.000Z","_content":"## 基于 uba 前端项目搭建\n\n### 安装 uba\n\n- 打开命令行工具，执行 `npm install uba -g` 命令进行安装，等待安装完成。\n- 执行 `uba -v` 命令，正常输出 **uba** 版本号，说明安装成功。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png)\n<!--more-->\n### 初始化项目模板\n\n- 执行 `uba init` 命令，选择相应项目模板进行初始化。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png)\n\n- 输入项目名 （此处采用的是 **uba** 多页模板）\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png)\n\n- 回车进行创建模板项目，输入 `Y` 进行确认项目依赖安装。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png)\n\n- 等待模板下载完成。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png)\n\n### 各文件描述\n- 模板项目文件具体描述\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png)\n\n","source":"_posts/基于uba前端项目搭建.md","raw":"---\ntitle: 基于uba前端项目搭建\ndate: 2018-03-05 10:45:20\ntags: [uba,React]\ncategories: node\n---\n## 基于 uba 前端项目搭建\n\n### 安装 uba\n\n- 打开命令行工具，执行 `npm install uba -g` 命令进行安装，等待安装完成。\n- 执行 `uba -v` 命令，正常输出 **uba** 版本号，说明安装成功。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png)\n<!--more-->\n### 初始化项目模板\n\n- 执行 `uba init` 命令，选择相应项目模板进行初始化。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png)\n\n- 输入项目名 （此处采用的是 **uba** 多页模板）\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png)\n\n- 回车进行创建模板项目，输入 `Y` 进行确认项目依赖安装。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png)\n\n- 等待模板下载完成。\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png)\n\n### 各文件描述\n- 模板项目文件具体描述\n![image](http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png)\n\n","slug":"基于uba前端项目搭建","published":1,"updated":"2018-11-19T02:26:47.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4ds004ayeh7665arlct","content":"<h2 id=\"基于-uba-前端项目搭建\"><a href=\"#基于-uba-前端项目搭建\" class=\"headerlink\" title=\"基于 uba 前端项目搭建\"></a>基于 uba 前端项目搭建</h2><h3 id=\"安装-uba\"><a href=\"#安装-uba\" class=\"headerlink\" title=\"安装 uba\"></a>安装 uba</h3><ul>\n<li>打开命令行工具，执行 <code>npm install uba -g</code> 命令进行安装，等待安装完成。</li>\n<li><p>执行 <code>uba -v</code> 命令，正常输出 <strong>uba</strong> 版本号，说明安装成功。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png\" alt=\"image\"></p>\n<a id=\"more\"></a>\n<h3 id=\"初始化项目模板\"><a href=\"#初始化项目模板\" class=\"headerlink\" title=\"初始化项目模板\"></a>初始化项目模板</h3></li>\n<li><p>执行 <code>uba init</code> 命令，选择相应项目模板进行初始化。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png\" alt=\"image\"></p>\n</li>\n<li><p>输入项目名 （此处采用的是 <strong>uba</strong> 多页模板）<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png\" alt=\"image\"></p>\n</li>\n<li><p>回车进行创建模板项目，输入 <code>Y</code> 进行确认项目依赖安装。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png\" alt=\"image\"></p>\n</li>\n<li><p>等待模板下载完成。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png\" alt=\"image\"></p>\n</li>\n</ul>\n<h3 id=\"各文件描述\"><a href=\"#各文件描述\" class=\"headerlink\" title=\"各文件描述\"></a>各文件描述</h3><ul>\n<li>模板项目文件具体描述<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png\" alt=\"image\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"基于-uba-前端项目搭建\"><a href=\"#基于-uba-前端项目搭建\" class=\"headerlink\" title=\"基于 uba 前端项目搭建\"></a>基于 uba 前端项目搭建</h2><h3 id=\"安装-uba\"><a href=\"#安装-uba\" class=\"headerlink\" title=\"安装 uba\"></a>安装 uba</h3><ul>\n<li>打开命令行工具，执行 <code>npm install uba -g</code> 命令进行安装，等待安装完成。</li>\n<li><p>执行 <code>uba -v</code> 命令，正常输出 <strong>uba</strong> 版本号，说明安装成功。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png\" alt=\"image\"></p>","more":"<h3 id=\"初始化项目模板\"><a href=\"#初始化项目模板\" class=\"headerlink\" title=\"初始化项目模板\"></a>初始化项目模板</h3></li>\n<li><p>执行 <code>uba init</code> 命令，选择相应项目模板进行初始化。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png\" alt=\"image\"></p>\n</li>\n<li><p>输入项目名 （此处采用的是 <strong>uba</strong> 多页模板）<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png\" alt=\"image\"></p>\n</li>\n<li><p>回车进行创建模板项目，输入 <code>Y</code> 进行确认项目依赖安装。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png\" alt=\"image\"></p>\n</li>\n<li><p>等待模板下载完成。<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png\" alt=\"image\"></p>\n</li>\n</ul>\n<h3 id=\"各文件描述\"><a href=\"#各文件描述\" class=\"headerlink\" title=\"各文件描述\"></a>各文件描述</h3><ul>\n<li>模板项目文件具体描述<br><img src=\"http://p29pepciw.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png\" alt=\"image\"></li>\n</ul>"},{"title":"相关文档目录","date":"2018-03-05T03:02:47.000Z","_content":"### 相关文档目录\n1. [前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)\n2. [React开发规范1.0](https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/)\n3. [项目中视图相关](https://glud.netlify.com/2018/03/05/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3/)\n4. [基于uba前端项目搭建](https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/)\n5. [基于uba前端mock代理](https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AFmock%E4%BB%A3%E7%90%86/)","source":"_posts/相关文档目录.md","raw":"---\ntitle: 相关文档目录\ndate: 2018-03-05 11:02:47\ntags: [文档目录，规范]\ncategories: 初始\n---\n### 相关文档目录\n1. [前端开发环境及工具](https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/)\n2. [React开发规范1.0](https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/)\n3. [项目中视图相关](https://glud.netlify.com/2018/03/05/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3/)\n4. [基于uba前端项目搭建](https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/)\n5. [基于uba前端mock代理](https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AFmock%E4%BB%A3%E7%90%86/)","slug":"相关文档目录","published":1,"updated":"2018-11-19T02:26:47.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4du004dyeh7vqokvy2t","content":"<h3 id=\"相关文档目录\"><a href=\"#相关文档目录\" class=\"headerlink\" title=\"相关文档目录\"></a>相关文档目录</h3><ol>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/\" target=\"_blank\" rel=\"noopener\">React开发规范1.0</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3/\" target=\"_blank\" rel=\"noopener\">项目中视图相关</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/\" target=\"_blank\" rel=\"noopener\">基于uba前端项目搭建</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AFmock%E4%BB%A3%E7%90%86/\" target=\"_blank\" rel=\"noopener\">基于uba前端mock代理</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关文档目录\"><a href=\"#相关文档目录\" class=\"headerlink\" title=\"相关文档目录\"></a>相关文档目录</h3><ol>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">前端开发环境及工具</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/react%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%831-0/\" target=\"_blank\" rel=\"noopener\">React开发规范1.0</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3/\" target=\"_blank\" rel=\"noopener\">项目中视图相关</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/\" target=\"_blank\" rel=\"noopener\">基于uba前端项目搭建</a></li>\n<li><a href=\"https://glud.netlify.com/2018/03/05/%E5%9F%BA%E4%BA%8Euba%E5%89%8D%E7%AB%AFmock%E4%BB%A3%E7%90%86/\" target=\"_blank\" rel=\"noopener\">基于uba前端mock代理</a></li>\n</ol>\n"},{"title":"基于uba前端mock代理","date":"2018-03-05T02:28:40.000Z","_content":"## mock 代理\n\n>1. uba 自带 mock 代理插件，默认配置为开启代理功能。\n>2. 数据模拟功能对开发环境有效，生产环境无效。\n\n#### 1.数据模拟配置\n- 数据模拟功能默认开启。\n> `uba.config.js` 配置文件相关配置项\n```\n// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效\nconst proxyConfig = [{\n  enable : false, // false -> 关闭代理，数据模拟开始\n  router: \"/\", // 接口地址路由\n  url: \"cnodejs.org\",\n  options : {\n    filter : function(req,res){\n      return (req.url.indexOf(\"webpack_hmr\") > -1 ? false : true);\n    }\n  }\n}];\n```\n<!--more-->\n- 配置 mock 配置文件\n> 模板根目录下`uba.mock.js`文件为 mock 配置文件。\n```\n/*\n * 配置数据模拟\n*/\n\nmodule.exports = {\n  \"GET\": [{ // 需要模拟的 get 请求\n    \"/User/Get\": \"./mock/api/user/get.json\"\n  }],\n  \"POST\": [{ // 需要模拟的 post 请求\n    \"/User/Post\": \"./mock/api/user/post.json\"\n  }]\n}\n```\n#### 2.代理配置\n> 1.mock 代理主要解决跨域请求的问题。\n>\n> 2.开启代理服务，需要前端开发环境和后台开发环境在相同网络当中（即相同局域网内同一网段）。并能正常 `ping` 通。\n\n> `uba.config.js` 配置文件相关配置项\n\n```\n// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效\nconst proxyConfig = [{\n  enable : true, // true -> 开启代理，数据模拟失效\n  router: \"/\", // 接口地址路由\n  url: \"192.168.137.1:8080\", // 设置后端接口服务ip地址\n  options : {\n    filter : function(req,res){\n      return (req.url.indexOf(\"webpack_hmr\") > -1 ? false : true);\n    }\n  }\n}];\n```","source":"_posts/基于uba前端mock代理.md","raw":"---\ntitle: 基于uba前端mock代理\ndate: 2018-03-05 10:28:40\ntags: [uba,mock]\ncategories: node\n---\n## mock 代理\n\n>1. uba 自带 mock 代理插件，默认配置为开启代理功能。\n>2. 数据模拟功能对开发环境有效，生产环境无效。\n\n#### 1.数据模拟配置\n- 数据模拟功能默认开启。\n> `uba.config.js` 配置文件相关配置项\n```\n// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效\nconst proxyConfig = [{\n  enable : false, // false -> 关闭代理，数据模拟开始\n  router: \"/\", // 接口地址路由\n  url: \"cnodejs.org\",\n  options : {\n    filter : function(req,res){\n      return (req.url.indexOf(\"webpack_hmr\") > -1 ? false : true);\n    }\n  }\n}];\n```\n<!--more-->\n- 配置 mock 配置文件\n> 模板根目录下`uba.mock.js`文件为 mock 配置文件。\n```\n/*\n * 配置数据模拟\n*/\n\nmodule.exports = {\n  \"GET\": [{ // 需要模拟的 get 请求\n    \"/User/Get\": \"./mock/api/user/get.json\"\n  }],\n  \"POST\": [{ // 需要模拟的 post 请求\n    \"/User/Post\": \"./mock/api/user/post.json\"\n  }]\n}\n```\n#### 2.代理配置\n> 1.mock 代理主要解决跨域请求的问题。\n>\n> 2.开启代理服务，需要前端开发环境和后台开发环境在相同网络当中（即相同局域网内同一网段）。并能正常 `ping` 通。\n\n> `uba.config.js` 配置文件相关配置项\n\n```\n// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效\nconst proxyConfig = [{\n  enable : true, // true -> 开启代理，数据模拟失效\n  router: \"/\", // 接口地址路由\n  url: \"192.168.137.1:8080\", // 设置后端接口服务ip地址\n  options : {\n    filter : function(req,res){\n      return (req.url.indexOf(\"webpack_hmr\") > -1 ? false : true);\n    }\n  }\n}];\n```","slug":"基于uba前端mock代理","published":1,"updated":"2018-11-19T02:26:47.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4dv004gyeh78py2by02","content":"<h2 id=\"mock-代理\"><a href=\"#mock-代理\" class=\"headerlink\" title=\"mock 代理\"></a>mock 代理</h2><blockquote>\n<ol>\n<li>uba 自带 mock 代理插件，默认配置为开启代理功能。</li>\n<li>数据模拟功能对开发环境有效，生产环境无效。</li>\n</ol>\n</blockquote>\n<h4 id=\"1-数据模拟配置\"><a href=\"#1-数据模拟配置\" class=\"headerlink\" title=\"1.数据模拟配置\"></a>1.数据模拟配置</h4><ul>\n<li>数据模拟功能默认开启。<blockquote>\n<p><code>uba.config.js</code> 配置文件相关配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效</span><br><span class=\"line\">const proxyConfig = [&#123;</span><br><span class=\"line\">  enable : false, // false -&gt; 关闭代理，数据模拟开始</span><br><span class=\"line\">  router: &quot;/&quot;, // 接口地址路由</span><br><span class=\"line\">  url: &quot;cnodejs.org&quot;,</span><br><span class=\"line\">  options : &#123;</span><br><span class=\"line\">    filter : function(req,res)&#123;</span><br><span class=\"line\">      return (req.url.indexOf(&quot;webpack_hmr&quot;) &gt; -1 ? false : true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>配置 mock 配置文件<blockquote>\n<p>模板根目录下<code>uba.mock.js</code>文件为 mock 配置文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 配置数据模拟</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  &quot;GET&quot;: [&#123; // 需要模拟的 get 请求</span><br><span class=\"line\">    &quot;/User/Get&quot;: &quot;./mock/api/user/get.json&quot;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  &quot;POST&quot;: [&#123; // 需要模拟的 post 请求</span><br><span class=\"line\">    &quot;/User/Post&quot;: &quot;./mock/api/user/post.json&quot;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-代理配置\"><a href=\"#2-代理配置\" class=\"headerlink\" title=\"2.代理配置\"></a>2.代理配置</h4><blockquote>\n<p>1.mock 代理主要解决跨域请求的问题。</p>\n<p>2.开启代理服务，需要前端开发环境和后台开发环境在相同网络当中（即相同局域网内同一网段）。并能正常 <code>ping</code> 通。</p>\n</blockquote>\n<blockquote>\n<p><code>uba.config.js</code> 配置文件相关配置项</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效</span><br><span class=\"line\">const proxyConfig = [&#123;</span><br><span class=\"line\">  enable : true, // true -&gt; 开启代理，数据模拟失效</span><br><span class=\"line\">  router: &quot;/&quot;, // 接口地址路由</span><br><span class=\"line\">  url: &quot;192.168.137.1:8080&quot;, // 设置后端接口服务ip地址</span><br><span class=\"line\">  options : &#123;</span><br><span class=\"line\">    filter : function(req,res)&#123;</span><br><span class=\"line\">      return (req.url.indexOf(&quot;webpack_hmr&quot;) &gt; -1 ? false : true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"mock-代理\"><a href=\"#mock-代理\" class=\"headerlink\" title=\"mock 代理\"></a>mock 代理</h2><blockquote>\n<ol>\n<li>uba 自带 mock 代理插件，默认配置为开启代理功能。</li>\n<li>数据模拟功能对开发环境有效，生产环境无效。</li>\n</ol>\n</blockquote>\n<h4 id=\"1-数据模拟配置\"><a href=\"#1-数据模拟配置\" class=\"headerlink\" title=\"1.数据模拟配置\"></a>1.数据模拟配置</h4><ul>\n<li>数据模拟功能默认开启。<blockquote>\n<p><code>uba.config.js</code> 配置文件相关配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效</span><br><span class=\"line\">const proxyConfig = [&#123;</span><br><span class=\"line\">  enable : false, // false -&gt; 关闭代理，数据模拟开始</span><br><span class=\"line\">  router: &quot;/&quot;, // 接口地址路由</span><br><span class=\"line\">  url: &quot;cnodejs.org&quot;,</span><br><span class=\"line\">  options : &#123;</span><br><span class=\"line\">    filter : function(req,res)&#123;</span><br><span class=\"line\">      return (req.url.indexOf(&quot;webpack_hmr&quot;) &gt; -1 ? false : true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>","more":"<ul>\n<li>配置 mock 配置文件<blockquote>\n<p>模板根目录下<code>uba.mock.js</code>文件为 mock 配置文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 配置数据模拟</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  &quot;GET&quot;: [&#123; // 需要模拟的 get 请求</span><br><span class=\"line\">    &quot;/User/Get&quot;: &quot;./mock/api/user/get.json&quot;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  &quot;POST&quot;: [&#123; // 需要模拟的 post 请求</span><br><span class=\"line\">    &quot;/User/Post&quot;: &quot;./mock/api/user/post.json&quot;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-代理配置\"><a href=\"#2-代理配置\" class=\"headerlink\" title=\"2.代理配置\"></a>2.代理配置</h4><blockquote>\n<p>1.mock 代理主要解决跨域请求的问题。</p>\n<p>2.开启代理服务，需要前端开发环境和后台开发环境在相同网络当中（即相同局域网内同一网段）。并能正常 <code>ping</code> 通。</p>\n</blockquote>\n<blockquote>\n<p><code>uba.config.js</code> 配置文件相关配置项</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代理模式切换，enable:true启用代理，数据模拟失效.只对开发环境有效</span><br><span class=\"line\">const proxyConfig = [&#123;</span><br><span class=\"line\">  enable : true, // true -&gt; 开启代理，数据模拟失效</span><br><span class=\"line\">  router: &quot;/&quot;, // 接口地址路由</span><br><span class=\"line\">  url: &quot;192.168.137.1:8080&quot;, // 设置后端接口服务ip地址</span><br><span class=\"line\">  options : &#123;</span><br><span class=\"line\">    filter : function(req,res)&#123;</span><br><span class=\"line\">      return (req.url.indexOf(&quot;webpack_hmr&quot;) &gt; -1 ? false : true);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>"},{"title":"项目中视图相关","date":"2018-03-05T02:47:34.000Z","_content":"### 视图文档\n\n[Toc]\n\n---\n#### 样式文件引入\n\n1.  引入最新版`tinper-bee`样式文件\n\n    ```\n     // 旧版样式文件 \n    <link rel=\"stylesheet\" href=\"//design.yonyoucloud.com/static/tinper-bee/0.6.2/assets/tinper-bee.min.css\">\n    // 新版样式文件\n     <link rel=\"stylesheet\" href=\"//design.yonyoucloud.com/static/tinper-bee/1.2.9/assets/tinper-bee.css\">\n    ```\n<!--more-->\n2.  引入公共样式文件\n    > 在节点页面`less`文件中引入`public.less`文件即可\n\n    ```\n    @import \"~Static/css/public.less\";\n    ```\n#### 公共样式的使用\n> 公共样式的存在为服务各节点页面风格、布局、尺寸等相关样式的一致性\n\n1.  使用说明\n\n    `public.less`提供基本弹性盒子布局、基本尺寸、基本通用类样式等\n    ```css\n    // 基本尺寸类 如下\n    .width-all {...\n    }\n    .width-240 {...\n    }\n\n    // 位置类 如下\n    .margin-top-5 {...\n    }\n    .padding-0 {...\n    }\n\n    // 布局类\n    .n-left {...\n    }\n    .n-right {...\n    }\n    .n-center {...\n    }\n    .n-row {...\n    }\n    .n-all {...\n    }\n    .n-cell-1 {...\n    }\n    .n-cell-2 {...\n    }\n    .n-cell-3 {...\n    }\n    .n-cell-4 {...\n    }\n\n    // 整体功能类\n    // 按钮是 tabs 切换样式\n    .border-tabs {...\n    }\n    // 必须要和 .border-tabs 一起使用\n    .more-tabs {...\n    }   \n    ```\n    在指定节点添加相应`class`即可使用\n    \n#### 全局样式变量的使用\n> 公共样式变量的存在只为统一大家对视图中的颜色、宽高像素值、字号等基本元素的样式修饰\n\n1.  使用说明\n\n    `global.less` 文件，包含如下色值（未展示完全）\n    ```\n    @e1hong: #E14C46;\n    @echong: #CE2C25;\n    @eehong: #EE524B;\n    @33hei: #333333;\n    @25hei: #252525;\n    @66hui: #666666;\n    @99hui: #999999;\n    ```\n    `a.less`文件（某节点样式文件）\n    ```css\n    @import '~Static/css/public.less';\n    // 定义文字颜色\n    .title {\n        color: @e1hong;\n    }\n    ```\n    这样就可以给`a`节点中`.title`元素文字颜色设置为`#E14C46`\n","source":"_posts/项目中视图相关.md","raw":"---\ntitle: 项目中视图相关\ndate: 2018-03-05 10:47:34\ntags: [React,Css]\ncategories: React\n---\n### 视图文档\n\n[Toc]\n\n---\n#### 样式文件引入\n\n1.  引入最新版`tinper-bee`样式文件\n\n    ```\n     // 旧版样式文件 \n    <link rel=\"stylesheet\" href=\"//design.yonyoucloud.com/static/tinper-bee/0.6.2/assets/tinper-bee.min.css\">\n    // 新版样式文件\n     <link rel=\"stylesheet\" href=\"//design.yonyoucloud.com/static/tinper-bee/1.2.9/assets/tinper-bee.css\">\n    ```\n<!--more-->\n2.  引入公共样式文件\n    > 在节点页面`less`文件中引入`public.less`文件即可\n\n    ```\n    @import \"~Static/css/public.less\";\n    ```\n#### 公共样式的使用\n> 公共样式的存在为服务各节点页面风格、布局、尺寸等相关样式的一致性\n\n1.  使用说明\n\n    `public.less`提供基本弹性盒子布局、基本尺寸、基本通用类样式等\n    ```css\n    // 基本尺寸类 如下\n    .width-all {...\n    }\n    .width-240 {...\n    }\n\n    // 位置类 如下\n    .margin-top-5 {...\n    }\n    .padding-0 {...\n    }\n\n    // 布局类\n    .n-left {...\n    }\n    .n-right {...\n    }\n    .n-center {...\n    }\n    .n-row {...\n    }\n    .n-all {...\n    }\n    .n-cell-1 {...\n    }\n    .n-cell-2 {...\n    }\n    .n-cell-3 {...\n    }\n    .n-cell-4 {...\n    }\n\n    // 整体功能类\n    // 按钮是 tabs 切换样式\n    .border-tabs {...\n    }\n    // 必须要和 .border-tabs 一起使用\n    .more-tabs {...\n    }   \n    ```\n    在指定节点添加相应`class`即可使用\n    \n#### 全局样式变量的使用\n> 公共样式变量的存在只为统一大家对视图中的颜色、宽高像素值、字号等基本元素的样式修饰\n\n1.  使用说明\n\n    `global.less` 文件，包含如下色值（未展示完全）\n    ```\n    @e1hong: #E14C46;\n    @echong: #CE2C25;\n    @eehong: #EE524B;\n    @33hei: #333333;\n    @25hei: #252525;\n    @66hui: #666666;\n    @99hui: #999999;\n    ```\n    `a.less`文件（某节点样式文件）\n    ```css\n    @import '~Static/css/public.less';\n    // 定义文字颜色\n    .title {\n        color: @e1hong;\n    }\n    ```\n    这样就可以给`a`节点中`.title`元素文字颜色设置为`#E14C46`\n","slug":"项目中视图相关","published":1,"updated":"2018-11-19T02:26:47.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjonqk4dw004kyeh753t2ujp8","content":"<h3 id=\"视图文档\"><a href=\"#视图文档\" class=\"headerlink\" title=\"视图文档\"></a>视图文档</h3><p>[Toc]</p>\n<hr>\n<h4 id=\"样式文件引入\"><a href=\"#样式文件引入\" class=\"headerlink\" title=\"样式文件引入\"></a>样式文件引入</h4><ol>\n<li><p>引入最新版<code>tinper-bee</code>样式文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 旧版样式文件 </span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;//design.yonyoucloud.com/static/tinper-bee/0.6.2/assets/tinper-bee.min.css&quot;&gt;</span><br><span class=\"line\">// 新版样式文件</span><br><span class=\"line\"> &lt;link rel=&quot;stylesheet&quot; href=&quot;//design.yonyoucloud.com/static/tinper-bee/1.2.9/assets/tinper-bee.css&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><p>引入公共样式文件</p>\n<blockquote>\n<p>在节点页面<code>less</code>文件中引入<code>public.less</code>文件即可</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;~Static/css/public.less&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"公共样式的使用\"><a href=\"#公共样式的使用\" class=\"headerlink\" title=\"公共样式的使用\"></a>公共样式的使用</h4><blockquote>\n<p>公共样式的存在为服务各节点页面风格、布局、尺寸等相关样式的一致性</p>\n</blockquote>\n<ol>\n<li><p>使用说明</p>\n<p><code>public.less</code>提供基本弹性盒子布局、基本尺寸、基本通用类样式等</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 基本尺寸类 如下</span><br><span class=\"line\">.width-all &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.width-240 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 位置类 如下</span><br><span class=\"line\">.margin-top-5 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.padding-0 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 布局类</span><br><span class=\"line\">.n-left &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-right &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-center &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-row &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-all &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-1 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-2 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-3 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-4 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 整体功能类</span><br><span class=\"line\">// 按钮是 tabs 切换样式</span><br><span class=\"line\">.border-tabs &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 必须要和 .border-tabs 一起使用</span><br><span class=\"line\">.more-tabs &#123;...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在指定节点添加相应<code>class</code>即可使用</p>\n</li>\n</ol>\n<h4 id=\"全局样式变量的使用\"><a href=\"#全局样式变量的使用\" class=\"headerlink\" title=\"全局样式变量的使用\"></a>全局样式变量的使用</h4><blockquote>\n<p>公共样式变量的存在只为统一大家对视图中的颜色、宽高像素值、字号等基本元素的样式修饰</p>\n</blockquote>\n<ol>\n<li><p>使用说明</p>\n<p><code>global.less</code> 文件，包含如下色值（未展示完全）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@e1hong: #E14C46;</span><br><span class=\"line\">@echong: #CE2C25;</span><br><span class=\"line\">@eehong: #EE524B;</span><br><span class=\"line\">@33hei: #333333;</span><br><span class=\"line\">@25hei: #252525;</span><br><span class=\"line\">@66hui: #666666;</span><br><span class=\"line\">@99hui: #999999;</span><br></pre></td></tr></table></figure>\n<p><code>a.less</code>文件（某节点样式文件）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~Static/css/public.less'</span>;</span><br><span class=\"line\">// 定义文字颜色</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: @e1hong;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以给<code>a</code>节点中<code>.title</code>元素文字颜色设置为<code>#E14C46</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"视图文档\"><a href=\"#视图文档\" class=\"headerlink\" title=\"视图文档\"></a>视图文档</h3><p>[Toc]</p>\n<hr>\n<h4 id=\"样式文件引入\"><a href=\"#样式文件引入\" class=\"headerlink\" title=\"样式文件引入\"></a>样式文件引入</h4><ol>\n<li><p>引入最新版<code>tinper-bee</code>样式文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 旧版样式文件 </span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;//design.yonyoucloud.com/static/tinper-bee/0.6.2/assets/tinper-bee.min.css&quot;&gt;</span><br><span class=\"line\">// 新版样式文件</span><br><span class=\"line\"> &lt;link rel=&quot;stylesheet&quot; href=&quot;//design.yonyoucloud.com/static/tinper-bee/1.2.9/assets/tinper-bee.css&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"2\">\n<li><p>引入公共样式文件</p>\n<blockquote>\n<p>在节点页面<code>less</code>文件中引入<code>public.less</code>文件即可</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;~Static/css/public.less&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"公共样式的使用\"><a href=\"#公共样式的使用\" class=\"headerlink\" title=\"公共样式的使用\"></a>公共样式的使用</h4><blockquote>\n<p>公共样式的存在为服务各节点页面风格、布局、尺寸等相关样式的一致性</p>\n</blockquote>\n<ol>\n<li><p>使用说明</p>\n<p><code>public.less</code>提供基本弹性盒子布局、基本尺寸、基本通用类样式等</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 基本尺寸类 如下</span><br><span class=\"line\">.width-all &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.width-240 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 位置类 如下</span><br><span class=\"line\">.margin-top-5 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.padding-0 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 布局类</span><br><span class=\"line\">.n-left &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-right &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-center &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-row &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-all &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-1 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-2 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-3 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.n-cell-4 &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 整体功能类</span><br><span class=\"line\">// 按钮是 tabs 切换样式</span><br><span class=\"line\">.border-tabs &#123;...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 必须要和 .border-tabs 一起使用</span><br><span class=\"line\">.more-tabs &#123;...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在指定节点添加相应<code>class</code>即可使用</p>\n</li>\n</ol>\n<h4 id=\"全局样式变量的使用\"><a href=\"#全局样式变量的使用\" class=\"headerlink\" title=\"全局样式变量的使用\"></a>全局样式变量的使用</h4><blockquote>\n<p>公共样式变量的存在只为统一大家对视图中的颜色、宽高像素值、字号等基本元素的样式修饰</p>\n</blockquote>\n<ol>\n<li><p>使用说明</p>\n<p><code>global.less</code> 文件，包含如下色值（未展示完全）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@e1hong: #E14C46;</span><br><span class=\"line\">@echong: #CE2C25;</span><br><span class=\"line\">@eehong: #EE524B;</span><br><span class=\"line\">@33hei: #333333;</span><br><span class=\"line\">@25hei: #252525;</span><br><span class=\"line\">@66hui: #666666;</span><br><span class=\"line\">@99hui: #999999;</span><br></pre></td></tr></table></figure>\n<p><code>a.less</code>文件（某节点样式文件）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~Static/css/public.less'</span>;</span><br><span class=\"line\">// 定义文字颜色</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: @e1hong;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以给<code>a</code>节点中<code>.title</code>元素文字颜色设置为<code>#E14C46</code></p>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjonqk49x0000yeh7kqkw097e","category_id":"cjonqk4a10002yeh76ldyvdrd","_id":"cjonqk4a7000cyeh7p81j8n2p"},{"post_id":"cjonqk4a00001yeh78fj8stzf","category_id":"cjonqk4a50007yeh7028vnh20","_id":"cjonqk4ab000iyeh7wv5vw4kr"},{"post_id":"cjonqk4a30004yeh7h4mo2gw7","category_id":"cjonqk4a10002yeh76ldyvdrd","_id":"cjonqk4ad000nyeh71t8514z9"},{"post_id":"cjonqk4a30005yeh7aalv71pa","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4af000uyeh7haw428te"},{"post_id":"cjonqk4a40006yeh74c2okjlp","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4ah000zyeh7dod7kxrl"},{"post_id":"cjonqk4a5000ayeh7xbi05gnp","category_id":"cjonqk4af000tyeh76pgndufx","_id":"cjonqk4aj0016yeh7dri9snvj"},{"post_id":"cjonqk4a6000byeh7j2cguqqs","category_id":"cjonqk4af000tyeh76pgndufx","_id":"cjonqk4al001cyeh76is0ejjv"},{"post_id":"cjonqk4aj0017yeh7gtfkwyn3","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4an001hyeh77fqbhvzt"},{"post_id":"cjonqk4a8000fyeh7k86fswhe","category_id":"cjonqk4af000tyeh76pgndufx","_id":"cjonqk4ap001lyeh7e21woao4"},{"post_id":"cjonqk4ak0019yeh7sg8mc8t0","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4aq001pyeh71wg5i07a"},{"post_id":"cjonqk4al001dyeh7djjwfhkp","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4ar001tyeh7aczhsw8g"},{"post_id":"cjonqk4a9000gyeh7vbn5krbs","category_id":"cjonqk4af000tyeh76pgndufx","_id":"cjonqk4at001xyeh7a01him20"},{"post_id":"cjonqk4an001gyeh7fnxg8oiu","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4at0020yeh7qxie1wnf"},{"post_id":"cjonqk4ab000kyeh7r1t3r3rn","category_id":"cjonqk4af000tyeh76pgndufx","_id":"cjonqk4au0023yeh71yonzm0v"},{"post_id":"cjonqk4ap001oyeh772xbfrhp","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4au0026yeh7g43afhjz"},{"post_id":"cjonqk4aq001syeh751q54f3o","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4av0029yeh77m4q4znc"},{"post_id":"cjonqk4ac000myeh7p2jp3gin","category_id":"cjonqk4af000tyeh76pgndufx","_id":"cjonqk4av002byeh7ft04le4g"},{"post_id":"cjonqk4ad000ryeh7sn92qoj3","category_id":"cjonqk4af000tyeh76pgndufx","_id":"cjonqk4av002fyeh726b3rh1r"},{"post_id":"cjonqk4ae000syeh7k4aojmlh","category_id":"cjonqk4au0025yeh70amvk8tu","_id":"cjonqk4aw002hyeh7ce7xotgp"},{"post_id":"cjonqk4af000wyeh7o1t7c2aw","category_id":"cjonqk4av002cyeh7t2vs8jl0","_id":"cjonqk4ax002oyeh7232y4vq7"},{"post_id":"cjonqk4ah0012yeh7xdwmk7og","category_id":"cjonqk4au0025yeh70amvk8tu","_id":"cjonqk4ay002syeh7xgfdci3i"},{"post_id":"cjonqk4ai0014yeh7nn58njvk","category_id":"cjonqk4ax002nyeh7ug99kexi","_id":"cjonqk4az002wyeh7d2ow2zay"},{"post_id":"cjonqk4ao001kyeh77ynxr3l9","category_id":"cjonqk4az002tyeh7zsk45c6a","_id":"cjonqk4b00031yeh7jt78bha6"},{"post_id":"cjonqk4as001wyeh793lse105","category_id":"cjonqk4av002cyeh7t2vs8jl0","_id":"cjonqk4b00033yeh7hhjct64v"},{"post_id":"cjonqk4do0045yeh7rd7w2dex","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4dv004eyeh7pm1c53kg"},{"post_id":"cjonqk4dq0047yeh7274ccsju","category_id":"cjonqk4a50007yeh7028vnh20","_id":"cjonqk4dw004hyeh76gzrq37k"},{"post_id":"cjonqk4ds004ayeh7665arlct","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4dx004lyeh7bbatlw4n"},{"post_id":"cjonqk4du004dyeh7vqokvy2t","category_id":"cjonqk4az002tyeh7zsk45c6a","_id":"cjonqk4dx004nyeh7fwxm63z4"},{"post_id":"cjonqk4dv004gyeh78py2by02","category_id":"cjonqk4aa000hyeh7qm0tzuf4","_id":"cjonqk4dy004ryeh7z0zx9ro6"},{"post_id":"cjonqk4dw004kyeh753t2ujp8","category_id":"cjonqk4dy004oyeh7v543j9dd","_id":"cjonqk4e0004vyeh7hdyazuxd"},{"post_id":"cjonqk4ag000yyeh763xhl0ok","category_id":"cjonqq0k9004zyefy83sw7l7v","_id":"cjonqq0ka0052yefyt1lid9y3"}],"PostTag":[{"post_id":"cjonqk49x0000yeh7kqkw097e","tag_id":"cjonqk4a20003yeh7yvm9marc","_id":"cjonqk4a50009yeh7ysyi5t2z"},{"post_id":"cjonqk4a00001yeh78fj8stzf","tag_id":"cjonqk4a50008yeh7qpnz2mg1","_id":"cjonqk4ac000lyeh7b3j14u08"},{"post_id":"cjonqk4a00001yeh78fj8stzf","tag_id":"cjonqk4a7000eyeh7ks132vfo","_id":"cjonqk4ad000oyeh7f2nw3xia"},{"post_id":"cjonqk4a30004yeh7h4mo2gw7","tag_id":"cjonqk4a50008yeh7qpnz2mg1","_id":"cjonqk4ag000xyeh76jfgyz81"},{"post_id":"cjonqk4a30004yeh7h4mo2gw7","tag_id":"cjonqk4ad000qyeh7nw2ule8k","_id":"cjonqk4ah0010yeh7r92aaryy"},{"post_id":"cjonqk4a30005yeh7aalv71pa","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4al001ayeh75eiftehs"},{"post_id":"cjonqk4a30005yeh7aalv71pa","tag_id":"cjonqk4ai0013yeh7gd0252xv","_id":"cjonqk4am001eyeh77c5sifhk"},{"post_id":"cjonqk4ak0019yeh7sg8mc8t0","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4an001iyeh7n5t6i56w"},{"post_id":"cjonqk4ak0019yeh7sg8mc8t0","tag_id":"cjonqk4ai0013yeh7gd0252xv","_id":"cjonqk4ap001myeh7q3di276j"},{"post_id":"cjonqk4al001dyeh7djjwfhkp","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4aq001qyeh74zt00uqn"},{"post_id":"cjonqk4a40006yeh74c2okjlp","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4ar001uyeh70omzb6hp"},{"post_id":"cjonqk4a40006yeh74c2okjlp","tag_id":"cjonqk4ai0013yeh7gd0252xv","_id":"cjonqk4at001yyeh7hnqi288w"},{"post_id":"cjonqk4ao001kyeh77ynxr3l9","tag_id":"cjonqk4a50008yeh7qpnz2mg1","_id":"cjonqk4at0021yeh7wvk6miqa"},{"post_id":"cjonqk4ao001kyeh77ynxr3l9","tag_id":"cjonqk4ad000qyeh7nw2ule8k","_id":"cjonqk4au0024yeh7f71s39d2"},{"post_id":"cjonqk4ap001oyeh772xbfrhp","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4au0027yeh7ef9q7fkz"},{"post_id":"cjonqk4ap001oyeh772xbfrhp","tag_id":"cjonqk4ai0013yeh7gd0252xv","_id":"cjonqk4av002ayeh7w1wf413f"},{"post_id":"cjonqk4aq001syeh751q54f3o","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4av002dyeh7nk8px292"},{"post_id":"cjonqk4aq001syeh751q54f3o","tag_id":"cjonqk4ai0013yeh7gd0252xv","_id":"cjonqk4aw002gyeh75pnzymmz"},{"post_id":"cjonqk4a5000ayeh7xbi05gnp","tag_id":"cjonqk4ap001nyeh7c1wwc4i4","_id":"cjonqk4aw002iyeh7n0rdcior"},{"post_id":"cjonqk4a5000ayeh7xbi05gnp","tag_id":"cjonqk4as001vyeh761xsihwi","_id":"cjonqk4ax002lyeh7dg3b73n2"},{"post_id":"cjonqk4a6000byeh7j2cguqqs","tag_id":"cjonqk4ap001nyeh7c1wwc4i4","_id":"cjonqk4ax002myeh7khh3uwyh"},{"post_id":"cjonqk4a6000byeh7j2cguqqs","tag_id":"cjonqk4as001vyeh761xsihwi","_id":"cjonqk4ay002qyeh7rwf1x2cf"},{"post_id":"cjonqk4a8000fyeh7k86fswhe","tag_id":"cjonqk4ap001nyeh7c1wwc4i4","_id":"cjonqk4ay002ryeh7wowx86mq"},{"post_id":"cjonqk4a8000fyeh7k86fswhe","tag_id":"cjonqk4as001vyeh761xsihwi","_id":"cjonqk4az002vyeh73civpvg0"},{"post_id":"cjonqk4a9000gyeh7vbn5krbs","tag_id":"cjonqk4ap001nyeh7c1wwc4i4","_id":"cjonqk4b0002zyeh7vi0r9e4r"},{"post_id":"cjonqk4a9000gyeh7vbn5krbs","tag_id":"cjonqk4as001vyeh761xsihwi","_id":"cjonqk4b00030yeh7g5qkw3wl"},{"post_id":"cjonqk4ab000kyeh7r1t3r3rn","tag_id":"cjonqk4az002yyeh72e84v5ly","_id":"cjonqk4b10035yeh7sy5sn0ix"},{"post_id":"cjonqk4ab000kyeh7r1t3r3rn","tag_id":"cjonqk4as001vyeh761xsihwi","_id":"cjonqk4b10036yeh764wz7aty"},{"post_id":"cjonqk4ac000myeh7p2jp3gin","tag_id":"cjonqk4ap001nyeh7c1wwc4i4","_id":"cjonqk4b20039yeh7suqychcx"},{"post_id":"cjonqk4ac000myeh7p2jp3gin","tag_id":"cjonqk4as001vyeh761xsihwi","_id":"cjonqk4b2003ayeh7808t1oox"},{"post_id":"cjonqk4ad000ryeh7sn92qoj3","tag_id":"cjonqk4b10038yeh7o33q4ijk","_id":"cjonqk4b2003cyeh7raxd1gld"},{"post_id":"cjonqk4ae000syeh7k4aojmlh","tag_id":"cjonqk4b2003byeh752wkfwol","_id":"cjonqk4b2003fyeh77lrsb91u"},{"post_id":"cjonqk4ae000syeh7k4aojmlh","tag_id":"cjonqk4b2003dyeh7chql4v4k","_id":"cjonqk4b3003gyeh7363itmam"},{"post_id":"cjonqk4af000wyeh7o1t7c2aw","tag_id":"cjonqk4b2003eyeh7qyxsh6hn","_id":"cjonqk4b3003kyeh7wthgtent"},{"post_id":"cjonqk4af000wyeh7o1t7c2aw","tag_id":"cjonqk4b3003hyeh7pb7tipxx","_id":"cjonqk4b3003lyeh7jp6n9vk1"},{"post_id":"cjonqk4af000wyeh7o1t7c2aw","tag_id":"cjonqk4b3003iyeh76tjgubgs","_id":"cjonqk4b4003nyeh7x05g0wia"},{"post_id":"cjonqk4ah0012yeh7xdwmk7og","tag_id":"cjonqk4b2003byeh752wkfwol","_id":"cjonqk4b4003pyeh7zy23na5a"},{"post_id":"cjonqk4ah0012yeh7xdwmk7og","tag_id":"cjonqk4b2003dyeh7chql4v4k","_id":"cjonqk4b4003qyeh7bgu0yi0o"},{"post_id":"cjonqk4ai0014yeh7nn58njvk","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4b5003tyeh7yw9cs068"},{"post_id":"cjonqk4ai0014yeh7nn58njvk","tag_id":"cjonqk4b4003oyeh7prjs7sgk","_id":"cjonqk4b5003uyeh7mi7x222r"},{"post_id":"cjonqk4ai0014yeh7nn58njvk","tag_id":"cjonqk4b4003ryeh75sla8uoy","_id":"cjonqk4b5003wyeh7dgzmmpkl"},{"post_id":"cjonqk4aj0017yeh7gtfkwyn3","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4b6003yyeh7r246ih1j"},{"post_id":"cjonqk4aj0017yeh7gtfkwyn3","tag_id":"cjonqk4b4003oyeh7prjs7sgk","_id":"cjonqk4b6003zyeh74of9kw7b"},{"post_id":"cjonqk4aj0017yeh7gtfkwyn3","tag_id":"cjonqk4b5003vyeh7ntmbc1m3","_id":"cjonqk4b60041yeh7x8axbp67"},{"post_id":"cjonqk4an001gyeh7fnxg8oiu","tag_id":"cjonqk4b5003xyeh7bxrdwn8m","_id":"cjonqk4b60042yeh7eftip4bd"},{"post_id":"cjonqk4as001wyeh793lse105","tag_id":"cjonqk4b60040yeh7qkuuuaig","_id":"cjonqk4b60043yeh76g6a8p48"},{"post_id":"cjonqk4as001wyeh793lse105","tag_id":"cjonqk4a50008yeh7qpnz2mg1","_id":"cjonqk4b60044yeh7j2ain3e7"},{"post_id":"cjonqk4do0045yeh7rd7w2dex","tag_id":"cjonqk4af000vyeh7gu4heahc","_id":"cjonqk4ds0049yeh7cta2l3k1"},{"post_id":"cjonqk4do0045yeh7rd7w2dex","tag_id":"cjonqk4ai0013yeh7gd0252xv","_id":"cjonqk4du004cyeh7hpgmvkd9"},{"post_id":"cjonqk4dq0047yeh7274ccsju","tag_id":"cjonqk4a50008yeh7qpnz2mg1","_id":"cjonqk4dv004fyeh7v6eyxx77"},{"post_id":"cjonqk4dq0047yeh7274ccsju","tag_id":"cjonqk4ad000qyeh7nw2ule8k","_id":"cjonqk4dw004jyeh74cq7uedm"},{"post_id":"cjonqk4ds004ayeh7665arlct","tag_id":"cjonqk4b60040yeh7qkuuuaig","_id":"cjonqk4dx004myeh7rrgo3r9z"},{"post_id":"cjonqk4ds004ayeh7665arlct","tag_id":"cjonqk4a7000eyeh7ks132vfo","_id":"cjonqk4dy004pyeh7wel02l0z"},{"post_id":"cjonqk4du004dyeh7vqokvy2t","tag_id":"cjonqk4dw004iyeh7cfdvewh6","_id":"cjonqk4dz004syeh70y4nufqg"},{"post_id":"cjonqk4dv004gyeh78py2by02","tag_id":"cjonqk4b60040yeh7qkuuuaig","_id":"cjonqk4dz004uyeh72y0pdtjs"},{"post_id":"cjonqk4dv004gyeh78py2by02","tag_id":"cjonqk4dy004qyeh7wiby935v","_id":"cjonqk4e0004wyeh7fo8hob16"},{"post_id":"cjonqk4dw004kyeh753t2ujp8","tag_id":"cjonqk4a7000eyeh7ks132vfo","_id":"cjonqk4e0004xyeh7etyrrayg"},{"post_id":"cjonqk4dw004kyeh753t2ujp8","tag_id":"cjonqk4dz004tyeh7f5pv5ele","_id":"cjonqk4e0004yyeh7hwca1izz"},{"post_id":"cjonqk4ag000yyeh763xhl0ok","tag_id":"cjonqq0k90050yefymivbu4v3","_id":"cjonqq0ka0053yefy61wzcfs3"},{"post_id":"cjonqk4ag000yyeh763xhl0ok","tag_id":"cjonqq0ka0051yefy3rd3wddk","_id":"cjonqq0kb0054yefycu4nvjbn"},{"post_id":"cjonqk4ag000yyeh763xhl0ok","tag_id":"cjonqxd060055yefyawevlrqi","_id":"cjonqxd060056yefyd89jixy0"}],"Tag":[{"name":"前端，基础","_id":"cjonqk4a20003yeh7yvm9marc"},{"name":"前端","_id":"cjonqk4a50008yeh7qpnz2mg1"},{"name":"React","_id":"cjonqk4a7000eyeh7ks132vfo"},{"name":"基础","_id":"cjonqk4ad000qyeh7nw2ule8k"},{"name":"node","_id":"cjonqk4af000vyeh7gu4heahc"},{"name":"node基础","_id":"cjonqk4ai0013yeh7gd0252xv"},{"name":"git","_id":"cjonqk4ap001nyeh7c1wwc4i4"},{"name":"前端笔记","_id":"cjonqk4as001vyeh761xsihwi"},{"name":"git配置","_id":"cjonqk4az002yyeh72e84v5ly"},{"name":"git，前端笔记","_id":"cjonqk4b10038yeh7o33q4ijk"},{"name":"hexo","_id":"cjonqk4b2003byeh752wkfwol"},{"name":"装逼利器","_id":"cjonqk4b2003dyeh7chql4v4k"},{"name":"WebStorm","_id":"cjonqk4b2003eyeh7qyxsh6hn"},{"name":"PhpStorm","_id":"cjonqk4b3003hyeh7pb7tipxx"},{"name":"开发工具","_id":"cjonqk4b3003iyeh76tjgubgs"},{"name":"js","_id":"cjonqk4b4003oyeh7prjs7sgk"},{"name":"jsonp","_id":"cjonqk4b4003ryeh75sla8uoy"},{"name":"nodeAPI","_id":"cjonqk4b5003vyeh7ntmbc1m3"},{"name":"node，node基础","_id":"cjonqk4b5003xyeh7bxrdwn8m"},{"name":"uba","_id":"cjonqk4b60040yeh7qkuuuaig"},{"name":"文档目录，规范","_id":"cjonqk4dw004iyeh7cfdvewh6"},{"name":"mock","_id":"cjonqk4dy004qyeh7wiby935v"},{"name":"Css","_id":"cjonqk4dz004tyeh7f5pv5ele"},{"name":"macOS","_id":"cjonqq0k90050yefymivbu4v3"},{"name":"mojove","_id":"cjonqq0ka0051yefy3rd3wddk"},{"name":"brew","_id":"cjonqxd060055yefyawevlrqi"}]}}